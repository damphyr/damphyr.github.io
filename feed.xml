<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ampelofilosofies</title>
    <description>Random comments on random subjects in random language</description>
    <link>http://www.ampelofilosofies.gr</link>
    <atom:link href="http://www.ampelofilosofies.gr/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Windows Installations & Virtual Machines</title>
        <description>&lt;p&gt;&lt;em&gt;This post was originally written in July 2014 and then lounged in the dusty, dark recesses of my disk because... Windows. The hindsight of a whole year of using the Packeer/Vagrant/Chef workflow led to minor updates, which speaks for the applicability of the approach&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Automating Windows installations is hard!&lt;/p&gt;

&lt;p&gt;Maybe hard is not the right word. &amp;#39;Unecessarily complicated&amp;#39;, &amp;#39;obfuscated&amp;#39;, &amp;#39;frustrating&amp;#39; come to mind&lt;sup&gt;1&lt;/sup&gt;. Sometimes, for certain, not so stelarly engineered solutions the word &amp;#39;impossible&amp;#39; creeps around the corner.&lt;/p&gt;

&lt;p&gt;And yet things have never been better for anyone trying to solve the riddle. All the tools are there and while looking at the *ix solutions you wish for a lot of things (like a decent shell, or no registry, or a standardized way for installer parameters, or a package repository or...you get my drift) &amp;#39;impossible&amp;#39; has had to hide in some really obscure corners.&lt;/p&gt;

&lt;h2&gt;Installation drudgery&lt;/h2&gt;

&lt;p&gt;I can&amp;#39;t even begin to estimate the times I have installed Windows from scratch. It became tedious very, very fast but there was no release in sight for a long time.&lt;/p&gt;

&lt;p&gt;With the advent of desktop virtualization and laptops that can accomodate a couple of Windows VMs running concurrently I follow the practice of keeping one pristine Windows installation&lt;sup&gt;2&lt;/sup&gt; at hand and a bootstrap package of command files that install the latest &lt;a href=&quot;http://chefdk.com&quot;&gt;ChefDK&lt;/a&gt;, an SVN client and git for Windows.&lt;/p&gt;

&lt;p&gt;The workflow as it stands:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Copy the VM&lt;/li&gt;
&lt;li&gt;Boot the VM and perform any outstanding updates (this includes Windows and the virtualization tools &amp;amp; drivers)&lt;/li&gt;
&lt;li&gt;Copy the bootstrap package over and run the command file&lt;/li&gt;
&lt;li&gt;Checkout/clone the repository with all my Windows recipes&lt;/li&gt;
&lt;li&gt;Run Chef to provision the VM&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Not enough (?)&lt;/h2&gt;

&lt;p&gt;VMs are bulky. With a dynamically growing disk a vanilla Windows VM ways in at about 20GB. Add to that the software for toolchains etc. and it grows very large indeed (my current C/C++ embedded environment weights in at 50GB).&lt;/p&gt;

&lt;p&gt;You can&amp;#39;t expect everyone to download it every time it changes so the case for immutable infrastructure when creating development environments is not very strong. Also, developers tend to have a lot of half-finished and ongoing work on disk which means you can&amp;#39;t really throw away the VM when updating, you have to do an incremental update for user friendliness sake.&lt;/p&gt;

&lt;p&gt;A properly configured Windows base box is smaller (about 5GB) and we can skip the time it takes to create it from an .iso, because, well, we don&amp;#39;t do it very often.&lt;/p&gt;

&lt;p&gt;Create the base box using &lt;a href=&quot;http://www.packer.io&quot;&gt;Packer&lt;/a&gt;, add a Vagrantfile to the repository and host the base box in a known location and we have the capability to recreate the development environment. &lt;/p&gt;

&lt;p&gt;How much goes into the base box in terms of software and configuration is your choice but vanilla installations work best, especially with Windows (you get the benefit of having a pristine registry database). &lt;/p&gt;

&lt;p&gt;Keep in mind that you have to update the base box regularly to avoid the massive Windows Update penalty when creating new VM instances. Automating the creation process with Packer is thankfully very easy and can be delegated to a CI/cron job.&lt;/p&gt;

&lt;p&gt;Everything else is done with Chef and a bit of powershell (to bootstrap Chef from Vagrant). To help with that we have a cookbook by the name of &lt;a href=&quot;https://github.com/Zuehlke/cookbook-windev&quot;&gt;windev&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;So the workflow becomes&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;vagrant up&lt;/li&gt;
&lt;li&gt;Run Chef to provision the VM&lt;/li&gt;
&lt;li&gt;Go back to 2. when necessary&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We still haven&amp;#39;t solved the performance problem. It takes a long time to start a VM and the traditional desktop hypervisors hog a lot of resources. Docker is not a viable solution because Windows, so we have a case of serious OS envy.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; After years of deliberation I am convinced that the Windows Registry is among the top 5 of  engineering solutions that on hindsight revealed themselves as colossal PITA mistakes. It may even occupy the top spot, but then, I&amp;#39;m biased.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt; Meaning just a vanilla installation with no additional software other than the latest Microsoft patches.&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Oct 2015 14:02:44 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2015/10/17/windows-installations--virtual-machines</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2015/10/17/windows-installations--virtual-machines</guid>
      </item>
    
      <item>
        <title>Windows Installations  Virtual Machines</title>
        <description>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;style&gt;body {
  width: 45em;
  border: 1px solid #ddd;
  outline: 1300px solid #fff;
  margin: 16px auto;
}

body .markdown-body
{
  padding: 30px;
}

@font-face {
  font-family: fontawesome-mini;
  src: url(data:font/woff;charset=utf-8;base64,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) format(&#39;woff&#39;);
}

@font-face {
  font-family: octicons-anchor;
  src: url(data:font/woff;charset=utf-8;base64,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) format(&#39;woff&#39;);
}

.markdown-body {
  font-family: sans-serif;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
  color: #333333;
  overflow: hidden;
  font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Segoe UI&quot;, Arial, freesans, sans-serif;
  font-size: 16px;
  line-height: 1.6;
  word-wrap: break-word;
}

.markdown-body a {
  background: transparent;
}

.markdown-body a:active,
.markdown-body a:hover {
  outline: 0;
}

.markdown-body b,
.markdown-body strong {
  font-weight: bold;
}

.markdown-body mark {
  background: #ff0;
  color: #000;
  font-style: italic;
  font-weight: bold;
}

.markdown-body sub,
.markdown-body sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}
.markdown-body sup {
  top: -0.5em;
}
.markdown-body sub {
  bottom: -0.25em;
}

.markdown-body h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

.markdown-body img {
  border: 0;
}

.markdown-body hr {
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0;
}

.markdown-body pre {
  overflow: auto;
}

.markdown-body code,
.markdown-body kbd,
.markdown-body pre,
.markdown-body samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

.markdown-body input {
  color: inherit;
  font: inherit;
  margin: 0;
}

.markdown-body html input[disabled] {
  cursor: default;
}

.markdown-body input {
  line-height: normal;
}

.markdown-body input[type=&quot;checkbox&quot;] {
  box-sizing: border-box;
  padding: 0;
}

.markdown-body table {
  border-collapse: collapse;
  border-spacing: 0;
}

.markdown-body td,
.markdown-body th {
  padding: 0;
}

.markdown-body .codehilitetable {
  border: 0;
  border-spacing: 0;
}

.markdown-body .codehilitetable tr {
  border: 0;
}

.markdown-body .codehilitetable pre,
.markdown-body .codehilitetable div.codehilite {
  margin: 0;
}

.markdown-body .linenos,
.markdown-body .code,
.markdown-body .codehilitetable td {
  border: 0;
  padding: 0;
}

.markdown-body td:not(.linenos) .linenodiv {
  padding: 0 !important;
}

.markdown-body .code {
  width: 100%;
}

.markdown-body .linenos div pre,
.markdown-body .linenodiv pre,
.markdown-body .linenodiv {
  border: 0;
  -webkit-border-radius: 0;
  -moz-border-radius: 0;
  border-radius: 0;
  -webkit-border-top-left-radius: 3px;
  -webkit-border-bottom-left-radius: 3px;
  -moz-border-radius-topleft: 3px;
  -moz-border-radius-bottomleft: 3px;
  border-top-left-radius: 3px;
  border-bottom-left-radius: 3px;
}

.markdown-body .code div pre,
.markdown-body .code div {
  border: 0;
  -webkit-border-radius: 0;
  -moz-border-radius: 0;
  border-radius: 0;
  -webkit-border-top-right-radius: 3px;
  -webkit-border-bottom-right-radius: 3px;
  -moz-border-radius-topright: 3px;
  -moz-border-radius-bottomright: 3px;
  border-top-right-radius: 3px;
  border-bottom-right-radius: 3px;
}

.markdown-body * {
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

.markdown-body input {
  font: 13px Helvetica, arial, freesans, clean, sans-serif, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;
  line-height: 1.4;
}

.markdown-body a {
  color: #4183c4;
  text-decoration: none;
}

.markdown-body a:hover,
.markdown-body a:focus,
.markdown-body a:active {
  text-decoration: underline;
}

.markdown-body hr {
  height: 0;
  margin: 15px 0;
  overflow: hidden;
  background: transparent;
  border: 0;
  border-bottom: 1px solid #ddd;
}

.markdown-body hr:before,
.markdown-body hr:after {
  display: table;
  content: &quot; &quot;;
}

.markdown-body hr:after {
  clear: both;
}

.markdown-body h1,
.markdown-body h2,
.markdown-body h3,
.markdown-body h4,
.markdown-body h5,
.markdown-body h6 {
  margin-top: 15px;
  margin-bottom: 15px;
  line-height: 1.1;
}

.markdown-body h1 {
  font-size: 30px;
}

.markdown-body h2 {
  font-size: 21px;
}

.markdown-body h3 {
  font-size: 16px;
}

.markdown-body h4 {
  font-size: 14px;
}

.markdown-body h5 {
  font-size: 12px;
}

.markdown-body h6 {
  font-size: 11px;
}

.markdown-body blockquote {
  margin: 0;
}

.markdown-body ul,
.markdown-body ol {
  padding: 0;
  margin-top: 0;
  margin-bottom: 0;
}

.markdown-body ol ol,
.markdown-body ul ol {
  list-style-type: lower-roman;
}

.markdown-body ul ul ol,
.markdown-body ul ol ol,
.markdown-body ol ul ol,
.markdown-body ol ol ol {
  list-style-type: lower-alpha;
}

.markdown-body dd {
  margin-left: 0;
}

.markdown-body code,
.markdown-body pre,
.markdown-body samp {
  font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;
  font-size: 12px;
}

.markdown-body pre {
  margin-top: 0;
  margin-bottom: 0;
}

.markdown-body kbd {
  background-color: #e7e7e7;
  background-image: -moz-linear-gradient(#fefefe, #e7e7e7);
  background-image: -webkit-linear-gradient(#fefefe, #e7e7e7);
  background-image: linear-gradient(#fefefe, #e7e7e7);
  background-repeat: repeat-x;
  border-radius: 2px;
  border: 1px solid #cfcfcf;
  color: #000;
  padding: 3px 5px;
  line-height: 10px;
  font: 11px Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;
  display: inline-block;
}

.markdown-body&gt;*:first-child {
  margin-top: 0 !important;
}

.markdown-body&gt;*:last-child {
  margin-bottom: 0 !important;
}

.markdown-body .headeranchor-link {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  display: block;
  padding-right: 6px;
  padding-left: 30px;
  margin-left: -30px;
}

.markdown-body .headeranchor-link:focus {
  outline: none;
}

.markdown-body h1,
.markdown-body h2,
.markdown-body h3,
.markdown-body h4,
.markdown-body h5,
.markdown-body h6 {
  position: relative;
  margin-top: 1em;
  margin-bottom: 16px;
  font-weight: bold;
  line-height: 1.4;
}

.markdown-body h1 .headeranchor,
.markdown-body h2 .headeranchor,
.markdown-body h3 .headeranchor,
.markdown-body h4 .headeranchor,
.markdown-body h5 .headeranchor,
.markdown-body h6 .headeranchor {
  display: none;
  color: #000;
  vertical-align: middle;
}

.markdown-body h1:hover .headeranchor-link,
.markdown-body h2:hover .headeranchor-link,
.markdown-body h3:hover .headeranchor-link,
.markdown-body h4:hover .headeranchor-link,
.markdown-body h5:hover .headeranchor-link,
.markdown-body h6:hover .headeranchor-link {
  height: 1em;
  padding-left: 8px;
  margin-left: -30px;
  line-height: 1;
  text-decoration: none;
}

.markdown-body h1:hover .headeranchor-link .headeranchor,
.markdown-body h2:hover .headeranchor-link .headeranchor,
.markdown-body h3:hover .headeranchor-link .headeranchor,
.markdown-body h4:hover .headeranchor-link .headeranchor,
.markdown-body h5:hover .headeranchor-link .headeranchor,
.markdown-body h6:hover .headeranchor-link .headeranchor {
  display: inline-block;
}

.markdown-body h1 {
  padding-bottom: 0.3em;
  font-size: 2.25em;
  line-height: 1.2;
  border-bottom: 1px solid #eee;
}

.markdown-body h2 {
  padding-bottom: 0.3em;
  font-size: 1.75em;
  line-height: 1.225;
  border-bottom: 1px solid #eee;
}

.markdown-body h3 {
  font-size: 1.5em;
  line-height: 1.43;
}

.markdown-body h4 {
  font-size: 1.25em;
}

.markdown-body h5 {
  font-size: 1em;
}

.markdown-body h6 {
  font-size: 1em;
  color: #777;
}

.markdown-body p,
.markdown-body blockquote,
.markdown-body ul,
.markdown-body ol,
.markdown-body dl,
.markdown-body table,
.markdown-body pre,
.markdown-body .admonition {
  margin-top: 0;
  margin-bottom: 16px;
}

.markdown-body hr {
  height: 4px;
  padding: 0;
  margin: 16px 0;
  background-color: #e7e7e7;
  border: 0 none;
}

.markdown-body ul,
.markdown-body ol {
  padding-left: 2em;
}

.markdown-body ul ul,
.markdown-body ul ol,
.markdown-body ol ol,
.markdown-body ol ul {
  margin-top: 0;
  margin-bottom: 0;
}

.markdown-body li&gt;p {
  margin-top: 16px;
}

.markdown-body dl {
  padding: 0;
}

.markdown-body dl dt {
  padding: 0;
  margin-top: 16px;
  font-size: 1em;
  font-style: italic;
  font-weight: bold;
}

.markdown-body dl dd {
  padding: 0 16px;
  margin-bottom: 16px;
}

.markdown-body blockquote {
  padding: 0 15px;
  color: #777;
  border-left: 4px solid #ddd;
}

.markdown-body blockquote&gt;:first-child {
  margin-top: 0;
}

.markdown-body blockquote&gt;:last-child {
  margin-bottom: 0;
}

.markdown-body table {
  display: block;
  width: 100%;
  overflow: auto;
  word-break: normal;
  word-break: keep-all;
}

.markdown-body table th {
  font-weight: bold;
}

.markdown-body table th,
.markdown-body table td {
  padding: 6px 13px;
  border: 1px solid #ddd;
}

.markdown-body table tr {
  background-color: #fff;
  border-top: 1px solid #ccc;
}

.markdown-body table tr:nth-child(2n) {
  background-color: #f8f8f8;
}

.markdown-body img {
  max-width: 100%;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

.markdown-body code,
.markdown-body samp {
  padding: 0;
  padding-top: 0.2em;
  padding-bottom: 0.2em;
  margin: 0;
  font-size: 85%;
  background-color: rgba(0,0,0,0.04);
  border-radius: 3px;
}

.markdown-body code:before,
.markdown-body code:after {
  letter-spacing: -0.2em;
  content: &quot;\00a0&quot;;
}

.markdown-body pre&gt;code {
  padding: 0;
  margin: 0;
  font-size: 100%;
  word-break: normal;
  white-space: pre;
  background: transparent;
  border: 0;
}

.markdown-body .codehilite {
  margin-bottom: 16px;
}

.markdown-body .codehilite pre,
.markdown-body pre {
  padding: 16px;
  overflow: auto;
  font-size: 85%;
  line-height: 1.45;
  background-color: #f7f7f7;
  border-radius: 3px;
}

.markdown-body .codehilite pre {
  margin-bottom: 0;
  word-break: normal;
}

.markdown-body pre {
  word-wrap: normal;
}

.markdown-body pre code {
  display: inline;
  max-width: initial;
  padding: 0;
  margin: 0;
  overflow: initial;
  line-height: inherit;
  word-wrap: normal;
  background-color: transparent;
  border: 0;
}

.markdown-body pre code:before,
.markdown-body pre code:after {
  content: normal;
}

/* Admonition */
.markdown-body .admonition {
  -webkit-border-radius: 3px;
  -moz-border-radius: 3px;
  position: relative;
  border-radius: 3px;
  border: 1px solid #e0e0e0;
  border-left: 6px solid #333;
  padding: 10px 10px 10px 30px;
}

.markdown-body .admonition table {
  color: #333;
}

.markdown-body .admonition p {
  padding: 0;
}

.markdown-body .admonition-title {
  font-weight: bold;
  margin: 0;
}

.markdown-body .admonition&gt;.admonition-title {
  color: #333;
}

.markdown-body .attention&gt;.admonition-title {
  color: #a6d796;
}

.markdown-body .caution&gt;.admonition-title {
  color: #d7a796;
}

.markdown-body .hint&gt;.admonition-title {
  color: #96c6d7;
}

.markdown-body .danger&gt;.admonition-title {
  color: #c25f77;
}

.markdown-body .question&gt;.admonition-title {
  color: #96a6d7;
}

.markdown-body .note&gt;.admonition-title {
  color: #d7c896;
}

.markdown-body .admonition:before,
.markdown-body .attention:before,
.markdown-body .caution:before,
.markdown-body .hint:before,
.markdown-body .danger:before,
.markdown-body .question:before,
.markdown-body .note:before {
  font: normal normal 16px fontawesome-mini;
  -moz-osx-font-smoothing: grayscale;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  line-height: 1.5;
  color: #333;
  position: absolute;
  left: 0;
  top: 0;
  padding-top: 10px;
  padding-left: 10px;
}

.markdown-body .admonition:before {
  content: &quot;\f056\00a0&quot;;
  color: 333;
}

.markdown-body .attention:before {
  content: &quot;\f058\00a0&quot;;
  color: #a6d796;
}

.markdown-body .caution:before {
  content: &quot;\f06a\00a0&quot;;
  color: #d7a796;
}

.markdown-body .hint:before {
  content: &quot;\f05a\00a0&quot;;
  color: #96c6d7;
}

.markdown-body .danger:before {
  content: &quot;\f057\00a0&quot;;
  color: #c25f77;
}

.markdown-body .question:before {
  content: &quot;\f059\00a0&quot;;
  color: #96a6d7;
}

.markdown-body .note:before {
  content: &quot;\f040\00a0&quot;;
  color: #d7c896;
}

.markdown-body .admonition::after {
  content: normal;
}

.markdown-body .attention {
  border-left: 6px solid #a6d796;
}

.markdown-body .caution {
  border-left: 6px solid #d7a796;
}

.markdown-body .hint {
  border-left: 6px solid #96c6d7;
}

.markdown-body .danger {
  border-left: 6px solid #c25f77;
}

.markdown-body .question {
  border-left: 6px solid #96a6d7;
}

.markdown-body .note {
  border-left: 6px solid #d7c896;
}

.markdown-body .admonition&gt;*:first-child {
  margin-top: 0 !important;
}

.markdown-body .admonition&gt;*:last-child {
  margin-bottom: 0 !important;
}

/* progress bar*/
.markdown-body .progress {
  display: block;
  width: 300px;
  margin: 10px 0;
  height: 24px;
  -webkit-border-radius: 3px;
  -moz-border-radius: 3px;
  border-radius: 3px;
  background-color: #ededed;
  position: relative;
  box-shadow: inset -1px 1px 3px rgba(0, 0, 0, .1);
}

.markdown-body .progress-label {
  position: absolute;
  text-align: center;
  font-weight: bold;
  width: 100%; margin: 0;
  line-height: 24px;
  color: #333;
  text-shadow: 1px 1px 0 #fefefe, -1px -1px 0 #fefefe, -1px 1px 0 #fefefe, 1px -1px 0 #fefefe, 0 1px 0 #fefefe, 0 -1px 0 #fefefe, 1px 0 0 #fefefe, -1px 0 0 #fefefe, 1px 1px 2px #000;
  -webkit-font-smoothing: antialiased !important;
  white-space: nowrap;
  overflow: hidden;
}

.markdown-body .progress-bar {
  height: 24px;
  float: left;
  -webkit-border-radius: 3px;
  -moz-border-radius: 3px;
  border-radius: 3px;
  background-color: #96c6d7;
  box-shadow: inset 0 1px 0 rgba(255, 255, 255, .5), inset 0 -1px 0 rgba(0, 0, 0, .1);
  background-size: 30px 30px;
  background-image: -webkit-linear-gradient(
    135deg, rgba(255, 255, 255, .4) 27%,
    transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%,
    transparent 77%, transparent
  );
  background-image: -moz-linear-gradient(
    135deg,
    rgba(255, 255, 255, .4) 27%, transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%, transparent 77%,
    transparent
  );
  background-image: -ms-linear-gradient(
    135deg,
    rgba(255, 255, 255, .4) 27%, transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%, transparent 77%,
    transparent
  );
  background-image: -o-linear-gradient(
    135deg,
    rgba(255, 255, 255, .4) 27%, transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%, transparent 77%,
    transparent
  );
  background-image: linear-gradient(
    135deg,
    rgba(255, 255, 255, .4) 27%, transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%, transparent 77%,
    transparent
  );
}

.markdown-body .progress-100plus .progress-bar {
  background-color: #a6d796;
}

.markdown-body .progress-80plus .progress-bar {
  background-color: #c6d796;
}

.markdown-body .progress-60plus .progress-bar {
  background-color: #d7c896;
}

.markdown-body .progress-40plus .progress-bar {
  background-color: #d7a796;
}

.markdown-body .progress-20plus .progress-bar {
  background-color: #d796a6;
}

.markdown-body .progress-0plus .progress-bar {
  background-color: #c25f77;
}

.markdown-body .candystripe-animate .progress-bar{
  -webkit-animation: animate-stripes 3s linear infinite;
  -moz-animation: animate-stripes 3s linear infinite;
  animation: animate-stripes 3s linear infinite;
}

@-webkit-keyframes animate-stripes {
  0% {
    background-position: 0 0;
  }

  100% {
    background-position: 60px 0;
  }
}

@-moz-keyframes animate-stripes {
  0% {
    background-position: 0 0;
  }

  100% {
    background-position: 60px 0;
  }
}

@keyframes animate-stripes {
  0% {
    background-position: 0 0;
  }

  100% {
    background-position: 60px 0;
  }
}

.markdown-body .gloss .progress-bar {
  box-shadow:
    inset 0 4px 12px rgba(255, 255, 255, .7),
    inset 0 -12px 0 rgba(0, 0, 0, .05);
}

/* Multimarkdown Critic Blocks */
.markdown-body .critic_mark {
  background: #ff0;
}

.markdown-body .critic_delete {
  color: #c82829;
  text-decoration: line-through;
}

.markdown-body .critic_insert {
  color: #718c00 ;
  text-decoration: underline;
}

.markdown-body .critic_comment {
  color: #8e908c;
  font-style: italic;
}

.markdown-body .headeranchor {
  font: normal normal 16px octicons-anchor;
  line-height: 1;
  display: inline-block;
  text-decoration: none;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.headeranchor:before {
  content: &#39;\f05c&#39;;
}

.markdown-body .task-list-item {
  list-style-type: none;
}

.markdown-body .task-list-item+.task-list-item {
  margin-top: 3px;
}

.markdown-body .task-list-item input {
  margin: 0 4px 0.25em -20px;
  vertical-align: middle;
}

/* Media */
@media only screen and (min-width: 480px) {
  .markdown-body {
    font-size:14px;
  }
}

@media only screen and (min-width: 768px) {
  .markdown-body {
    font-size:16px;
  }
}

@media print {
  .markdown-body * {
    background: transparent !important;
    color: black !important;
    filter:none !important;
    -ms-filter: none !important;
  }

  .markdown-body {
    font-size:12pt;
    max-width:100%;
    outline:none;
    border: 0;
  }

  .markdown-body a,
  .markdown-body a:visited {
    text-decoration: underline;
  }

  .markdown-body .headeranchor-link {
    display: none;
  }

  .markdown-body a[href]:after {
    content: &quot; (&quot; attr(href) &quot;)&quot;;
  }

  .markdown-body abbr[title]:after {
    content: &quot; (&quot; attr(title) &quot;)&quot;;
  }

  .markdown-body .ir a:after,
  .markdown-body a[href^=&quot;javascript:&quot;]:after,
  .markdown-body a[href^=&quot;#&quot;]:after {
    content: &quot;&quot;;
  }

  .markdown-body pre {
    white-space: pre;
    white-space: pre-wrap;
    word-wrap: break-word;
  }

  .markdown-body pre,
  .markdown-body blockquote {
    border: 1px solid #999;
    padding-right: 1em;
    page-break-inside: avoid;
  }

  .markdown-body .progress,
  .markdown-body .progress-bar {
    -moz-box-shadow: none;
    -webkit-box-shadow: none;
    box-shadow: none;
  }

  .markdown-body .progress {
    border: 1px solid #ddd;
  }

  .markdown-body .progress-bar {
    height: 22px;
    border-right: 1px solid #ddd;
  }

  .markdown-body tr,
  .markdown-body img {
    page-break-inside: avoid;
  }

  .markdown-body img {
    max-width: 100% !important;
  }

  .markdown-body p,
  .markdown-body h2,
  .markdown-body h3 {
    orphans: 3;
    widows: 3;
  }

  .markdown-body h2,
  .markdown-body h3 {
    page-break-after: avoid;
  }
}
&lt;/style&gt;&lt;title&gt;2015-10-17-windows-installations--virtual-machines&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;article class=&quot;markdown-body&quot;&gt;&lt;hr /&gt;
&lt;p&gt;layout: post&lt;br /&gt;
title: &amp;ldquo;Windows Installations &amp;amp; Virtual Machines&amp;rdquo;&lt;br /&gt;
categories: software&lt;br /&gt;
tags: vagrant, packer, basebox, virtualization, devops, development, windows&lt;br /&gt;
published: True&lt;br /&gt;
date:2015-10-17 12:02:44&lt;br /&gt;
languages: en&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;This post was originally written in July 2014 and then lounged in the dusty, dark recesses of my disk because&amp;hellip; Windows. The hindsight of a whole year of using the Packeer/Vagrant/Chef workflow led to minor updates, which speaks for the applicability of the approach&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Automating Windows installations is hard!&lt;/p&gt;
&lt;p&gt;Maybe hard is not the right word. &amp;lsquo;Unecessarily complicated&amp;rsquo;, &amp;lsquo;obfuscated&amp;rsquo;, &amp;lsquo;frustrating&amp;rsquo; come to mind&lt;sup&gt;1&lt;/sup&gt;. Sometimes, for certain, not so stelarly engineered solutions the word &amp;lsquo;impossible&amp;rsquo; creeps around the corner.&lt;/p&gt;
&lt;p&gt;And yet things have never been better for anyone trying to solve the riddle. All the tools are there and while looking at the *ix solutions you wish for a lot of things (like a decent shell, or no registry, or a standardized way for installer parameters, or a package repository or&amp;hellip;you get my drift) &amp;lsquo;impossible&amp;rsquo; has had to hide in some really obscure corners.&lt;/p&gt;
&lt;h2 id=&quot;installation-drudgery&quot;&gt;&lt;a name=&quot;user-content-installation-drudgery&quot; href=&quot;#installation-drudgery&quot; class=&quot;headeranchor-link&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;headeranchor&quot;&gt;&lt;/span&gt;&lt;/a&gt;Installation drudgery&lt;/h2&gt;
&lt;p&gt;I can&amp;rsquo;t even begin to estimate the times I have installed Windows from scratch. It became tedious very, very fast but there was no release in sight for a long time.&lt;/p&gt;
&lt;p&gt;With the advent of desktop virtualization and laptops that can accomodate a couple of Windows VMs running concurrently I follow the practice of keeping one pristine Windows installation&lt;sup&gt;2&lt;/sup&gt; at hand and a bootstrap package of command files that install the latest &lt;a href=&quot;http://chefdk.com&quot;&gt;ChefDK&lt;/a&gt;, an SVN client and git for Windows.&lt;/p&gt;
&lt;p&gt;The workflow as it stands:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Copy the VM&lt;/li&gt;
&lt;li&gt;Boot the VM and perform any outstanding updates (this includes Windows and the virtualization tools &amp;amp; drivers)&lt;/li&gt;
&lt;li&gt;Copy the bootstrap package over and run the command file&lt;/li&gt;
&lt;li&gt;Checkout/clone the repository with all my Windows recipes&lt;/li&gt;
&lt;li&gt;Run Chef to provision the VM&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;not-enough&quot;&gt;&lt;a name=&quot;user-content-not-enough&quot; href=&quot;#not-enough&quot; class=&quot;headeranchor-link&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;headeranchor&quot;&gt;&lt;/span&gt;&lt;/a&gt;Not enough (?)&lt;/h2&gt;
&lt;p&gt;VMs are bulky. With a dynamically growing disk a vanilla Windows VM ways in at about 20GB. Add to that the software for toolchains etc. and it grows very large indeed (my current C/C++ embedded environment weights in at 50GB).&lt;/p&gt;
&lt;p&gt;You can&amp;rsquo;t expect everyone to download it every time it changes so the case for immutable infrastructure when creating development environments is not very strong. Also, developers tend to have a lot of half-finished and ongoing work on disk which means you can&amp;rsquo;t really throw away the VM when updating, you have to do an incremental update for user friendliness sake.&lt;/p&gt;
&lt;p&gt;A properly configured Windows base box is smaller (about 5GB) and we can skip the time it takes to create it from an .iso, because, well, we don&amp;rsquo;t do it very often.&lt;/p&gt;
&lt;p&gt;Create the base box using &lt;a href=&quot;http://packer.io&quot;&gt;Packer&lt;/a&gt;, add a Vagrantfile to the repository and host the base box in a known location and we have the capability to recreate the development environment. &lt;/p&gt;
&lt;p&gt;How much goes into the base box in terms of software and configuration is your choice but vanilla installations work best, especially with Windows (you get the benefit of having a pristine registry database). &lt;/p&gt;
&lt;p&gt;Keep in mind that you have to update the base box regularly to avoid the massive Windows Update penalty when creating new VM instances. Automating the creation process with Packer is thankfully very easy and can be delegated to a CI/cron job.&lt;/p&gt;
&lt;p&gt;Everything else is done with Chef and a bit of powershell (to bootstrap Chef from Vagrant). To help with that we have a cookbook by the name of &lt;a href=&quot;http://github.com/Zuehlke/cookbook-windev&quot;&gt;windev&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;So the workflow becomes&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;vagrant up&lt;/li&gt;
&lt;li&gt;Run Chef to provision the VM&lt;/li&gt;
&lt;li&gt;Go back to 2. when necessary&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We still haven&amp;rsquo;t solved the performance problem. It takes a long time to start a VM and the traditional desktop hypervisors hog a lot of resources. Docker is not a viable solution because Windows, so we have a case of serious OS envy.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; After years of deliberation I am convinced that the Windows Registry is among the top 5 of  engineering solutions that on hindsight revealed themselves as colossal PITA mistakes. It may even occupy the top spot, but then, I&amp;rsquo;m biased.&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt; Meaning just a vanilla installation with no additional software other than the latest Microsoft patches.&lt;/p&gt;&lt;/article&gt;&lt;/body&gt;&lt;/html&gt;</description>
        <pubDate>Sat, 17 Oct 2015 00:00:00 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/2015/10/17/windows-installations--virtual-machines</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/2015/10/17/windows-installations--virtual-machines</guid>
      </item>
    
      <item>
        <title>Cars: To drive or not to drive?</title>
        <description>&lt;p&gt;I don&amp;#39;t own a car and on the rare occasions I need one, I rent. So I get to drive lots of different cars and most of them brand new. In my daily slog I don&amp;#39;t use a car, it&amp;#39;s trains, trains, trains. Wouldn&amp;#39;t use a car even if I owned one. Which in hindsight is probably why I enjoy driving so much.&lt;/p&gt;

&lt;p&gt;This summer I got to drive a lot in Greece and the UK. All the rentals came equiped with cruise control (for the curious: a Pegeuot 307, a Honda Jazz and a Ford Kuga) and initially the novelty of the feature was a fun game. Then I drove on the M62 in England and was glad for it because it made obeying the draconian speed limits simpler and easier. &lt;/p&gt;

&lt;p&gt;The empty expanse of a three lane motorway stretched infront of me and begged me to drop my foot on the gas pedal like a lead weight. Cruise control kept me in check. And then I got bored. Driving isn&amp;#39;t really fun on the motorway.&lt;/p&gt;

&lt;p&gt;I enjoy complex things and driving is one of the most complex activities we undertake: In a manual transmission car it requires the coordinated but independent actions of all four limbs while processing audio and visual sensory input and all of this moving at high speeds in a chaotic system. &lt;/p&gt;

&lt;p&gt;An automatic transmission takes the left foot out of the equation, cruise control does the same for the right (for certain motorway stretches - don&amp;#39;t ever use cruise control on the mountains of Greece, it won&amp;#39;t turn out OK). &lt;/p&gt;

&lt;p&gt;It&amp;#39;s an approximation of how it will feel in a self-driving car. Only it&amp;#39;s not, because you &amp;#39;re still on constant alert, actively scanning with peripheral vision, judging the relative speeds of cars in front, steering etc. All I can say is, bring me the self-driving car, I don&amp;#39;t like this stressful in-between state.&lt;/p&gt;

&lt;p&gt;I am all for self-driving cars, even considering the &lt;a href=&quot;https://medium.com/basic-income/self-driving-trucks-are-going-to-hit-us-like-a-human-driven-truck-b8507d9c5961&quot;&gt;downsides&lt;/a&gt;. The benefits are overwhelming.&lt;/p&gt;

&lt;p&gt;Imagine an electric self-driving car: It needs no transmission, no pedals, no steering wheel. It can be symmetric, doesn&amp;#39;t need to have a designated front or back. It&amp;#39;s going to be lighter and roomier, will move faster through roads with no traffic jams, consume less energy and have better active/passive safety than anything with a slightly sleepy, distracted driver.&lt;/p&gt;

&lt;p&gt;Driving should be consigned to a hobby, much like riding horses is. Riding horses is unarguably the more useful skill to have in a post-apocalyptic society but I find the complexity of driving appealing.&lt;/p&gt;
</description>
        <pubDate>Sun, 30 Aug 2015 14:00:00 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/rumblings/2015/08/30/cars-to-drive-or-not-to-drive</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/rumblings/2015/08/30/cars-to-drive-or-not-to-drive</guid>
      </item>
    
      <item>
        <title>ForgetMeNot: Turn off Windows Compatibility Appraiser</title>
        <description>&lt;p&gt;One of the advantages of infrastructure as code is that we now have complete control of the states of a computer.&lt;/p&gt;

&lt;p&gt;This consequently means that I can measure performance between two known states and I only have to look at the difference between states to figure out what went wrong.&lt;/p&gt;

&lt;p&gt;Well, in theory. Microsoft and the Microsoft Updates keep pulling the carpet under your feet. &lt;/p&gt;

&lt;p&gt;In this case, one of the patch Tuesdays in February introduced KB 2952664 which adds the &amp;quot;Microsoft Compatibility Appraiser&amp;quot; to ostensibly ease transition to Windows 10. Unfortunately that drives up CPU usage and brings computers (and much worse, VMs) to their knees. &lt;/p&gt;

&lt;p&gt;The whole process is a collection of tasks running regularly, whether a user is logged on or not and more importantly whether you opt-in for the MS customer experience program or not.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s all &lt;a href=&quot;http://www.infoworld.com/article/2911609/operating-systems/kb-2952664-compatibility-update-for-win7-triggers-unexpected-daily-telemetry-run-may-be-snooping.html&quot;&gt;very fishy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Turns out VMWare has a &lt;a href=&quot;https://pubs.vmware.com/view-51/index.jsp?topic=%2Fcom.vmware.view.administration.doc%2FGUID-BE82165B-13BC-4FD9-A9CF-FBEF6343D98A.html&quot;&gt;knowledge base article&lt;/a&gt; for the tasks that need to be excised.&lt;/p&gt;

&lt;p&gt;The following commandlines solve (or at least appear to solve) the problem:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;schtasks /Delete /F /TN &amp;quot;\Microsoft\Windows\Application Experience\AitAgent&amp;quot;
schtasks /Delete /F /TN &amp;quot;\Microsoft\Windows\Application Experience\Microsoft Compatibility Appraiser &amp;quot;
schtasks /Delete /F /TN &amp;quot;\Microsoft\Windows\Application Experience\ProgramDataUpdater&amp;quot;
schtasks /Delete /F /TN &amp;quot;\Microsoft\Windows\Customer Experience Improvement Program\Consolidator&amp;quot;
schtasks /Delete /F /TN &amp;quot;\Microsoft\Windows\Customer Experience Improvement Program\KernelCEIPTask&amp;quot;
schtasks /Delete /F /TN &amp;quot;\Microsoft\Windows\Customer Experience Improvement Program\Use CEIP&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These will go into a new &lt;a href=&quot;https://github.com/Zuehlke/cookbook-windev&quot;&gt;windev&lt;/a&gt; recipe for sure.&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Jul 2015 14:00:00 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2015/07/10/forgetmenot-turn-off-windows-compatibility-appraiser</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2015/07/10/forgetmenot-turn-off-windows-compatibility-appraiser</guid>
      </item>
    
      <item>
        <title>Θέατρο του Παραλόγου</title>
        <description>&lt;p&gt;Αναρωτιέμαι εδώ και μέρες, διαβάζει κανείς τα κείμενα που ανταλλάσονται πυρετωδώς σε αυτές τις μαραθώνιες συνομιλίες;&lt;/p&gt;

&lt;p&gt;Έγινε το δημοψήφισμα ένα &amp;quot;ΝΑΙ ή ΌΧΙ στην Ευρωπαϊκή Ένωση&amp;quot; και κανείς δεν αναρωτιέται ποιόν ακριβώς βολεύει αυτό.&lt;/p&gt;

&lt;p&gt;Ας τα πάρουμε από την αρχή. Τα παρακάτω σημεία παρατίθονται αξιωματικά για να οικονομηθεί χώρος. Τίποτα δεν είναι απόλυτο, σε ένα άπειρο σύμπαν ακόμα και η μηδενική πιθανότητα είναι βέβαιο γεγονός (υποβάλλω την ύπαρξη του υποκείμενου πλανήτη ως αποδεικτικό στοιχείο) αλλά στο μέτρο που μου επιτρέπει η μόρφωση, η νοημοσύνη και τα γεγονότα των 5 περασμένων ετών αποδέχομαι τα παρακάτω ως αληθή:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Το πρόγραμμα λιτότητας όπως έχει εφαρμοστεί ΔΕΝ αποφέρει αποτελέσματα, το αντίθετο, χειροτερεύει την κατάσταση.&lt;/li&gt;
&lt;li&gt;Το χρέος ΔΕΝ είναι βιώσιμο, κοινώς δεν μπορεί να πληρωθεί όσος χρόνος κι αν περάσει.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Άρα, η πρόταση των δανειστών δεν είναι λύση. Δεν είναι ένα &amp;quot;ας σφίξουμε το ζωνάρι, ας κάνουμε κουράγιο, θα βοηθήσουν και οι άλλοι, πιάσαμε πάτο, άντε να πάρουμε την ανηφόρα&amp;quot;, είναι &amp;quot;χώστους ακόμα πιο βαθιά να μη βγουν ποτέ στην επιφάνεια&amp;quot;. Στα αγγλικά αυτό το λένε indentured service, εδώ όταν σταματήσαμε να το λέμε σκλαβιά ονομάζαμε τους άνθρωπους κολίγους.&lt;/p&gt;

&lt;p&gt;Το μόνο που μας προσφέρει η αποδοχή της συμφωνίας ως έχει είναι μια παράταση (δύο ή τριών χρόνων το πολύ, κι αυτό εάν δεν σφίξουν τα πράγματα αλλού) κατά τη διάρκεια της οποίας θα ολισθαίνουμε με σταθερή ταχύτητα, ακριβώς όπως κάναμε τα τελευταία πέντε χρόνια. Ποιόν εξυπηρετεί αυτό; Το μικρομεσαίο άνεργο που έχει ήδη φάει ότι υπήρχε και ζει μέρα με τη μέρα μετρώντας τα ψιλά; Τον συνταξιούχο του οποίου η σύνταξη θα μειωθεί ενώ τα φάρμακα θα αυξηθούν και τα παιδιά του είναι άνεργα; Όποιος έχει θα φροντίσει να τα βγάλει, η χρεωκοπία είναι προδιαγεγραμμένη, ωφελούνται δλδ όσοι ωφελήθηκαν μέχρι τώρα.&lt;/p&gt;

&lt;p&gt;Πιστεύω ακράδαντα ότι εάν η πρόταση που κατέθεσε ο ΣΥΡΙΖΑ είχε κατατεθεί από άλλη κυβέρνηση θα είχε γίνει αποδεκτή. Δεν έχει γίνει καμία κριτική επί της ουσίας, κανείς δεν έκατσε να αμφισβητήσει τα ισοδύναμα μέτρα με νούμερα. Όλη η επιχειρηματολογία έχει να κάνει με το ύφος του Βαρουφάκη, την αλαζονεία του Τσίπρα και τον ερασιτεχνισμό της κυβέρνησης. Σαν να ακούω Τεξανούς να επιχειρηματολογούν για τη θεωρία της εξέλιξης και την κλιματική αλλαγή&lt;sup&gt;1&lt;/sup&gt;. Ή σαν να ακούω τον 6χρονο γιο μου όταν του φωνάζω να φάει το φαϊ του.&lt;/p&gt;

&lt;p&gt;Ξανά, για να το εμπεδώσουμε:&lt;/p&gt;

&lt;p&gt;Οι προηγούμενες κυβερνήσεις της Ελλάδας, άμεσα υπεύθυνες για το χάλι, αντιμετωπίστηκαν ως σοβαροί και αξιόπιστοι συνομιλητές ενώ αποδεδειγμένα μαγείρεψαν τα νούμερα, απέφυγαν μεταρυθμίσεις για πολιτικό κέρδος και κάνανε τα αδύνατα δυνατά για να αποποιηθούν ή να καλύψουν τις ευθύνες τους.&lt;/p&gt;

&lt;p&gt;Η παρούσα κυβέρνηση, χωρίς κανένα ιστορικό (πάντα στα ευρωπαϊκά σαλόνια) και με ελάχιστο χρόνο να συλλέξει και να αποκαλύψει το τι αφήσανε πίσω οι προηγούμενοι (που πήραν και το χαρτί της τουαλέτας από τα γραφεία φεύγοντας) αντιμετωπίζεται ως αναξιόπιστη και υπεροπτική.&lt;/p&gt;

&lt;p&gt;Γιατί;&lt;/p&gt;

&lt;p&gt;Μπορώ να κάνω χιλιάδες υποθέσεις, να ψάξω τεχνοκρατικούς λόγους, να συγκρίνω μεγέθη, να κρίνω το έργο πέντε μηνών, αλλά γυρνάω και κολλάω ξανά και ξανά στη χρήση της λέξης κομμουνισμός. Και όταν τα επιχειρήματα που έχεις απέναντι στα νούμερα έχουν να κάνουν με το ύφος που έχω όταν σου απαγγέλω αυτά τα νούμερα ή κατασκευασμένα ιδεολογικά τέρατα του παρελθόντος τότε με συγχωρείς, αλλά δε θες να βοηθήσεις, δε σε ενδιαφέρει ούτε καν στο ελάχιστο.&lt;/p&gt;

&lt;p&gt;Συνεπώς, εμένα, τον Ελληνικό Λαό, που διάλεξα να αλλάξω τους τσαρλατάνους που σας εξυπηρετούσαν με γράφεις κανονικά, χρησιμοποιώντας ψυχροπολεμική ρητορεία της δεκαετίας του &amp;#39;50, επιβάλλοντας τρομοκρατία και δικτατορικά μέτρα με τη χρήση μη εκλεγμένων γραφειοκρατών και με καταδικάζεις σε μόνιμη λιτότητα.&lt;/p&gt;

&lt;p&gt;Και οι βαλτοί, οι δικοί σου, τάχαμου πατριώτες, τάχαμου εθνικά υπερήφανοι, αυτοί οι κοτζαμπάσηδες. Α, ρε Αρτέμη Μάτσα, τον Έλληνα έπαιζες πάντα.&lt;/p&gt;

&lt;p&gt;Ψυχραιμίιιιιια! Το σενάριο αποδοχής των όρων (επίσης γνωστό και ως παράδοση άνευ όρων) ξέρουμε που οδηγεί. Το ζουμε καθημερινά, το είδαμε εδω και πέντε χρόνια, είναι οικείο. Και τελικά εκεί εναπόκειται όλο το επιχείρημα τους: Είναι οικείο, είναι γνωστό, είναι προδιαγεγραμμένο άρα μπορεί κανείς να το διαχειριστεί. Τι είναι 11 εκατομμύρια άνθρωποι μπροστά στο άγνωστο;&lt;/p&gt;

&lt;p&gt;Γιατί ότι και να σου πει λαουτζίκο ο οποιοσδήποτε, η εναλλακτική στο ΝΑΙ είναι ... άγνωστο. Όλες οι απειλές, όλες οι προβλέψεις, όλη η τρομοκρατία στην ουσία κρύβει την άγνοια. Κανείς δεν ξέρει. Το μόνο που ξέρουμε είναι ότι θα είναι δύσκολα. Άσχημα. Φτώχια και πείνα. Για τους Έλληνες μια από τα ίδια.&lt;/p&gt;

&lt;p&gt;Ας γράψω λίγο επιστημονική φαντασία, να εξερευνήσω τα σενάρια του ΟΧΙ.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Με το Λαό δεν παίζει κανείς, η Ευρώπη είναι για τους Λαούς, εντάξει, θα υποχωρήσουμε (πάρτε, φάτε, και μη νοιάζεστε)&lt;/li&gt;
&lt;li&gt;Ποιοί είναι αυτοί οι βρωμιάρηδες που θα μας πούνε εμάς τι θα κάνουμε. Θάψτε τους, κάψτε τα σπαρτά και αλατίστε τα χωράφια (έξω απ&amp;#39;το €, έξω από ΕΕ)&lt;/li&gt;
&lt;li&gt;Ναι μεν οι κανόνες λένε αυτό, αλλά εδώ ένας ολόκληρος λαός πεινάει και κύμματα εξαθλιωμένων αποβιβάζονται στις ακτές του. Κάτι πρέπει να γίνει, ανασκουμπωθείτε. (πολιτική λύση με αυστηρές μεταρυθμίσεις αλλά και οικονομική περίοδο χάριτος και χαλάρωση της λιτότητας).&lt;/li&gt;
&lt;li&gt;Η υπάρχουσα Ελληνική πρόταση (είπαμε, επιστημονική φαντασία)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Προφανώς και θέλουν να νομίζουμε ότι το δεύτερο σενάριο είναι μονόδρομος.&lt;/p&gt;

&lt;p&gt;&amp;quot;Μην αυτοκτονείτε απ&amp;#39;το φόβο του Θανάτου&amp;quot; είπε ο Juncker, πιο δόκιμα μεταφρασμένος, και ο παραλογισμός αυτής της πρότασης θα έπρεπε να είναι φανερός. &lt;/p&gt;

&lt;p&gt;Όταν με καταδιώκουνε αλαλάζοντας για να με γδάρουν και να με σκοτώσουν και πηδάω από το γκρεμό δεν αυτοκτονώ. Άμα κάτσω να με πιάσουν έχω αυτοκτονήσει, άμα πηδήξω ελπίζω, ελπίζω ότι θα πέσω στο νερό και όχι στα βράχια, ότι ο γκρεμός δεν θα είναι πολύ ψηλά, ότι κι αν σπάσω τα πόδια δε θα μείνω αναίσθητος, ότι θα βρώ καμιά βάρκα να με περισυλλέξει. Από τη μια ξέρω τι θα γίνει, από την άλλη είναι το άγνωστο και μια μικρή ελπίδα.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; ΡΕ ΜΑΛΆΚΕΣ! ΤΑ ΝΟΎΜΕΡΑ &lt;em&gt;ΔΕΝ&lt;/em&gt; ΒΓΑΊΝΟΥΝ! 11 εκατομμύρια κόσμος και σας πείραξε το υφάκι του Βαρουφάκη; Μικρόμυαλοι, άξεστοι, αδαείς, καλοβολεμένοι υπαλληλίσκοι, γαμώ τη φάρα σας, γαμώ.&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Jul 2015 14:00:00 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/rumblings/2015/07/01/theater-of-the-absurd</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/rumblings/2015/07/01/theater-of-the-absurd</guid>
      </item>
    
      <item>
        <title>ForgetMeNot: SublimeText shell with errors on Windows</title>
        <description>&lt;p&gt;I&amp;#39;ve been running &lt;a href=&quot;http://www.sublimetext.com/3&quot;&gt;SublimeText v3&lt;/a&gt; with the &lt;a href=&quot;https://github.com/misfo/Shell-Turtlestein&quot;&gt;Shell-Turtlestein&lt;/a&gt; plugin for a while now.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s rarely a need to switch out of the editor window anymore and I&amp;#39;m feeling more emacsy than ever.&lt;/p&gt;

&lt;p&gt;I use the same setup on all platforms (Windows, OS X and Linux) and all it takes to configure is a couple or JSON files in the correct locations.&lt;/p&gt;

&lt;p&gt;Shell-Turtlestein uses the same technique that the SublimeText build systems use to parse errors from the output of a command and this involves regular expressions (que moan). &lt;/p&gt;

&lt;p&gt;I also mostly run rake and drive minitest unit tests so there is a couple of cases where I would like to jump to the line an error indicates:
When a test assertion fails and when an exception occurs.&lt;/p&gt;

&lt;p&gt;The following entry in the Shell-Turtlestein settings file will allow the use of F4 to jump to the error line in these two cases on windows (for *ix OSes there&amp;#39;s plenty of examples out there)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;exec_args&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;file_regex&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;^\\s*\\w*\\(*\\w*\\)*\\s*\\[*(\\w+:\\/.+\\.*\\w*):([0-9]+)\\]*:()(.*)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 30 Jul 2014 00:00:00 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2014/07/30/forgetmenot-sublimetext-shell-with-errors-on-windows</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2014/07/30/forgetmenot-sublimetext-shell-with-errors-on-windows</guid>
      </item>
    
      <item>
        <title>VAR's Build Rules</title>
        <description>&lt;p&gt;This is a post that came out of a discussion thread at work &lt;sup&gt;1&lt;/sup&gt;. Originally it was a simple question on alternatives to TFS as a build system. But you know how it goes, things evolve into questions you can only answer with 42.&lt;/p&gt;

&lt;p&gt;During the conversation the rules described in this post came out of the woodwork.&lt;/p&gt;

&lt;h2&gt;Distinctions, distinctions&lt;/h2&gt;

&lt;p&gt;Before we get into the rules we need to distinguish between a build system and a build management system.&lt;/p&gt;

&lt;p&gt;A build system performs transformations in sequence according to a predetermined dependency chain to create artifacts. A subset of this is the compilation of sources to binaries.&lt;/p&gt;

&lt;p&gt;A build management system coordinates build system(s).&lt;/p&gt;

&lt;p&gt;A build system is highly project specific, it is affected by toolchains, project conventions and generally can only run on a specially configured host (i.e. development environment).&lt;/p&gt;

&lt;p&gt;A build management system can run everywhere so long as it can start the build system on the appropriate host. The specificity of a build management system is limited to the number of version control systems it supports. Although theoretically it doesn&amp;#39;t have to provide version control support it is a given that such support will be provided in the minimum feature set.&lt;/p&gt;

&lt;p&gt;Jenkins, TeamCity, TravisCI, BuildBot are build management systems.&lt;/p&gt;

&lt;p&gt;TFS tries to do both at once, mixes them up, confuses the terminology and generally does a bang up job of completely screwing things up.&lt;/p&gt;

&lt;h2&gt;VAR&amp;#39;s Build Rules&lt;/h2&gt;

&lt;p&gt;(var is my username at work)&lt;/p&gt;

&lt;h3&gt;1. I am the build server&lt;/h3&gt;

&lt;p&gt;Rule #1 requires that the build server follows the exact same steps as any other developer. &lt;/p&gt;

&lt;p&gt;Expressed the other way around: Every developer has to be able to recreate locally the complete build process without deviations given the development environment and the correct version of the source tree.&lt;/p&gt;

&lt;h3&gt;2. When the build server says no, it means no!&lt;/h3&gt;

&lt;p&gt;Rule #2 says that if a build server says a build is broken, then the build is broken. Drop everything and read the logs. &lt;/p&gt;

&lt;p&gt;There is no &amp;quot;it works for me&amp;quot;, your build server is Judge Dredd: judge, juror and executioner.&lt;/p&gt;

&lt;p&gt;You can only adhere to this rule if you followed Rule #1&lt;/p&gt;

&lt;h3&gt;3. IDEs are the enemy AKA F5 is not a build process&lt;/h3&gt;

&lt;p&gt;Which means that if you drive your development process from an IDE there is no way you can adhere to the Build Rules. &lt;/p&gt;

&lt;p&gt;This rule has major complications on the development environment, ties directly into the subject of allowing your developers to use whatever tools they feel comfortable with and adherence to it is actively sabotaged by Visual Studio.&lt;/p&gt;

&lt;p&gt;My current approach to this problem is laid out in &lt;a href=&quot;/software/2014/07/03/gaudi-versus-the-dreaded-ide&quot;&gt;Gaudi vs. the dreaded IDE&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Adhering to the rules&lt;/h2&gt;

&lt;p&gt;To create a system that adheres to rules #1 &amp;amp; #2 you have to think like a Lego builder: Lots of small, specialized tasks that do one thing can be used to compose more complex processes etc.&lt;/p&gt;

&lt;p&gt;As an example a &lt;em&gt;release&lt;/em&gt; task instead of doing everything in one big implementation will depend on the build tasks for each of the libraries and applications and the tasks that run the tests etc. Using the syntax of rake in a contrived example one would do&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:release&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:&amp;quot;test:all&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:&amp;quot;test:all&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:&amp;quot;test:foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:&amp;quot;test:bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:&amp;quot;test:foo&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:&amp;quot;build:foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now a developer will probably use the component tasks a lot more than the composite :release task and we will certainly have a build job on the server that only does releases.&lt;/p&gt;

&lt;p&gt;This is a necessity since the system needs to satisfy different usage  patterns: the build server uses composite tasks that implement complete workflows while the developer usex component tasks with surgical precision in the interest of speed and effectiveness.&lt;/p&gt;

&lt;p&gt;From the perspective of the build system engineer this approach is self-evident for the same reason it&amp;#39;s evident when building applications: Small chunks of code are easier to manage, test, reuse and understand.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s also one of the reasons why make, ant and the msbuild XML syntax suck big time as general task description languages but that is a subject that requires a whole other post.&lt;/p&gt;

&lt;p&gt;All of this segways nicely into the final rule:&lt;/p&gt;

&lt;h3&gt;4. Your (build) infrastructure is a software development project&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;/software/2011/02/04/managing-your-development-environment&quot;&gt;This post has already been written&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rule #4 means you need tests and CI and a plan. To make matters worse your users are some of the most obnoxious, impatient and down right pedantic users on the face of the planet. They want everything perfect, robust, simple and fast and they want it yesterday. You better be dogfooding by this point...&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; I work at &lt;a href=&quot;http://www.zuehlke.com&quot;&gt;Zühlke&lt;/a&gt; where I have the luck to interact with brilliant engineers. Not just software engineers either.&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Jul 2014 16:00:00 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2014/07/17/vars-build-rules</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2014/07/17/vars-build-rules</guid>
      </item>
    
      <item>
        <title>Gaudi versus the dreaded IDE</title>
        <description>&lt;p&gt;I will come out and say it: I dislike IDEs. From Visual Studio to Eclipse by way of IntelliJ and Netbeans I find them all slow, unwieldy, complicated and buggy. They hide too much of the workings of the toolchains, spread configruation over a zillion dialogs, collaborate with source control like a stray dog with an alley cat and litter the workspace with all kinds of useless files.&lt;/p&gt;

&lt;p&gt;Way back in `07 Jeff Atwood penned &amp;quot;&lt;a href=&quot;http://blog.codinghorror.com/the-f5-key-is-not-a-build-process/&quot;&gt;The F5 Key Is Not A Build Process&lt;/a&gt;&amp;quot;. While I could add about 4 pages of things you can do with a &amp;quot;build script&amp;quot; outside of an IDE it wouldn&amp;#39;t add anything to the point so go read it. &lt;/p&gt;

&lt;p&gt;Then go print &amp;quot;The F5 Key Is Not A Build Process&amp;quot; on a banner, hung it in the office and live by it.&lt;/p&gt;

&lt;h2&gt;But...&lt;/h2&gt;

&lt;p&gt;There is one and only one unavoidable reason to use a fully fledged IDE and that is &lt;em&gt;The Debugger&lt;/em&gt;! 
Every other reason can be done away with, provided there is sufficient editor and shell foo.&lt;/p&gt;

&lt;p&gt;But IDE projects have big disadvantages when following proper software development practices (e.g. at least continuous integration with automated tests). Generally if you want to develop in an IDE and have a CI system you end up maintaining both separately&lt;sup&gt;1&lt;/sup&gt;. &lt;/p&gt;

&lt;p&gt;We define as maintenance the tasks of adding/removing files, defining dependencies between code components, compiler settings etc.&lt;/p&gt;

&lt;p&gt;Errors in the IDE projects are also very hard to detect automatically: The build server will not use the IDE so the  change is going to propagate to the whole team. There is nothing that drives developers to frustration faster than not being able to compile locally when the build server says everything is fine.&lt;/p&gt;

&lt;p&gt;Solution: make the command line build system the master and provide IDE project generation facilities. &lt;/p&gt;

&lt;p&gt;When a developer wants to use the IDE, she generates the project from a freshly updated workspace with the correct settings and continues working.&lt;/p&gt;

&lt;p&gt;&amp;quot;But, there&amp;#39;s so many IDEs out there and they all use different file formats!&amp;quot; you will say and you will be absolutely correct. &lt;/p&gt;

&lt;p&gt;The best case is when the IDE allows you to use a custom build system. This removes Visual Studio and a couple of more obscure ones from the list of frendlies, but VS has a very good documented XML-based format so there are ways around it.&lt;/p&gt;

&lt;p&gt;Still the following example can be adapted to work in every case.&lt;/p&gt;

&lt;h2&gt;Gaudi &amp;amp; QtCreator Example&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s say we have a project that uses &lt;a href=&quot;http://github.com/damphyr/gaudi&quot;&gt;Gaudi&lt;/a&gt; as it&amp;#39;s build system. And let&amp;#39;s say the team insisted on using &lt;a href=&quot;https://qt-project.org/doc/qtcreator-2.5/index.html&quot;&gt;QtCreator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;QCreator uses two separate files: One file (prj.pro) lists the files, resources, paths etc. while the other (prj.user.pro) contains the IDE settings (layout, colors and more importantly the build &amp;amp; run settings). &lt;/p&gt;

&lt;p&gt;Instead of maintaining the QtCreator project files separately we create a template from a functioning project file. In other words use the GUI once to configure everthing just so. &lt;/p&gt;

&lt;p&gt;For convenience we use the ERB format for the templates&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;The prj.pro.template is very simple:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;TEMPLATE = app
CONFIG += console
CONFIG -= app_bundle
CONFIG -= qt

SOURCES += \
    &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%=source_list.join(&amp;quot; \\\n    &amp;quot;)%&amp;gt;

HEADERS += \
    &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%=header_list.join(&amp;quot; \\\n    &amp;quot;)%&amp;gt;

OTHER_FILES += \
    &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%=other_list.join(&amp;quot; \\\n    &amp;quot;)%&amp;gt;

INCLUDEPATH += \
    &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%=include_path_list.join(&amp;quot; \\\n    &amp;quot;)%&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we show only the relevant part from the prj.user.pro.template&lt;sup&gt;3&lt;/sup&gt; with the custom build system settings&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;valuemap&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;QVariantMap&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;....Target.BuildConfiguration.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;QString&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;....BuildDirectory&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%=build_directory%&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;valuemap&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;QVariantMap&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ProjectExplorer.BuildConfiguration.BuildStepList.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;valuemap&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;QVariantMap&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ProjectExplorer.BuildStepList.Step.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bool&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ProjectExplorer.BuildStep.Enabled&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;QString&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;...Arguments&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;GAUDI_CONFIG=&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%=system_config_file%&amp;gt; 
  build:deployment DEPLOYMENT=&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%=deployment_name%&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;QString&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;...Command&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;rake&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;QString&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;...WorkingDirectory&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%=base%&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;QString&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;...DefaultDisplayName&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Rake Build&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;QString&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;...DisplayName&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;QString&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;...Id&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;ProjectExplorer.ProcessStep&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/valuemap&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We now have our templates. The parameter names are fully arbitrary at the moment, they serve only as descriptive names.&lt;/p&gt;

&lt;p&gt;We are faced with the task of collecting the file names, setting paths correctly etc. This is where &lt;a href=&quot;http://github.com/damphyr/gaudi&quot;&gt;Gaudi&lt;/a&gt; comes in.
The Rake task code that generates the prj.pro file looks like the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:qtc&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#Quick and dirty get the first GCC program available to get the example running&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Gaudi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Deployment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Dummy&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;programs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;gcc&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#Use the configuration methods to place artifacts within the workspace&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;outfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;qtcreator&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.pro&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;tools/templates/qtcreator.pro.template&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#collect all source and header files&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;source_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sources&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;header_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#A Gaudi::Program depends on Gaudi::Components &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#which are groupings of source files.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#This gets us all sources and headers&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;source_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sources&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;header_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#one of the ways to get the include paths&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;include_path_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniq&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#The Hash with the template parameters&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;source_list&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;header_list&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;include_path_list&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include_path_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;other_list&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config_file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniq&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;write_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What we get from Gaudi:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The configuration defining the workspace (output directory, base directory etc.)&lt;/li&gt;
&lt;li&gt;A few classes (Deployment, Program, Component) linking sources to binary artifacts and encapsulating the dependencies between code constructs&lt;/li&gt;
&lt;li&gt;Helpers for template handling (from&lt;em&gt;template, write&lt;/em&gt;file etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Creating IDE project files while maintaining a fully command line enabled build system is not very difficult. The combination of one of the myriad template engines with a few lines of scripting to collect the necessary information gets you quickly to a very usable solution. The bulk of the time spent is dedicated to deciphering the IDE file format and creating the template.&lt;/p&gt;

&lt;h2&gt;You never walk alone&lt;/h2&gt;

&lt;p&gt;QtCreator expertise provided and code polished by &lt;a href=&quot;http://github.com/jahnf&quot;&gt;jahnf&lt;/a&gt; who suffered through all my explanations of Gaudi interna and managed to write tasks at the end.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; It can be done but driving the process of development from the IDE throws up all sorts of hurdles in a proper CI workflow.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt; Gaudi is built on Rake, which is Ruby, which offers ERB in the standard library&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;3&lt;/sup&gt; Because XML! &lt;/p&gt;

&lt;p&gt;&lt;sup&gt;4&lt;/sup&gt; Once set up and configured properly&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Jul 2014 16:00:00 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2014/07/03/gaudi-versus-the-dreaded-ide</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2014/07/03/gaudi-versus-the-dreaded-ide</guid>
      </item>
    
      <item>
        <title>Building with rake: Provisions</title>
        <description>&lt;p&gt;This is the third article in the series and it is part two of the setup saga. the whole thing starts &lt;a href=&quot;/software/2013/10/22/building-with-rake-I&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;/software/2014/03/15/building-with-rake-II&quot;&gt;part one&lt;/a&gt; we laid the ground work and ended up with a 32bit CentOS 6.5 installation in a virtual machine configured for control via vagrant.&lt;/p&gt;

&lt;p&gt;With the groundwork laid it is time for the provisioning part. The main reason for creating a vagrant base box was because I have never before worked with CentOS, or the KPIT toolchain, so naturally I tend to make mistakes. Sometimes I&amp;#39;ll just blunder so bad that the only way to get back to a viable state is to start from the beginning. With the vagrant base box this whole process is as follows:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;vagrant up 
vagrant ssh
&lt;span class=&quot;c&quot;&gt;#blunder about&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#mess up&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
vagrant halt
vagrant destroy &lt;span class=&quot;c&quot;&gt;#rinse&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#repeat&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 

&lt;p&gt;Anything that works ends up in the provisioning script&lt;/p&gt;

&lt;h2&gt;Provisioning&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/tools.jpg&quot; alt=&quot;tools&quot;&gt; Provisioning is the act of installing and configuring software on a computer. &lt;/p&gt;

&lt;p&gt;Ideally it would be all software, operating system included, so we could plug in a machine and it would start and auto-magically become a fully functional computer without human intervention. And then we would name it SkySomething and it would form a network with it&amp;#39;s siblings which consequently would be SkyNe...omg, I am working towards the destruction of the human race!&lt;/p&gt;

&lt;p&gt;Back to the present, we generally pick a basis configuration for the OS (ergo the base box) and then automate everything else. Full grown provisioning tools like Chef, Puppet and Ansible will allow you to keep large numbers of machines working and also let you use the collective expertise of several thousand IT administrators. I&amp;#39;m just using a shell script and I&amp;#39;m going to embed it in the &lt;a href=&quot;https://github.com/damphyr/embedded-C-rake/blob/master/Vagrantfile&quot;&gt;Vagrantfile&lt;/a&gt;. So there...&lt;/p&gt;

&lt;p&gt;To (finally) start building our C code we will need Ruby (you still remember this whole thing is &amp;quot;Building with Rake&amp;quot; I hope) and the &lt;a href=&quot;http://www.kpitgnutools.com/latestToolchain.php&quot;&gt;KPIT RX toolchain&lt;/a&gt; .&lt;/p&gt;

&lt;h2&gt;HowTo&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Clone the &lt;a href=&quot;https://github.com/damphyr/embedded-C-rake/&quot;&gt;git repository&lt;/a&gt; acompanying this blog post series.&lt;/li&gt;
&lt;li&gt;Download the &lt;a href=&quot;http://www.kpitgnutools.com/latestToolchain.php&quot;&gt;RPM&lt;/a&gt; for the elf-rx tools from KPIT and place it in the setup/ directory&lt;/li&gt;
&lt;li&gt;vagrant up&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The repository has &lt;a href=&quot;https://github.com/damphyr/embedded-C-rake/tree/master/setup&quot;&gt;more detailed instructions&lt;/a&gt; with all the ifs and buts for those who don&amp;#39;t want to follow convention. &lt;/p&gt;

&lt;p&gt;Once &amp;#39;vagrant up&amp;#39; is finished, log in the VM with &amp;#39;vagrant ssh&amp;#39; and you&amp;#39;re set to work. &lt;/p&gt;

&lt;h2&gt;Practical stuff&lt;/h2&gt;

&lt;p&gt;Package managers all across *ix distributions are a mess. Specifically for Ruby the versions available are usually about a month away from end-of-life or at best a couple of years behind the current stable.&lt;/p&gt;

&lt;p&gt;Even more specific, yum lists a 1.8.7 version that is long dead and consigned to the history books. So installation from source it is. For the purposes of this experiment this is more than adequate. And to make matters more interesting, lets get the latest and greatest at the time of writing, 2.1.1.&lt;/p&gt;

&lt;p&gt;The provisioning &amp;quot;script&amp;quot; is:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;yum -y install zlib zlib-devel
yum -y install openssl-devel
yum -y install libyaml libyaml-devel
yum -y install wget
wget http://cache.ruby-lang.org/pub/ruby/2.1/ruby-2.1.1.tar.gz
tar xvf ruby-2.1.1.tar.gz
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ruby-2.1.1
./configure
make
make install
&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Setting up environment
cp /home/vagrant/host_share/setup/bash_profile /home/vagrant/.bash_profile
chown vagrant:vagrant /home/vagrant/.bash_profile
chmod &lt;span class=&quot;m&quot;&gt;544&lt;/span&gt; /home/vagrant/.bash_profile
rpm --install /home/vagrant/host_share/setup/gnurx_v14.01_elf-1-1.i386.rpm&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I mean, really, this thing has no error handling, nothing. It&amp;#39;s a shambles masquerading as a script. But hey, it mostly works&lt;/p&gt;

&lt;p&gt;This script will evolve as we add gems, things go wrong, versions change etc. That is OK. More than OK, it is desired. This is the single source for our development environment.&lt;/p&gt;

&lt;h2&gt;Other tricks&lt;/h2&gt;

&lt;p&gt;You will notice there is a setup/bash_profile file and in the provisioning script it is used as the .bash_profile for the vagrant user. This is part of a method I use very often when creating development environments under *ix systems. &lt;/p&gt;

&lt;p&gt;Instead of creating elaborate scripts that add users, services, environment variables etc. recreate the filesystem structure for the system under version control and save only the differences to the base installation. &lt;/p&gt;

&lt;p&gt;To update the system just copy everything over.  Any scripting can be done in your working environment. &lt;/p&gt;

&lt;p&gt;This is especially useful when your target is a constrained system that lacks most development tools but it has a lot of other advantages as well. To list a few:&lt;/p&gt;

&lt;p&gt;Search across all administered systems from the comfort of your workstation, versioned changes and instant reset to a known state with a simple copy action.&lt;/p&gt;

&lt;h2&gt;Afterthoughts&lt;/h2&gt;

&lt;p&gt;For any other project the toolchain RPM and the Ruby tarfile would be in the repository and the provisioning script would start by installing git and then pulling the repository in the VM. This project will live on the bleeding edge :P !&lt;/p&gt;

&lt;p&gt;It&amp;#39;s not unusual for embedded projects to have support lifecycles of 5 years or more. Can you remember which CentOS version was state-of-the-art 7 years ago? Can you guarantee that 6.5 will be available in seven years time? The longer a project will be supported for, the more of it&amp;#39;s environment should be in the repository. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/the_dream.png&quot; alt=&quot;that&amp;#39;s the dream&quot;&gt;  The goal is to be able to recreate the development environment at any point in time with just a copy of HEAD at hand.&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Mar 2014 04:00:00 +0100</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2014/03/19/building-with-rake-III</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2014/03/19/building-with-rake-III</guid>
      </item>
    
      <item>
        <title>Building with rake: Setup</title>
        <description>&lt;p&gt;This is the second article in the series,the whole thing starts &lt;a href=&quot;/software/2013/10/22/building-with-rake-I&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And while the series is about building C systems with Rake there is a lot of preparation work to be done before we can actually run the first file through the compiler.&lt;/p&gt;

&lt;h2&gt;Setting up the environment&lt;/h2&gt;

&lt;p&gt;Actually setting up the environment, installing the editor, the IDE, the compiler toolchain and making sure they are accessible from the terminal or the IDE etc. is a task most developers do not consciously consider. As a consequence we tend to underestimate the amount of work required to do it right and the actual cost of getting it wrong.&lt;/p&gt;

&lt;p&gt;Oh, and this is dangerous ground. Editor wars, OS wars, the death-through-infrastructure syndrome and a zillion other reasons why it&amp;#39;s not going to work.&lt;/p&gt;

&lt;p&gt;This is a very important step in every project, I can&amp;#39;t stress this enough. Consistency in the development environment is the single most important point when working with embedded software. Consider that apart from the usual software errors you have to deal with new, untested or flaky hardware. Just check the picture of a  &amp;quot;smoke tested&amp;quot; board, cuplrit of a failed long running test. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/smoke_test.png&quot; alt=&quot;smoke test&quot;&gt; &lt;/p&gt;

&lt;p&gt;And new electronics are ALWAYS a potential source of errors. Come to think of it, you can take &amp;#39;potential&amp;#39; out of that sentence and it would still be true.&lt;/p&gt;

&lt;p&gt;The difficulty of locating the cause for a bug increases exponentially with every source of errors. So we need as few error sources as possible. As a first step we establish a consistent development environment so that we can exclude differences between workstations as a culprit.&lt;/p&gt;

&lt;p&gt;As a bonus, no developer can use &amp;#39;it works for me&amp;#39; as a cop out when something breaks.&lt;/p&gt;

&lt;p&gt;Take care not to misunderstand &amp;#39;consistent&amp;#39; for &amp;#39;limited&amp;#39;. With provisioning tools like Chef, Puppet or Ansible there is very little reason why you can&amp;#39;t satisfy every developer&amp;#39;s wishes when it comes to editor, IDE or any other productivity tool.&lt;/p&gt;

&lt;p&gt;And yes, all of this is also true on Windows. Painful, but true.&lt;/p&gt;

&lt;h2&gt;Practical matters&lt;/h2&gt;

&lt;p&gt;What we&amp;#39;re going to need is &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;VirtualBox&lt;/a&gt;, &lt;a href=&quot;http://www.vagrantup.com/&quot;&gt;vagrant&lt;/a&gt;, a CentOS basebox and optionally a git repository containing a bunch of &lt;a href=&quot;http://www.opscode.com/chef/&quot;&gt;Chef&lt;/a&gt; recipes.&lt;/p&gt;

&lt;p&gt;With these ingredients in the end we will cook up a VM that will be our development environment with the RX63N board.&lt;/p&gt;

&lt;p&gt;The CentOS choice is dictated by the fact that the &lt;a href=&quot;http://www.kpitgnutools.com/latestToolchain.php&quot;&gt;KPIT toolchain&lt;/a&gt; comes packaged in RPM format. It also has to be the 32bit version, since KPIT does not come compiled for a x64 Linux flavour.&lt;/p&gt;

&lt;p&gt;The base box proved to be problematic as &lt;a href=&quot;http://www.vagrantbox.es/&quot;&gt;http://www.vagrantbox.es/&lt;/a&gt; lists only one recent CentOS box as 32bit but the base box is actually 64bit. Well, creating base boxes is easy. There&amp;#39;s &lt;a href=&quot;https://github.com/okfn/ckan/wiki/How-to-Create-a-CentOS-Vagrant-Base-Box&quot;&gt;blog posts&lt;/a&gt; about it.&lt;/p&gt;

&lt;p&gt;Originally I wrote &amp;quot;there&amp;#39;s more interesting things to talk about&amp;quot;. But it seems that once more the combination of versions needed for the task requires some digging and further work. So, following the instructions on the provided link I proceeded to create a 32 bit CentOS 6.5 base box for vagrant. The set of instructions is &lt;a href=&quot;https://github.com/damphyr/embedded-C-rake/blob/master/setup/CentOSBaseBox.md&quot;&gt;up on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Hints &amp;amp; Tips for the decrepit mind&lt;/h2&gt;

&lt;p&gt;If you&amp;#39;re like me you&amp;#39;ll need to be reminded that on vagrant base boxes the root password is &amp;#39;vagrant&amp;#39;.&lt;/p&gt;

&lt;h2&gt;VM at hand&lt;/h2&gt;

&lt;p&gt;There are a few things to do that for convenience&amp;#39;s sake I will skip since this is a personal sandbox project.&lt;/p&gt;

&lt;p&gt;There should be a project user (or depending on how far you want to take it, one account per team member). Things like repository access, SSH keys etc. need to be setup. For convenience everything will be done with the vagrant user.&lt;/p&gt;

&lt;p&gt;Also, to keep software updates under control, there should be a chef/puppet/ansible installation and the contents of the VM should be managed as source. Since this is a one man team environment and there&amp;#39;s only really two software packages to install we will skip the overhead for now.&lt;/p&gt;

&lt;p&gt;It should be noted though that between the time I started putting this environment together and now (which is about 5 months) there have been 4 new vagrant versions, a major CentOS update, 3 KPIT toolchain updates (one major version), a new Ruby version and uncountable gem updates. At the rate I&amp;#39;m writing I will be forced to add Chef recipes just to be able to keep the environment current.&lt;/p&gt;

&lt;p&gt;In the next installment we&amp;#39;ll setup the toolchain and the RX63N board and figure out how to call everything from rake.&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Mar 2014 14:00:00 +0100</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2014/03/15/building-with-rake-II</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2014/03/15/building-with-rake-II</guid>
      </item>
    
  </channel>
</rss>