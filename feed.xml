<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ampelofilosofies</title>
    <description>Random comments on random subjects in random language</description>
    <link>http://www.ampelofilosofies.gr</link>
    <atom:link href="http://www.ampelofilosofies.gr/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>On remote working</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://imgs.xkcd.com/comics/duty_calls.png&quot; alt=&quot;Duty calls&quot;&gt; &lt;/p&gt;

&lt;p&gt;My little bubble of the internet has been showing me a lot more bombastic statements about remote working, of the type &amp;quot;it makes people a lot more effective&amp;quot;, &amp;quot;it is the way of the future&amp;quot;, &amp;quot;soon all will work from home in their pyjamas&amp;quot; etc.&lt;/p&gt;

&lt;p&gt;There is enough noise that I felt I had to throw my hat into the ring :) &lt;/p&gt;

&lt;h2&gt;In an office, far far away&lt;/h2&gt;

&lt;p&gt;This remote working thing is not new. I submit to you a &lt;a href=&quot;http://www.wideteams.com/2012/06/27/podcast-38-vassilis-rizopoulos-of-zuhlke/&quot;&gt;Wideteams podcast interview&lt;/a&gt; by yours truly, from way back in 2012. I had been remote working for 8 years by then.&lt;/p&gt;

&lt;p&gt;This post is not about how great remote working is (it is pretty great - sometimes). It is not about how to do it right (&lt;a href=&quot;https://avdi.codes/&quot;&gt;Avdi Grimm&amp;#39;s&lt;/a&gt; WideTeams podcast is choke full of good advice, even though the last episode is now 5 years back. Go check it out).&lt;/p&gt;

&lt;p&gt;This is the antilogue, the reaction to the pendulum swinging to the opposite extreme end.&lt;/p&gt;

&lt;p&gt;Btw., my summer office looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SummerOffice.jpg&quot; alt=&quot;Summer Office&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Context is everything&lt;/h2&gt;

&lt;p&gt;I worked remotely for close to 12 years. In this context &amp;quot;remotely&amp;quot; means that my place of residence was in a different country and different timezone than my place of work.&lt;/p&gt;

&lt;p&gt;Technically, I still work remotely. Here &amp;quot;remotely&amp;quot; means that I can choose to not go to the office on certain days and that in the summers I can maximize time spent by the sea by adding a couple of weeks of remote working to my regular holidays.&lt;/p&gt;

&lt;p&gt;Also means that in projects (for the last 15 years) I have been part of a distributed team, whether I or others from the team were remote. Multiple cities, multiple offices, single team.&lt;/p&gt;

&lt;h2&gt;Full remote is a special case&lt;/h2&gt;

&lt;p&gt;I would argue that going full remote (working full time from home with no office and all contact through online avatars) is neither effective, nor healthy. &lt;/p&gt;

&lt;p&gt;To be a star remote worker (let&amp;#39;s say software engineer, a job I know well) you need excellent communication skills, you need to separate your work and private life while they co-inhabit your space and time (have you ever tried to build a release while a toddler demands attention?) and you need reciprocate understanding of the difficulties distance introduces to human relationships (thick skin and a soft hand). All of this on top of your actual work subject. &lt;/p&gt;

&lt;p&gt;Software engineers have it easy, communication skills are a required part of the job description ;P  (What?! They are not?! Well, they should be!)&lt;/p&gt;

&lt;p&gt;I have met such people. They are precious few and a special kind of personality. Over the years, even they have moved out of the house - co-working spaces are a blessing in this regard. And the funny thing is, with these precious few, the most productive, inspiring and effective times were while we were co-located.&lt;/p&gt;

&lt;h2&gt;Human, you (social) animal.&lt;/h2&gt;

&lt;p&gt;The &amp;quot;we are social animals&amp;quot; platitude is especially appropriate in the case of remote working. The creative part of problem solving, the part that involves sketching on whiteboard/paper/napkin runs better when the people involved are in the same room. &lt;/p&gt;

&lt;p&gt;The deciding factor is what in German is called &amp;quot;Gestik und Mimik&amp;quot;, the sum total of gestures, facial expressions, movement etc. None of our remote collaboration solutions is in a position to deliver the full set of signals we transmit when communicating.&lt;/p&gt;

&lt;p&gt;So having the full palette of interactions available improves creative collaboration. This I believe is a conclusion that we can accept unchalenged ;). &lt;/p&gt;

&lt;p&gt;A less discernible benefit of frequent personal contact is familiarity with said palette of signals: think of it as adding a voice to an email/message. This in turn (again a personal observation) facilitates later remote collaboration. Someone typing on a chat box is a stranger, impersonal and easy to dismiss. Also, a lot easier to misinterpret due to missing empathic signaling.&lt;/p&gt;

&lt;p&gt;My personal experience is that at about the third week of &amp;quot;isolation&amp;quot; I start drifting. I either run out of clearly defined goals, lose touch with the team or lose focus because the immediate environment presents more pressing distractions. The time span feels inversely propotional to the size of the team - the bigger the team the faster one loses overview. At that point I need a get-together to reapply color and sound to avatars so to speak.&lt;/p&gt;

&lt;h2&gt;The answer is: It depends&lt;/h2&gt;

&lt;p&gt;Rules of thumb for when should you strive to get your team in one place:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When the team is new, or you&amp;#39;re new to the team.&lt;/li&gt;
&lt;li&gt;When you&amp;#39;re in the &amp;quot;how do we do this?&amp;quot;, instead of the &amp;quot;let&amp;#39;s do this&amp;quot; phase.&lt;/li&gt;
&lt;li&gt;At regular intervals as a refresher.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I feel very comfortable with the hybrid remote solution: Have the team get together regularly, have flexibility and support in place for working from home.&lt;/p&gt;

&lt;p&gt;It is not the unconditional recruiting silver bullet: &lt;/p&gt;

&lt;p&gt;It requires relative short distances for all team members to accomodate regular meetings. You can&amp;#39;t do away with the office. You can&amp;#39;t reasonably hire from the other side of the globe etc.&lt;/p&gt;

&lt;p&gt;But I find it is a good compromise between the inflexibility of on-premise teams and the isolation of working remotely.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 May 2018 10:15:21 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2018/05/28/on-remote-working</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2018/05/28/on-remote-working</guid>
      </item>
    
      <item>
        <title>gaudi 1.0.0</title>
        <description>&lt;p&gt;Four years ago, almost to the day (the first commit was on the 15th November 2013) I took the work of about a year and a half, spent a week cleaning it up and rewriting and then put it up on GitHub.&lt;/p&gt;

&lt;p&gt;gaudi started as a build system for a very specific and opinionated way of building C: The code organized in small self-contained &amp;quot;units&amp;quot; we so conveniently/confusingly named components, all options concentrated in one place, everything text based and one very consistent user interface thanks to rake.&lt;/p&gt;

&lt;p&gt;The intentions from the beginning were the clear mapping of an architecture (N layers and componetized) on the source directory structure, the single source of truth for configuration options, and the simplicity of rake in creating a consistent usage model. Boy did it prove powerful.&lt;/p&gt;

&lt;p&gt;I spent the next couple of years building all-encompassing systems around systems on that simple basis. Consistent, repeatable, all knowing, all measuring build/test/deploy/release juggernauts across toolchains and platforms&lt;sup&gt;1/&lt;sup&gt;.&lt;/p&gt;

&lt;p&gt;And then there were no more C/C++ projects. But there was a project with Java and some wierd XML compiler stuff and half a dozen other tools and also massive amounts of data shunted through Jenkins via shell scripts and everything had to go to the cloud.&lt;/p&gt;

&lt;p&gt;And then another project with .NET, but also angular and grunt and gradle and msbuild and at first impression every other technology under the sun mixed in a cement mixer after being pounded by Mj√∂lnir.&lt;/p&gt;

&lt;p&gt;And then that client that was adamant that Ruby could not be used, and it had to be Python&lt;sup&gt;2&lt;/sup&gt;. &lt;/p&gt;

&lt;p&gt;The same concepts, wildly different technologies, every case bordering on total chaos. It served as a focusing lens. And so we come to gaudi 1.0.0.&lt;/p&gt;

&lt;p&gt;I am insanely proud of this gaudi release: It&amp;#39;s the first time in my career I ship something &lt;strong&gt;by removing 70% of the features and code and repackaging&lt;/strong&gt;. It is my love of deleting code made manifest :)&lt;/p&gt;

&lt;p&gt;The code itself is not important. Copy it, port it, throw it away. I dare you to find a language/tool combo that is better suited to this task than Ruby/rake - I&amp;#39;ve tried them all: graddle, grunt, gulp, ant, cmake, make, nmake, dmake, maven, scons. The list is long. Only Elixir/mix comes close.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m old, and I like Ruby and this code has worked for over 5 years across all 1.9 and 2.x versions of Ruby. Still not the important part.&lt;/p&gt;

&lt;p&gt;The important part was &lt;a href=&quot;https://github.com/damphyr/gaudi/blob/master/doc/BUILDSYSTEMS.md&quot;&gt;the distinction between build system and build management system&lt;/a&gt;, also discussed previously in &lt;a href=&quot;/software/2014/07/17/vars-build-rules&quot;&gt;VAR&amp;#39;s build rules&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the other one is the &lt;a href=&quot;https://github.com/damphyr/gaudi/blob/master/doc/ASPIRATIONS.md&quot;&gt;list of aspirations&lt;/a&gt;. Theory in bullet points if you will, but oh so important if you ever want to get a team on board.&lt;/p&gt;

&lt;p&gt;There are more things that belong to this list, I just haven&amp;#39;t finished the distillation process. The core will not get any additional features apart from some self-documenting tasks. &lt;/p&gt;

&lt;p&gt;What I think is possible is taking the idea behind gaudi-c (code substrate for an opinionated methodology) and applying it to the areas of responsibility of a build system with an eye toward building &lt;em&gt;systems&lt;/em&gt; as opposed to &lt;em&gt;technologies&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/BuildSystem.png&quot; alt=&quot;Areas of Responsibility&quot;&gt;&lt;/p&gt;

&lt;p&gt;A &amp;quot;blue&amp;quot; module is almost too easy considering &lt;a href=&quot;https://github.com/damphyr/rutema&quot;&gt;rutema&lt;/a&gt; is based on a similar set of principles with a narrower application domain.&lt;/p&gt;

&lt;p&gt;But in the end it is all glorified batch processing of command lines placed at various points of an acyclical dependency graph. So much fun!&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; I had already worked myself up to the corner of &amp;quot;the automation guy&amp;quot; but this was the all-in. I can code in a dozen programming languages, have written bootloaders in C, web services in Java, .NET and Ruby, daemons for Linux, a persistency layer in Java, remote control software for locomotives but I am now &amp;quot;the build system&amp;quot; guy. Worse, I am the &amp;quot;devops guy&amp;quot;. But that is a rant for another time.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt;That hurt, not because of Ruby vs. Python, but because of rake vs. absolutely-nothing-approaching-usable.&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Nov 2017 14:14:21 +0100</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2017/11/29/gaudi-one-oh</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2017/11/29/gaudi-one-oh</guid>
      </item>
    
      <item>
        <title>Simple Cooking: ŒöŒøŒªŒøŒ∫œÖŒ∏ŒøœÑœÖœÅœåœÄŒπœÑŒ± œÑŒ∑œÇ ŒæŒµŒΩŒπœÑŒπŒ¨œÇ</title>
        <description>&lt;p&gt;ŒàŒΩŒ± Œ±œÄœå œÑŒ± œÄœÅŒ¨Œ≥ŒºŒ±œÑŒ± œÄŒøœÖ ŒºŒøœÖ ŒªŒµŒØœÄŒøœÖŒΩ Œ≠ŒΩœÑŒøŒΩŒ± œÉœÑŒ∑ŒΩ ŒæŒµŒΩŒπœÑŒπŒ¨ ŒµŒØŒΩŒ±Œπ ŒøŒπ œÄŒØœÑŒµœÇ. &lt;/p&gt;

&lt;p&gt;Œó œÄŒØœÑŒ± ŒµŒØŒΩŒ±Œπ Œ¥œçœÉŒ∫ŒøŒªŒ∑ œÉœÑŒ∑ ŒºŒµœÑŒ¨œÜœÅŒ±œÉŒ∑ œÉœÑŒøœÖœÇ ŒíŒøœÅŒµŒπŒøŒ¥œÖœÑŒπŒ∫ŒøŒµœÖœÅœâœÄŒ±ŒØŒøœÖœÇ, ŒºŒπŒ±œÇ Œ∫Œ±Œπ pie ŒµŒØŒΩŒ±Œπ œÄŒπŒø Œ∫ŒøŒΩœÑŒ¨ œÉŒµ œÑŒ¨œÅœÑŒ± ŒÆ œÑœÅŒπœÜœÑŒÆ, œÑŒø pastry ŒµŒØŒΩŒ±Œπ œÄŒøŒªœç Œ≥ŒµŒΩŒπŒ∫œå, ŒµŒΩœé ŒøŒπ ŒìŒµœÅŒºŒ±ŒΩŒøŒØ Œ±œÄŒªœéœÇ Œ¥ŒµŒΩ Œ≠œáŒøœÖŒΩ ŒªŒ≠ŒæŒ∑ Œ≥ŒπŒ± œÑŒø ŒµŒØŒ¥ŒøœÇ (Œ±ŒΩ ŒµŒæŒ±ŒπœÅŒ≠œÉŒµŒπœÇ œÑŒø strudel, Œ±ŒªŒªŒ¨ ŒºŒµœÑŒ¨ œÄœÅŒ≠œÄŒµŒπ ŒΩŒ± œÑŒøœÖœÇ ŒµŒæŒ∑Œ≥ŒµŒØœÇ œåœÑŒπ Œ∑ Œ≥Œ≠ŒºŒπœÉŒ∑ ŒµŒØŒΩŒ±Œπ œÄŒπŒ∫Œ¨ŒΩœÑŒπŒ∫Œ∑ Œ∫Œ±Œπ œåœáŒπ Œ≥ŒªœÖŒ∫ŒπŒ¨ - Œ¨œÉŒµ œÄŒøœÖ œÑŒ± Œ≥ŒªŒ±œÉŒ¨œÅŒøœÖŒΩ œåŒªŒ± ŒºŒµ Œ∂Œ¨œáŒ±œÅŒ∑), ŒµŒΩœé œÑŒø pita œÄŒ±œÅŒ±œÄŒ≠ŒºœÄŒµŒπ œÉœÑŒ∑ŒΩ Œ∫œÖœÄœÅŒπŒ±Œ∫ŒÆ, œÉœÑŒ∑ŒΩ œÄŒØœÑŒ± Œ≥ŒπŒ± œÑŒø Œ≥œçœÅŒø Œ∫ŒªœÄ. ŒöŒ±Œπ œÄŒ¨ŒªŒπ œÜœÖœÉŒπŒ∫Œ¨ ŒºŒ±œÇ œÉœéŒ∂ŒøœÖŒΩ ŒøŒπ Œ§ŒøœçœÅŒ∫ŒøŒπ ŒºŒµ œÑŒø b√∂rek/burek ŒºŒπŒ± Œ∫Œ±Œπ ŒµŒØŒΩŒ±Œπ œÑŒø œÄŒªŒ∑œÉŒπŒ≠œÉœÑŒµœÅŒø œÉŒµ Œ±œÖœÑœå œÄŒøœÖ Œø ŒàŒªŒªŒ∑ŒΩŒ±œÇ ŒøŒΩŒøŒºŒ¨Œ∂ŒµŒπ œÄŒØœÑŒ±, Œ∫Œ±Œπ Œ¨œÉŒµ œÑŒøœÖœÇ ŒöœÅŒ∑œÑŒπŒ∫ŒøœçœÇ ŒΩŒ± ŒªŒ≠ŒΩŒµ ŒºœÄŒøœÖœÅŒ≠Œ∫Œπ Œ∫Œ¨œÑŒπ ŒµŒΩœÑŒµŒªœéœÇ Œ¨œÉœáŒµœÑŒø.&lt;/p&gt;

&lt;p&gt;ŒïŒ∫ŒµŒØ œÄŒøœÖ œÉŒ∑Œ∫œéŒΩœâ œÑŒ± œáŒ≠œÅŒπŒ± œàŒ∑ŒªŒ¨ ŒµŒØŒΩŒ±Œπ œÉœÑŒ∑ ŒºŒµœÑŒ¨œÜœÅŒ±œÉŒ∑ œÑŒøœÖ &amp;quot;œÉœÜŒøŒªŒπŒ¨œÑŒ±&amp;quot;. ŒöŒ±Œπ œÑŒø Œ±œÉœÑŒµŒØŒø ŒµŒØŒΩŒ±Œπ œåœÑŒπ œÑŒø Œ≠œÑŒøŒπŒºŒø œÜœçŒªŒø œÄŒøœÖ Œ∏Œ± Œ≤œÅŒµŒπ Œ∫Œ±ŒΩŒµŒØœÇ œÉœÑŒø œÉŒøœÖœÄŒµœÅŒºŒ¨œÅŒ∫ŒµœÑ œÉœÑŒ∑ ŒìŒµœÅŒºŒ±ŒΩŒØŒ± (Œ±œÄŒªŒ¨ Bl√§tterteig -&amp;gt; &amp;quot;Œ¶œçŒªŒø&amp;quot;) ŒµŒØŒΩŒ±Œπ œÉœÜŒøŒªŒπŒ¨œÑŒ±.&lt;/p&gt;

&lt;p&gt;Œ§Œ≠ŒªœâœÇ œÄŒ¨ŒΩœÑœâŒΩ, ŒøŒπ œÜŒØŒªŒøŒπ ŒºŒøœÖ ŒøŒπ Œ§ŒøœçœÅŒ∫ŒøŒπ œÉœÑŒø Œ∏Œ≠ŒºŒ± œÄŒØœÑŒ± ŒµŒØŒΩŒ±Œπ ŒºŒπŒ± Œ±œÄŒøŒ≥ŒøŒÆœÑŒµœÖœÉŒ∑ Œ∫Œ±Œπ Œ≠œáŒµŒπ ŒΩŒ± Œ∫Œ¨ŒΩŒµŒπ ŒºŒµ œÑŒπœÇ œÉœÖŒΩœÑŒ±Œ≥Œ≠œÇ œÑŒøœÖœÇ Œ≥ŒπŒ± œÑŒø œÜœçŒªŒø, Œ¥ŒµŒΩ œÑŒøœÖœÇ Œ≤Œ≥Œ±ŒØŒΩŒµŒπ œÑœÅŒ±Œ≥Œ±ŒΩœå ŒºŒµ œÑŒØœÄŒøœÑŒ±.&lt;/p&gt;

&lt;p&gt;Œ§Œπ ŒΩŒ± Œ∫Œ¨ŒΩŒµŒπœÇ ŒªŒøŒπœÄœåŒΩ, Œ∏Œ± Œ∫Œ¨œÑœÉŒµŒπœÇ ŒΩŒ± Œ∫Œ¨ŒΩŒµŒπœÇ œÄŒØœÑŒ±. ŒÜœÅœáŒπœÉŒ± ŒºŒµ œÑœÖœÅœåœÄŒπœÑŒ± (œÄœâœÇ Œ±ŒªŒªŒπœéœÇ), œÄŒµœÅŒ¨œÉŒ± œÉœÑŒ∑ œÉœÄŒ±ŒΩŒ±Œ∫œåœÄŒπœÑŒ±, Œ≠œÜœÑŒ±œÉŒµ Œ∑ œéœÅŒ± œÑŒ∑œÇ œÄœÅŒ±œÉœåœÄŒπœÑŒ±œÇ Œ∫Œ±Œπ ŒµŒ∫ŒµŒØ Œ∫Œ¨œÄŒøœÖ Œ¨œÅœáŒπœÉŒ± ŒΩŒ± Œ∫ŒøŒπœÑŒ¨œâ Œ∫Œ±Œπ œÑŒπ Œ¨ŒªŒªŒø Œ≠œáŒµŒπ œÑœÅŒπŒ≥œçœÅœâ. &lt;/p&gt;

&lt;p&gt;ŒüŒ∫œÑœéŒ≤œÅŒ∑ ŒºŒÆŒΩŒ± ŒµŒ¥œé œÉœÑŒø ŒíŒøœÅœÅŒ¨ œÄŒøœÅœÑŒøŒ∫Œ±ŒªŒØŒ∂ŒµŒπ Œø œÑœåœÄŒøœÇ. Œ†ŒªŒ∑ŒºŒºœçœÅŒ± œÉœÑŒ∑ŒΩ Œ∫ŒøŒªŒøŒ∫œçŒ∏Œ± œÉŒµ ŒªŒ≠œâ. ŒíŒ≥Œ±ŒØŒΩŒøœÖŒºŒµ œÑœÉŒ¨œÅŒ∫Œ± œÉœÑŒ± œáœâœÅŒ¨œÜŒπŒ± Œ∫Œ±Œπ ŒºŒµœÑŒ¨ œÑŒπœÇ Œ≠œáŒøœÖŒºŒµ œÉœÑŒøŒπŒ≤Œ±Œ≥ŒºŒ≠ŒΩŒµœÇ œÉœÑŒø Œ±œÄŒøŒ∏Œ∑Œ∫Œ¨Œ∫Œπ - œÉœÑŒ∑ ŒºŒπŒ± Œ≥œâŒΩŒπŒ¨ œÑŒ± ŒºŒÆŒªŒ±, œÉœÑŒ∑ŒΩ Œ¨ŒªŒªŒ∑ ŒøŒπ Œ∫ŒøŒªŒøŒ∫œçŒ∏ŒµœÇ. ŒöŒ±Œπ œÑŒπœÇ œÉœÜŒ¨Œ∂ŒøœÖŒºŒµ ŒºŒØŒ±, ŒºŒØŒ±. ŒëŒΩ Œ¥Œµ ŒºŒ±œÇ œÑŒ± œáŒ±ŒªŒ¨œÉŒµŒπ œÑŒø global warming, œÑœÅœéŒºŒµ Œ∫ŒøŒªŒøŒ∫œçŒ∏Œ± ŒºŒ≠œáœÅŒπ œÑŒø Œ¶ŒªŒµŒ≤Œ¨œÅŒ∑ œÉŒµ ŒªŒ≠œâ (Œ∫Œ±Œπ Œ≠œáœâ Œ∫Œ±Œπ œÄŒ±œÉŒ±œÑŒ≠ŒºœÄŒø Œ≥ŒπŒ± œåŒªŒ∑ œÑŒ∑ŒΩ œÄœÅŒøŒ∫œÅŒπŒºŒ±œÑŒπŒ∫ŒÆ œÜŒ¨œÉŒ∑ œÑŒøœÖ Œ§œÉŒ±ŒºœÄŒπŒøŒΩœÉŒªŒØŒ≥Œ∫Œπ).&lt;/p&gt;

&lt;p&gt;Œó œÄŒ±œÅŒ±Œ∫Œ¨œÑœâ œÉœÖŒΩœÑŒ±Œ≥ŒÆ ŒºŒ±œÇ Œ≤Œ≥ŒÆŒ∫Œµ Œ±œÄœå Œ≠ŒΩŒ±ŒΩ œÄŒµŒπœÅŒ±ŒºŒ±œÑŒπœÉŒºœå (Œ∫Œ±Œπ œÑŒµŒªŒπŒ∫Œ¨, Œ¥ŒπŒ±Œ≤Œ¨Œ∂ŒøŒΩœÑŒ±œÇ &lt;a href=&quot;/rumblings/2010/06/05/simple-cooking-chicken-inspiracin&quot;&gt;œÑŒ∑ŒΩ Œ¨ŒªŒªŒ∑ œÉœÖŒΩœÑŒ±Œ≥ŒÆ&lt;/a&gt;, &amp;quot;œÄŒµŒπœÅŒ±ŒºŒ±œÑŒØŒ∂ŒøŒºŒ±Œπ&amp;quot; Œ≥ŒπŒ± ŒºŒ≠ŒΩŒ± œÉŒ∑ŒºŒ±ŒØŒΩŒµŒπ &amp;quot;Œ≤Œ¨ŒªŒµ Œ∫œçŒºŒπŒΩŒø&amp;quot;), Œ∫Œ±Œπ Œ≠œáŒµŒπ Œ≥ŒØŒΩŒµŒπ œÑœÅŒøŒºŒµœÅœå œÉŒøœÖŒæŒ≠. &lt;/p&gt;

&lt;p&gt;ŒúœåŒΩŒø œÄŒøœÖ Œ∫Œ±ŒΩŒµŒØœÇ ŒµŒ¥œé Œ¥Œµ ŒºœÄŒøœÅŒµŒØ ŒΩŒ± œÄœÅŒøœÜŒ≠œÅŒµŒπ œÑŒø Œ∫ŒøŒªŒøŒ∫œÖŒ∏ŒøœÑœÖœÅœåœÄŒπœÑŒ±.&lt;/p&gt;

&lt;h3&gt;Œ•ŒªŒπŒ∫Œ¨&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;2 œÜœçŒªŒ± œÉœÜŒøŒªŒπŒ¨œÑŒ±.&lt;/li&gt;
&lt;li&gt;1 Œ±œÖŒ≥œå&lt;/li&gt;
&lt;li&gt;100 Œ≥œÅŒ±ŒºŒºŒ¨œÅŒπŒ± œÜŒ≠œÑŒ±&lt;/li&gt;
&lt;li&gt;1 œÑŒ≠œÑŒ±œÅœÑŒø Œ∫ŒøŒªŒøŒ∫œçŒ∏Œ±œÇ&lt;/li&gt;
&lt;li&gt;ŒöœçŒºŒπŒΩŒø (œÑœÅŒπŒºŒºŒ≠ŒΩŒø)&lt;/li&gt;
&lt;li&gt;ŒúŒ±œçœÅŒø œÄŒπœÄŒ≠œÅŒπ&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Œ†Œ±œÅŒ±œÉŒ∫ŒµœÖŒÆ&lt;/h3&gt;

&lt;p&gt;ŒûŒµœÜŒªŒøœÖŒ¥ŒØŒ∂ŒøœÖŒºŒµ œÑŒ∑ŒΩ Œ∫ŒøŒªŒøŒ∫œçŒ∏Œ±, œÑŒ∑ŒΩ Œ∫œåŒ≤ŒøœÖŒºŒµ œÉŒµ Œ∫ŒøŒºŒºŒ¨œÑŒπŒ± Œ∫Œ±Œπ œÑŒ∑ Œ≤Œ¨Œ∂ŒøœÖŒºŒµ ŒΩŒ± Œ≤œÅŒ¨œÉŒµŒπ ŒºŒ≠œáœÅŒπ ŒΩŒ± ŒºŒ±ŒªŒ±Œ∫œéœÉŒµŒπ œÄŒ≠œÅŒ± Œ≥ŒπŒ± œÄŒ≠œÅŒ±.&lt;/p&gt;

&lt;p&gt;ŒïŒΩœÑœâŒºŒµœÑŒ±Œæœç, ŒªŒπœéŒΩŒøœÖŒºŒµ œÑŒ∑ œÜŒ≠œÑŒ± ŒºŒµ Œ≠ŒΩŒ± œÄŒπœÅŒøœçŒΩŒπ ŒºŒ±Œ∂ŒØ ŒºŒµ œÑŒø Œ±œÖŒ≥œå, œÑŒø œÄŒπœÄŒ≠œÅŒπ Œ∫Œ±Œπ œÑŒø Œ∫œçŒºŒπŒΩŒø. ŒåœÑŒ±ŒΩ Œ≤œÅŒ¨œÉŒµŒπ Œ∑ Œ∫ŒøŒªŒøŒ∫œçŒ∏Œ± œÑŒ∑ŒΩ Œ±œÜŒÆŒΩŒøœÖŒºŒµ ŒªŒØŒ≥Œø ŒΩŒ± Œ∫œÅœÖœéœÉŒµŒπ, ŒºŒ∑ ŒºŒ±œÇ Œ∫œåœàŒµŒπ œÑŒø Œ±œÖŒ≥œå Œ∫Œ±Œπ œÑŒ∑ŒΩ Œ±ŒΩŒ±ŒºŒµŒπŒ≥ŒΩœçŒøœÖŒºŒµ Œ∫Œπ Œ±œÖœÑŒÆ ŒºŒ≠œÉŒ± œÉœÑŒø œÖœÄœåŒªŒøŒπœÄŒø ŒºŒØŒ≥ŒºŒ±.&lt;/p&gt;

&lt;p&gt;ŒëœÄŒªœéŒΩŒøœÖŒºŒµ œÄŒ¨ŒΩœâ œÉœÑŒø Œ≠ŒΩŒ± œÜœçŒªŒø, œÉŒ∫ŒµœÄŒ¨Œ∂ŒøœÖŒºŒµ ŒºŒµ œÑŒø Œ¨ŒªŒªŒø œÜœçŒªŒø, Œ≤Œ¨Œ∂ŒøœÖŒºŒµ œÉœÑŒø œÜŒøœçœÅŒΩŒø œÉœÑŒøœÖœÇ 200 Œ≤Œ±Œ∏ŒºŒøœçœÇ Œ≥ŒπŒ± 20 ŒªŒµœÄœÑŒ¨.&lt;/p&gt;
</description>
        <pubDate>Sat, 25 Nov 2017 11:16:43 +0100</pubDate>
        <link>http://www.ampelofilosofies.gr/rumblings/2017/11/25/pumpkin-pie-ala-griega</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/rumblings/2017/11/25/pumpkin-pie-ala-griega</guid>
      </item>
    
      <item>
        <title>Rutema 2.0.0!</title>
        <description>&lt;p&gt;It has been over ten years since the initial version of &lt;a href=&quot;http://www.ampelofilosofies.gr/rutema&quot;&gt;rutema&lt;/a&gt; saw the light, nine since it hit 1.0, five since the last official update of the gem and a full two years since I rewrote the engine.&lt;/p&gt;

&lt;p&gt;Fifteen release candidate versions and - at long last - bugfixes and contributions by other people!&lt;/p&gt;

&lt;p&gt;There is only one thing to say about this code: It is stable. &lt;/p&gt;

&lt;p&gt;It has been filed down over the years, it has been in constant use for the entirety of its existence and it has been a tremendously useful tool in realizing highly complex test automation scenarios.&lt;/p&gt;

&lt;p&gt;Also: &lt;strong&gt;oh my god, it has been ten years!!!&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Sep 2017 15:14:21 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2017/09/23/rutema-two-oh</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2017/09/23/rutema-two-oh</guid>
      </item>
    
      <item>
        <title>ForgetMeNot: Kill Jenkins Zombies</title>
        <description>&lt;p&gt;With the new &lt;a href=&quot;/software/2017/09/09/handling-pull-requests/&quot;&gt;multibranch PR jobs&lt;/a&gt; we&amp;#39;ve noticed that some jobs for closed PRs were kept although we are very strict with cleaning up after the jobs (a legacy of an unwieldy and bloated repo).&lt;/p&gt;

&lt;p&gt;The multibranch scan log claimed that jobs were still running and therefore the PR jobs could not be deleted. This was indeed the case. Although no process was running and Jenkins had been restarted a couple of times, there was seemingly no way of getting rid of these zombies.&lt;/p&gt;

&lt;p&gt;Open the script console (from the &amp;#39;Manage Jenkins&amp;#39; page) and type &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;Jenkins.instance.getItemByFullName(&quot;JobName&quot;).getBuildByNumber(JobNumber)
.finish(hudson.model.Result.ABORTED, new java.io.IOException(&quot;Aborting build&quot;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;replacing JobName with the name of your job and JobNumber with the number of the build job you want to terminate.&lt;/p&gt;

&lt;p&gt;And that is how you kill the Jenkins zombies.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve obviously googled that...&lt;/p&gt;
</description>
        <pubDate>Tue, 19 Sep 2017 19:14:44 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2017/09/19/forget-me-not-kill-jenkins-zombies</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2017/09/19/forget-me-not-kill-jenkins-zombies</guid>
      </item>
    
      <item>
        <title>DevOps for development</title>
        <description>&lt;p&gt;&lt;em&gt;This post was started in May 2016, went on a sabbatical and is back having changed intent&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Back from the annual Z√ºhlke Camp and some conversations keep bouncing around in my head.&lt;/p&gt;

&lt;p&gt;It has been about 5 years now that we started using Chef to drive infrastructure-as-code into our projects. The incentive that led to this is documented in a post back in &lt;a href=&quot;/software/2011/02/04/managing-your-development-environment&quot;&gt;February &amp;#39;11&lt;/a&gt;. Seems I have spent 5 years melting silver to make bullets.&lt;/p&gt;

&lt;p&gt;For a company like &lt;a href=&quot;http://www.zuehlke.com&quot;&gt;Z√ºhlke&lt;/a&gt; the use of provisioning tools like Chef might not be apparent from the start: It does not operate a data center, does not do traditional Ops&lt;sup&gt;1&lt;/sup&gt; and does not deal with a large scale of server instances per project.&lt;/p&gt;

&lt;p&gt;What it does&lt;sup&gt;2&lt;/sup&gt; (and really, really well I might add) is put together engineering teams that build high quality software which - when occasion warrants it - is correctly integrated into a system of electronic and mechanical components (which it also develops).&lt;/p&gt;

&lt;p&gt;What does that have to do with DevOps?&lt;/p&gt;

&lt;h2&gt;You now have two problems&lt;/h2&gt;

&lt;p&gt;Any software engineering team of significant size (arbitrarily defined as 5+ people) faces two problems:&lt;/p&gt;

&lt;h3&gt;Problem Number One: It works for me&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/spot-the-difference.jpg&quot; alt=&quot;spot the difference&quot;&gt; You can&amp;#39;t build the software, but your colleague next to you cannot reproduce the problem. You are reduced to playing &amp;quot;Spot The Difference&amp;quot; to figure out what is wrong.&lt;/p&gt;

&lt;p&gt;Few things are more frustrating than inconsistencies across your development infrastructure. It costs a lot of time and consequently money but it also has a severe psychological impact: &lt;em&gt;You can never be sure&lt;sup&gt;3&lt;/sup&gt; if a green build really means there were no errors&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;Problem Number Two: Newbie Blues&lt;/h3&gt;

&lt;p&gt;You hire me to write code and I spent a week installing software, fiddling with settings and most importantly consume time of your already stressed developers because the installation guide the trainee wrote three years ago in Word is outdated and only the people working know exactly what is going on and how it fits together. &lt;/p&gt;

&lt;p&gt;Worse yet, there is only one guy who knows all the details and he&amp;#39;s on holiday (true story).&lt;/p&gt;

&lt;h2&gt;Strategic advantage&lt;/h2&gt;

&lt;p&gt;A technology consultant firm like &lt;a href=&quot;http://www.zuhelke.com&quot;&gt;Z√ºhlke&lt;/a&gt; might not operate servers on scale, but it does engineering teams on scale, so the above mentioned problems become hurdles and the solution a strategic advantage in ensuring a high quality, high standards environment in the shortest time possible: The team hits the ground running.&lt;/p&gt;

&lt;h2&gt;Automation is codified expertise&lt;/h2&gt;

&lt;p&gt;I don&amp;#39;t remember coining the phrase but it has been attributed to me probably because I keep repeating it.&lt;/p&gt;

&lt;p&gt;In a lot of ways automating is scaling your experts: Specific practices and solutions, especially in building and testing software systems can be automated, which means the computer takes over the boring, repetitive work.&lt;/p&gt;

&lt;h2&gt;Silver(ish) bullet&lt;/h2&gt;

&lt;p&gt;Both problems mentioned above are solved treating infrastructure as code and development environments as infrastructure: &lt;/p&gt;

&lt;p&gt;Consistency reduces discrepancies leading to faster defect localization. Automation accelerates onboarding.&lt;/p&gt;

&lt;p&gt;But just like regular expressions you have now introduced a whole other layer of complexity. You have &lt;em&gt;added&lt;/em&gt; to your technology stack and this opens new issues.&lt;/p&gt;

&lt;p&gt;Maintenance and documentation, the bane of every software. We are surprised by how much work is required - &lt;strong&gt;every single time, for every piece of software we use&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;The irony of doing&lt;/h2&gt;

&lt;p&gt;I complained loudly (at camp) that I spent a lot more time explaining things instead of doing what I used to do: explore bleeding edge technologies and learn new stuff.&lt;/p&gt;

&lt;p&gt;A colleague reposted with &amp;quot;you&amp;#39;re getting old mate, we have to get all that knowledge out of your head before you turn senile&amp;quot;. Apart from the old part (sic!) his statement reflects a perfect irony: the more you do, the more you find yourself having to set aside time to explain what you did, &lt;em&gt;ending up doing less&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This post started as a highly technical tour of Chef usage for provisioning development environments. It turns out you get that out of the way in a couple of paragraphs.&lt;/p&gt;

&lt;p&gt;The technical foundations of all this are not the really interesting parts. They are tools, tools that enable better communication, better teamwork, better planning.&lt;/p&gt;

&lt;p&gt;What we aspire to is a team whose members have a common understanding of the system they are building and each member is enabled to develop, detect problems early and release on schedule. And we want that for every team.&lt;/p&gt;

&lt;p&gt;And this leads us back to what I consider DevOps to be all about&lt;sup&gt;4&lt;/sup&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Holistic system thinking&lt;/li&gt;
&lt;li&gt;No silos between disciplines&lt;/li&gt;
&lt;li&gt;Short/fast feedback loops&lt;/li&gt;
&lt;li&gt;High degree of automation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do you know what it actually means? It means we want higly motivated, educated people that have an interest in what they do and want to learn about every aspect of it. And we want these people to work together as a team, complementing each other in their tasks, learning all the way.&lt;/p&gt;

&lt;p&gt;Mutual respect, appreciation, reasonable hours, good pay and interesting problems. Software development is mostly about people.&lt;/p&gt;

&lt;p&gt;You didn&amp;#39;t expect that, did you?&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; Not quite true - basically Z√ºhlke does not manage a data center but Ops are part of the portfolio of services offered. &lt;/p&gt;

&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt; Marketing will hound me to the end of my days for that sentence. &lt;a href=&quot;http://www.zuhelke.com&quot;&gt;Z√ºhlke&lt;/a&gt; of course does more things. Great teams of great engineers building great software is my favourite though.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;3&lt;/sup&gt; Well, you can never be absolutely sure, that is a given - we are talking software development after all. But you should be &lt;em&gt;reasonably&lt;/em&gt; sure.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;4&lt;/sup&gt;See what I did there? I used a hyped up marketing term to get you hooked and kept airily going on about abstracty this and thats vaguely within the broad marketing blanket of the term. At least I&amp;#39;m nice enough to give you a definition at the end.&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Sep 2017 12:02:44 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2017/09/13/dev-in-devops</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2017/09/13/dev-in-devops</guid>
      </item>
    
      <item>
        <title>Handling pull requests with Jenkins</title>
        <description>&lt;p&gt;My requirements for handling pull requests in CI are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I want to build the merge reference of a branch for which there is an open pull request and I want to do it every time something is commited on either branch participating in the pull request.&lt;/li&gt;
&lt;li&gt;I want to be able to structure my build jobs in separate, parametrizable &amp;quot;component&amp;quot; jobs which I can then compose in highly prallelizable pipelines.&lt;/li&gt;
&lt;li&gt;I want all of the above &amp;quot;as code&amp;quot;, meaning no GUI interaction necessary to setup.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This in the current state of my build stack seems nigh on impossible.&lt;/p&gt;

&lt;p&gt;Lets take it from the beginning: &lt;/p&gt;

&lt;p&gt;Git hosting and PR support is provided by BitBucket Server, build management by Jenkins 2.x.&lt;/p&gt;

&lt;p&gt;Add &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Bitbucket+Branch+Source+Plugin&quot;&gt;BitBucket Branch Source Plugin&lt;/a&gt; to get the option of triggering builds that have open PRs on a multi branch pipeline.&lt;/p&gt;

&lt;p&gt;The as-code part means we have a job DSL spec, the pull request trigger and &amp;quot;componetized&amp;quot; jobs means a multi-branch pipeline job.&lt;/p&gt;

&lt;h2&gt;Components and Composites&lt;/h2&gt;

&lt;p&gt;We have a big system with lots of moving parts. I tend to structure my code in building blocks and now that I can code my CI jobs, I tend to do the same.&lt;/p&gt;

&lt;p&gt;So we have &amp;quot;component&amp;quot; jobs, that do one thing (build, test) and are implemented as parametrized pipeline jobs. These are the jobs that require a workspace, check out the repository and do the heavy duty compiling and testing.&lt;/p&gt;

&lt;p&gt;I tend to implement them as reusable as possible, so one of the parameters is the branch to build.&lt;/p&gt;

&lt;p&gt;Then we have &amp;quot;composite&amp;quot; jobs, which take care of scaling our CI. They put together batches of the component jobs, adjust parameters according to scale criteria (e.g &amp;quot;fast&amp;quot;, &amp;quot;thorough&amp;quot; etc.), launch jobs in parallel and then aggregate results and report.&lt;/p&gt;

&lt;p&gt;Most of the time we end up with a single composite pipeline which then becomes Main, Nightly or Release with the adjustment of a couple of parameters. Having a branch parameter allows us to do the same thing on any branch.&lt;/p&gt;

&lt;p&gt;Tweaking this pipeline to use in pull requests was the exercise leading to this post.&lt;/p&gt;

&lt;h2&gt;You can&amp;#39;t have what you want&lt;/h2&gt;

&lt;p&gt;Right from the start it becomes obvious that I cannot have builds that build the merge ref. &lt;/p&gt;

&lt;p&gt;Mostly because it means figuring out the two SHAs (easy when reading the checkout step&amp;#39;s return values) and then adjusting the component jobs to perform the merge every time - which kinda defeats the purpose of the component jobs, since we do this merge only for pull requests and not for the rest of the mainline builds. We end up with a second set of component jobs built specifically for the pull request which is not worth the effort.&lt;/p&gt;

&lt;p&gt;I can live with building just the PR source branch and letting BitBucket detect merge conflicts given that we rebase frequently and aim for short lived branches.
Not building the merge ref increases the probability of integration test breakage on the master branch after merging, so it is now up to the devs to ensure master does not break by an obscure integration problem. &lt;/p&gt;

&lt;p&gt;Que requiring a rebase before merge.&lt;/p&gt;

&lt;p&gt;The other problem is that we can only build the tip of the source branch and not the specific SHA that triggered the build. &lt;/p&gt;

&lt;p&gt;The reason for that is that &lt;a href=&quot;https://jenkins.io/doc/pipeline/steps/git/#git-git&quot;&gt;&amp;#39;git&amp;#39;&lt;/a&gt; in the Pipeline DSL does not understand SHAs. It is possible to do by falling back to the generic &lt;a href=&quot;https://jenkins.io/doc/pipeline/steps/workflow-scm-step/#checkout-general-scm&quot;&gt;checkout&lt;/a&gt; directive but omg! is that unreadable.&lt;/p&gt;

&lt;p&gt;Again, not the end of the world, just less than exact verification than we wish and the possibility for building the same ref twice. Still BitBucket keeps track of the build status for each ref and merging requires a green build for that last commit.&lt;/p&gt;

&lt;p&gt;Btw. this problem exists also for the mainline builds so I consider it a major bug of git integration in Jenkins.&lt;/p&gt;

&lt;p&gt;Some way of passing the scm context to jobs started via &lt;a href=&quot;https://jenkins.io/doc/pipeline/steps/pipeline-build-step/#build-build-a-job&quot;&gt;build&lt;/a&gt; would be nice. Might also be possible to hack with current means.&lt;/p&gt;

&lt;h2&gt;Regroup.&lt;/h2&gt;

&lt;p&gt;The compromise we come to is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build the tip of the source branch for every open PR.&lt;/li&gt;
&lt;li&gt;Re-use the main pipeline script.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get everything as code we had to revert to manipulating XML. I did not manage to get the &lt;a href=&quot;https://github.com/jenkinsci/job-dsl-plugin/wiki/The-Configure-Block&quot;&gt;configure&lt;/a&gt; block correctly set using the overloaded syntax.&lt;/p&gt;

&lt;p&gt;I kept getting missing method errors for String.div() and could not set class for the XML elements. The sollution was to go back to proper XML. &lt;/p&gt;

&lt;p&gt;The following code defines two XML snippets in the beginning. The first configures the &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Bitbucket+Branch+Source+Plugin&quot;&gt;BitBucket Branch Source Plugin&lt;/a&gt; for the multibranch pipeline so that only PRs trigger.&lt;/p&gt;

&lt;p&gt;The second snippet changes the location and filename that is used as Jenkinsfile.&lt;/p&gt;

&lt;p&gt;Thus we get a multibranch pipeline job that polls BitBucket every minute, triggering the &amp;quot;Jenkinsfile&amp;quot; pipeline when it detects changes in open pull requests.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Addendum 2017/09/13&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;Things break when faced with the real world&lt;/h2&gt;

&lt;p&gt;The snippet configuring the &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Bitbucket+Branch+Source+Plugin&quot;&gt;BitBucket Branch Source Plugin&lt;/a&gt; originally defined two traits. The first one was a branch discovery trait and it resulted in not only building a pull requests but also the source branch for the pull request as well. Chaos ensued and resources were wasted.&lt;/p&gt;

&lt;p&gt;The code is now also formated for humans :).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmlSources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'''&amp;lt;sources class=&quot;jenkins.branch.MultiBranchProject$BranchSourceList&quot;&amp;gt;
&amp;lt;data&amp;gt;&amp;lt;jenkins.branch.BranchSource&amp;gt;
&amp;lt;source class=&quot;com.cloudbees.jenkins.plugins.bitbucket.BitbucketSCMSource&quot;&amp;gt;
&amp;lt;serverUrl&amp;gt;https://bitbucket.zuehlke.com&amp;lt;/serverUrl&amp;gt;
&amp;lt;credentialsId&amp;gt;f2361e6b-b8e0-dead-beef-5eed5bc1a59f&amp;lt;/credentialsId&amp;gt;
&amp;lt;repoOwner&amp;gt;FOO&amp;lt;/repoOwner&amp;gt;
&amp;lt;repository&amp;gt;bar&amp;lt;/repository&amp;gt;
&amp;lt;traits&amp;gt;
&amp;lt;com.cloudbees.jenkins.plugins.bitbucket.OriginPullRequestDiscoveryTrait&amp;gt;
&amp;lt;strategyId&amp;gt;2&amp;lt;/strategyId&amp;gt;
&amp;lt;/com.cloudbees.jenkins.plugins.bitbucket.OriginPullRequestDiscoveryTrait&amp;gt;
&amp;lt;/traits&amp;gt;
&amp;lt;/source&amp;gt;
&amp;lt;strategy class=&quot;jenkins.branch.DefaultBranchPropertyStrategy&quot;&amp;gt;
&amp;lt;properties class=&quot;empty-list&quot;/&amp;gt;
&amp;lt;/strategy&amp;gt;&amp;lt;/jenkins.branch.BranchSource&amp;gt;
&amp;lt;/data&amp;gt;
&amp;lt;owner class=&quot;org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject&quot; reference=&quot;../..&quot;/&amp;gt;&amp;lt;/sources&amp;gt;'''&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorySource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'''
&amp;lt;factory class=&quot;org.jenkinsci.plugins.workflow.multibranch.WorkflowBranchProjectFactory&quot;&amp;gt;
&amp;lt;owner class=&quot;org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject&quot; reference=&quot;../..&quot;/&amp;gt;
&amp;lt;scriptPath&amp;gt;Tools/jenkins/pipelines/PullRequest.groovy&amp;lt;/scriptPath&amp;gt;&amp;lt;/factory&amp;gt;'''&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourcesNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XmlParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xmlSources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factoryNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XmlParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factorySource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;multibranchPipelineJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'PullRequests'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Pull request builds&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;displayName&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;PullRequests&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;triggers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;periodic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;orphanedItemStrategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;discardOldItems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;numToKeep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourcesNode&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factoryNode&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Within the pipeline, the source branch of the pull request is then in the environment variable CHANGE_BRANCH&lt;/p&gt;
</description>
        <pubDate>Sat, 09 Sep 2017 14:14:44 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2017/09/09/handling-pull-requests</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2017/09/09/handling-pull-requests</guid>
      </item>
    
      <item>
        <title>ForgetMeNot: Jenkins Pipeline Jobs polling SCM changes</title>
        <description>&lt;p&gt;It took me a disproportionate amount of time and significant reserves of google foo to figure this out, so it merits documentation.&lt;/p&gt;

&lt;h2&gt;The Problem&lt;/h2&gt;

&lt;p&gt;I use a setup that involves creating all jobs via JobDSL definitions and have several jobs leveraging the PipelineDSL.&lt;/p&gt;

&lt;p&gt;It was unclear how to tell the git which repo to poll, which credentials to use etc.&lt;/p&gt;

&lt;p&gt;Just a warning: none of the options to the scm trigger in JobDSL work for a pipeline job. &lt;/p&gt;

&lt;p&gt;You just define a plain, dumb scm poll in the frequency you require, for example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;triggers {
  scm 'H(3) * * * 1-5'
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;What works?&lt;/h2&gt;

&lt;p&gt;The rest of information is passed to git in the Pipeline definition.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;node(){
  git changelog: true, credentialsId: 'bla-bla-bla', poll: true, url: 'https://url.to.repo', branch: brnch  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The critical part here is setting &lt;em&gt;poll&lt;/em&gt; to &lt;strong&gt;true&lt;/strong&gt;. The job will trigger, enter the pipeline and then setup polling for any future job invocations. I tend to set &lt;em&gt;changelog&lt;/em&gt; to &lt;strong&gt;true&lt;/strong&gt; as well, because if we&amp;#39;re going to pay the penalty (see further down) we might as well get as much as possible out of it.&lt;/p&gt;

&lt;h2&gt;Handicap&lt;/h2&gt;

&lt;p&gt;I find this approach problematic, since it requires us to have a workspace (so we need a node() context in the pipeline) and we need to clone the repo.&lt;/p&gt;

&lt;p&gt;In my case this is exarcebated by bad repository care practices (lots of binary data commited makes the repo way to large relative to it&amp;#39;s content). Also, I tend to structure pipelines with simple jobs (things like Build Module, Test Module, Package &amp;amp; Publish) that are then strung together as a pipeline and the composite jobs usually do not need a workspace. So this cloning is really pure overhead.&lt;/p&gt;

&lt;p&gt;If anyone knows how to get polling working without requiring a full clone, please have a go at the comments.&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Mar 2017 13:14:44 +0100</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2017/03/05/forgetmenot-jenkins-pipeline-polling</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2017/03/05/forgetmenot-jenkins-pipeline-polling</guid>
      </item>
    
      <item>
        <title>Monitor CI nodes with Jenkins</title>
        <description>&lt;p&gt;My team and I have had a dreadful couple of weeks.&lt;/p&gt;

&lt;p&gt;Network issues, license issues, Windows issues, compiler issues, flip-floping test results etc., all of them piled one on top of the other and driving us nuts. With some of these issues we have to live with and compromise (I have a rant, a crazed, raving mad rant about companies forcing you to generate development licenses &lt;em&gt;every week&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;We also scaled out our CI infrastructure. Do not imagine anything huge, we went from 4 nodes running on 6-year old hardware to 16 nodes running on modern i5s, but that still means that we now have to keep an eye on 16 nodes instead of 4.&lt;/p&gt;

&lt;p&gt;The work never stops and we needed a health monitor for the nodes something quick, so we cobbled something together using the Jenkins Job &amp;amp; Pipeline DSLs.&lt;/p&gt;

&lt;h2&gt;What you need&lt;/h2&gt;

&lt;p&gt;Jenkins 2.x with the build-monitor-plugin plugin.&lt;/p&gt;

&lt;h2&gt;All of the nodes.&lt;/h2&gt;

&lt;p&gt;We have fixed CI nodes - none of that dynamic mumbo-jumbo with Docker or AWS. The reason is simple: &lt;/p&gt;

&lt;p&gt;We need Windows and we build embedded software and test on target.&lt;/p&gt;

&lt;p&gt;We just ask Jenkins to tell us how many nodes are registered and then create one job for each node, naming the job after the node:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;http:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//localhost:8080/computer/api/xml?&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slaves&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//computer/displayName').getText()&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build_nodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;groovy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;XmlSlurper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build_nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;displayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++){&lt;/span&gt; 
  &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nodeName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;displayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//the job definition - skipped for clarity, see below&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I tried to use the Jenkins API (the hudson.model.* and jenkins.model.*) but quickly gave up because of major Groovy-Java dissonance and totally uninformative messages.&lt;/p&gt;

&lt;p&gt;So the code above queries the HTTP API - this would be more complicated if we had authentication turned on, but we don&amp;#39;t ;).&lt;/p&gt;

&lt;p&gt;The job definition is simple: Run every 3 minutes and take the node name as a parameter. It is also totally generic, pulling the pipeline definition off our repo.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;pipelineJob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodeName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Monitors&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodeName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Failure&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signifies&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abort&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;been&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;taken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unstable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;means&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maintenance&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;details&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;logRotator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;daysToKeep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;triggers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cron&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'*/3 * * * *'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stringParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'STATION'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodeName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'The station to monitor'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;definition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readFileFromWorkspace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'jenkins/pipelines/monitor.groovy'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The only reason we instantiated one job for every node is for display purposes, which brings us to the view definition&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;buildMonitorView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'CI Health'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'CI infrastructure status'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;http:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//localhost:8080/computer/api/xml?&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slaves&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//computer/displayName').getText()&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build_nodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;groovy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;XmlSlurper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;jobs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build_nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;displayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++){&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nodeName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;displayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodeName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code above gives us a nice monitor view:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ci_health.png&quot; alt=&quot;CI Health Monitor&quot;&gt;&lt;/p&gt;

&lt;h2&gt;The interesting parts&lt;/h2&gt;

&lt;p&gt;We ended up doing quite a few things in this job.&lt;/p&gt;

&lt;p&gt;We check to see if a node is offline and if that was deliberate, we also check if the disk on the node is running full and then if the node is not busy we switch the context to within the node and start checking things.&lt;/p&gt;

&lt;p&gt;That last stage is the tricky part because it needs to be really, really fast, otherwise we run the risk of blocking executors while the team is working.&lt;/p&gt;

&lt;p&gt;The pipeline looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;STATION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STATION&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@NonCPS&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;freeSpaceCheck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;monitorData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;monitorData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hudson.node_monitors.DiskSpaceMonitor&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;freeSpace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;freeSpace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6000000000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@NonCPS&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkIdle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodeData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;nodeData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;idle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isNodeIdle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Node State&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;currentBuild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SUCCESS&quot;&lt;/span&gt;  
  &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:8080/computer/${env.STATION}/api/xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;groovy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;XmlSlurper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;offline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;currentBuild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'FAILED'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;currentBuild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${env.BUILD_NUMBER}-offline&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;temporarilyOffline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;currentBuild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ABORTED'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;currentBuild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${env.BUILD_NUMBER}-parked&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;freeSpaceCheck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;monitorData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;WARNING: Disk space is low!&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;currentBuild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'UNSTABLE'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;currentBuild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${env.BUILD_NUMBER}-nospace&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;isNodeIdle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checkIdle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Check Node&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentBuild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SUCCESS&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isNodeIdle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;STATION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;//this will run on the node if the node is not busy&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We subvert the meaning of the job stati a bit (as documented in the description of the job). This is so that we can adhere to &amp;quot;green means relax, yellow means work is coming your way, red means drop everything else and fix it&amp;quot;.&lt;/p&gt;

&lt;p&gt;We also use the build display name to hint at the reason for the status.&lt;/p&gt;

&lt;p&gt;Those @nonCPS methods are there so that Jenkins does not have a fit trying to serialize the XmlSlurper.&lt;/p&gt;

&lt;p&gt;It would have been less code and a lot more readable if I had managed to talk to the Java API, but wierdness happened and the HTTP API does the work.&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Mar 2017 13:14:44 +0100</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2017/03/04/monitor-ci-nodes-with-jenkins</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2017/03/04/monitor-ci-nodes-with-jenkins</guid>
      </item>
    
      <item>
        <title>ForgetMeNot: Jenkins test result aggregation in the Pipeline DSL</title>
        <description>&lt;p&gt;Took me awhile to figure this out. One more thing for the list of things that Jenkins makes unnecessarily complex.&lt;/p&gt;

&lt;h2&gt;The Problem&lt;/h2&gt;

&lt;p&gt;We have a pipeline job that starts a handful of other jobs - call them subjobs -  and we want to aggregate the test results of the subjobs in our pipeline.&lt;/p&gt;

&lt;h2&gt;The required list of extra plugins you need&lt;/h2&gt;

&lt;p&gt;To get this done I had to add the &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Copy+Artifact+Plugin&quot;&gt;copyartifact plugin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will also need one of JUnit/NUnit/xUnit depending on what your reports look like.&lt;/p&gt;

&lt;h2&gt;How to do it&lt;/h2&gt;

&lt;p&gt;Use archiveArtifact in the subjob to archive the test results. Somehting like &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;archiveArtifacts artifacts: 'results\\*.xml', fingerprint: true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then in the job you do the aggregation make sure to keep the references to the subjobs. &lt;/p&gt;

&lt;p&gt;From the reference we then get the 
build number for each of the test jobs which we need in order to find the correct artifacts to copy.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;def test_jobs=[:]
def subjobs=[:] 
for(int i = 0; i &amp;lt; test_suites.size(); i++){ 
  def instanceNumber=i  
  subjobs[&quot;${env.BUILD_DISPLAY_NAME}-${instanceNumber}&quot;]={
    tj=build job: 'Test'
    test_jobs&amp;lt;&amp;lt;tj.getNumber()
  }
}
parallel subjobs 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another tricky thing that has to do with how Groovy scopes things: &lt;/p&gt;

&lt;p&gt;If &lt;code&gt;i&lt;/code&gt; is not assigned to a variable within the closure then you will only get one job in the subjobs map.&lt;/p&gt;

&lt;p&gt;Then, once the subjobs are finished we pick a node to have a workspace and grab the test reports.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;node(){
  for(int i = 0; i &amp;lt; test_jobs.size(); i++){
    selector = [$class: 'SpecificBuildSelector', 
                buildNumber: &quot;${test_jobs[i]}&quot;]
    step ([$class: 'CopyArtifact',
          projectName: 'Test',
          selector: selector])
  }
  //Your test results plugin here
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That selector trick I found in the &lt;a href=&quot;https://github.com/jenkinsci/blueocean-acceptance-test/blob/master/Jenkinsfile#L103&quot;&gt;blueocean sources&lt;/a&gt; (don&amp;#39;t even ask me how I arrived there)&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Feb 2017 16:19:44 +0100</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2017/02/22/forgetmenot-jenkins-aggregation</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2017/02/22/forgetmenot-jenkins-aggregation</guid>
      </item>
    
  </channel>
</rss>