<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ampelofilosofies</title>
    <description>Random comments on random subjects in random language</description>
    <link>http://www.ampelofilosofies.gr</link>
    <atom:link href="http://www.ampelofilosofies.gr/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Baruco 2013</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/icanseethesea.jpg&quot; alt=&quot;I can see the sea&quot;&gt; Baruco is my excuse for the yearly pilgrimage to Barcelona.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s always a great pleasure coming back and the conference program is excellent, ram-packed with really really good talks. &lt;/p&gt;

&lt;p&gt;Truthfully, it&amp;#39;s just sheer pleasure to be able to sit back and watch a few talks without having to get up and run to prepare the next speaker ;).&lt;/p&gt;

&lt;p&gt;The organisation is very good and having gone through the ordeal with the EuRuKo team I&amp;#39;ll just  ignore any small faux-pas and smile. Kudos to the team for a job (very) well done. And guys...nobody expects the Wi-Fi to work.&lt;/p&gt;

&lt;p&gt;Matz, Sandi Metz, Katrina Owen, Avdi Grimm, Chris Kelly, Matt Wynne...ok, I won&amp;#39;t list the whole line up. The talks were great, the discussions in the breaks and the party even better and getting to meet up with old friends and acquaintances is...priceless.&lt;/p&gt;

&lt;p&gt;One thing I would have done differently (well, we did do differently at EuRuKo) would be to stretch the intervals a bit more, to give people more time to talk between talks. But it&amp;#39;s a delicate balance and the chosen format puts more talks on offer which is also great.&lt;/p&gt;

&lt;p&gt;I  managed to squeeze a lightning talk (I even have &lt;a href=&quot;/images/DevopsInTheRealWorld.pdf&quot;&gt;slides&lt;/a&gt; for it) on the two principles a team needs to follow when setting up it&amp;#39;s project development environment.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s two talks I would add to the show-to-every-one-because-it-explains-things-better-than-you-ever-will category. These are Sandi Metz&amp;#39;s &amp;quot;Rules&amp;quot; and Corey Haine&amp;#39;s &amp;quot;Design Patterns And The Proper Cultivation Thereof&amp;quot;. &lt;/p&gt;

&lt;p&gt;For sheer win-win in entertainment and knowledge I&amp;#39;ll push Katrina Owen&amp;#39;s &amp;quot;Here be Dragons&amp;quot; and to start a spirited discussion I&amp;#39;ll just show you Reg Braithwaite&amp;#39;s &amp;quot;What Developing With Ruby Can Teach Us About Developing Ruby&amp;quot;.&lt;/p&gt;

&lt;p&gt;If an outsider ever drops in for a visit at a Ruby conference he might get the impression that Rubyists keep patting themselves on the back and congratulating themselves on what a great, friendly and welcoming community they have. And he might leave with a slight &amp;quot;puff, them Rubyists think too much off themselves&amp;quot;.
That would be a mistake. The community is this language&amp;#39;s strongest feature. The people are approachable, open minded, hard working and knowledgable.
They will go out of their way to welcome new members and are generous with their time and knowledge.&lt;/p&gt;

&lt;p&gt;Every Ruby conference I have been to has been a pleasure and an inspiration mainly because of the people attending and Baruco was no exception. It was rather a very nice confirmation of the rule :).&lt;/p&gt;
</description>
        <pubDate>Wed, 18 Sep 2013 14:00:00 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2013/09/18/baruco2013</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2013/09/18/baruco2013</guid>
      </item>
    
      <item>
        <title>(Gender)Diversity...oh my!</title>
        <description>&lt;p&gt;Diversity is a huge subject and doesn&amp;#39;t just cover gender or racial colour differentiations. European events tend to be extremely diverse on a different level than the current diversity discussion. We are fond of saying that you can drive a hundred miles in Europe and you will cross 6 countries. &lt;/p&gt;

&lt;p&gt;We don&amp;#39;t actually have an accurate count of the languages spoken at EuRuKo or the countries of origin for the delegates (but in my 5yr old son&amp;#39;s school the count stands at 28). &lt;/p&gt;

&lt;p&gt;We know that there were participants from every inhabited continent on this planet (-1 if you count Antarctica in that set) and from a questionnaire that only about a quarter of the delegates filled-in we have a listing of 24 different countries. Having invited people from countries that are missing from that list (Japan, Brasil and France come to mind) we can guarantee that it&amp;#39;s not complete.&lt;/p&gt;

&lt;p&gt;This post is explicitly concentrated on the issue of gender diversity and the goals the EuRuKo committee had set about it. It&amp;#39;s also my own personal view on the subject with the benefit of a couple of months of distance to the conference.&lt;/p&gt;

&lt;p&gt;EuRuKo ended up with an all male lineup. So typically we actually failed on one of the goals set from the beginning.&lt;/p&gt;

&lt;p&gt;Personally, I&amp;#39;m stumped about what more we could have done. Let&amp;#39;s go through the list once more:&lt;/p&gt;

&lt;p&gt;We went out and invited female speakers. They declined, each for their own very good reasons (sorry guys, but except for Matz, you were all &amp;quot;second choice material&amp;quot; ;) ). In hindsight I am really happy they couldn&amp;#39;t come and end up as a lonesome diversity token.&lt;/p&gt;

&lt;p&gt;We set a &lt;a href=&quot;http://euruko2013.org/codeofconduct/&quot;&gt;code of conduct&lt;/a&gt;, designed to keep racuous, young, white males in check (aaaand I&amp;#39;m done stereotyping).&lt;/p&gt;

&lt;p&gt;Then we came up with a CfP process with a blind selection phase aiming to encourage submissions by everyone. And we went completely nuts trying to promote it. Devchix, RailsGirls, every ruby group list we could find, you name it, it got an email (or more) from us. I&amp;#39;m surprised that we didn&amp;#39;t get blacklisted as major geek spammers.&lt;/p&gt;

&lt;p&gt;There were 91 talk proposals and all kinds of metrics that tell you that the whole process stimulated interest and created discussions and participation from the community. And when we pulled back the curtains just one - a single one! - was submitted by a woman!&lt;/p&gt;

&lt;p&gt;Dammit ladies, you didn&amp;#39;t even give us a chance! Submit a couple of talks, let the community show it&amp;#39;s bias...or not. &lt;/p&gt;

&lt;p&gt;In the aftermath of the CfP there were a lot of discussions about the reasons for the lack of female participation.&lt;/p&gt;

&lt;p&gt;In one of those &lt;a href=&quot;https://twitter.com/ashedryden&quot;&gt;@ashedryden&lt;/a&gt; summarized for me the following points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;have they accepted women speakers before?&lt;/li&gt;
&lt;li&gt;are they interested in having women speakers?&lt;/li&gt;
&lt;li&gt;how involved are they (conference itself and its organizers) with groups that support women in technology?&lt;/li&gt;
&lt;li&gt;do I know people that are attending, speaking, or organizing?&lt;/li&gt;
&lt;li&gt;can I afford to go if the conference doesn&amp;#39;t cover anything for speakers?&lt;/li&gt;
&lt;li&gt;will it be a safe place for me to present?&lt;/li&gt;
&lt;li&gt;will the venue and location be a safe place for me to travel alone?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The answer to every one of those points (except for 2 were it&amp;#39;s a crystal clear yes) is complicated by the nature of EuRuKo and how it is organized. &lt;/p&gt;

&lt;p&gt;Let&amp;#39;s say that the organizers were an unknown quantity and Greece&amp;#39;s miniscule Ruby community is busy drumming up support for the community in general within a framework of complete abandonement from any official source.&lt;/p&gt;

&lt;p&gt;Cost was also a factor. Not for the conference per se, which probably is the cheapest conference of that caliber that you will ever attend, but because Athens is on the ass end of flight connections and a tourist destination at the end of June, which makes getting there...expensive.&lt;/p&gt;

&lt;p&gt;There was an effort to enable at least the speakers to save money. Some things (like the &lt;a href=&quot;http://www.google.com/jobs/students/proscho/scholarships/emea/travelgrants/&quot;&gt;Google female scientists EMEA grant&lt;/a&gt;) did not pan out, others (like offering sponsor deals for companies that payed their employee travelling expenses) worked really well.&lt;/p&gt;

&lt;p&gt;The one thing we failed to address explicitly, because of our own bias, was safety. We live, work and move around in Athens and by any measure or metric Athens is way safer than any big US city and safer than many big European cities. And I mean that in the walk-alone-on-the-street-in-the-middle-of-the-night sense. But safer does not mean safe.&lt;/p&gt;

&lt;p&gt;We had a doctor on standby and there was security personel in the venue, but these are general measures meant for everyone.&lt;/p&gt;

&lt;p&gt;Greece in general and Athens in particular has made the news in very sensational ways the last few years. Our venue selection was explicitly influenced by the wish to avoid having our delegates move in the &amp;quot;demonstration&amp;quot; zone of Athens and thus risk - there is no reason to hide it - having to treat tear-gas victims. That would have put a huge damper on the whole conference!  &lt;/p&gt;

&lt;p&gt;Still any reasonably well informed and intelligent person (which overlaps quite a bit with our target audience) has been inundated in the past couple of years by dark and ugly news from the &amp;quot;birthplace of Democracy&amp;quot; and to work against that bias was difficult from the beginning. Maybe targeting it specifically would have put female participants more at ease, maybe it would have scared more people away.  Either way it was the one thing we did not address in public.&lt;/p&gt;

&lt;p&gt;At the end we had less than 10% female participation at the event, a point Kiev should improve on in 2014. &lt;/p&gt;

&lt;p&gt;Still, there&amp;#39;s about 400 more people with fresh EuRuKo Athens experience in the community and I bet they will all tell you that you should have been there and that you shouldn&amp;#39;t miss the next one.&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Sep 2013 17:00:00 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/rumblings/2013/09/15/diversity-oh-my</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/rumblings/2013/09/15/diversity-oh-my</guid>
      </item>
    
      <item>
        <title>Recruiter fail</title>
        <description>&lt;p&gt;The following was sent to the info euruko account &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;Hi EuRuKo,

I am &amp;lt;em&amp;gt;redacted&amp;lt;/em&amp;gt; human resource manager at &amp;lt;em&amp;gt;redacted&amp;lt;/em&amp;gt;, a well-funded startup 
based in the US. I went through your Github profile and thought that you would be a good 
fit for the position that I&amp;#39;m trying to fill. This is a long term position. The main 
benefit of the job is its flexibility which allows you to work at your most convenient 
time and location, and we can also send you a prepaid retainer! - details below.  
Let me know whether you&amp;#39;re interested in discussing this opportunity.

 - &amp;lt;em&amp;gt;redacted&amp;lt;/em&amp;gt;

OFFSITE ROR Developers (front/back-end)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Word to the wise: if you want to recruit developers you better put a little more effort into it. Targeting an info account for a conference is a major fail!&lt;/p&gt;

&lt;p&gt;Initially I did not redact any of the information, but I then googled the company and it turns out it&amp;#39;s a legitimate, obviously small, web development consultancy in the US. It seemed a pity to land the HR manager who sent that email in hot waters. You know who you are, do better next time.&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Sep 2013 16:16:43 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/rumblings/2013/09/04/recruiter-fail</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/rumblings/2013/09/04/recruiter-fail</guid>
      </item>
    
      <item>
        <title>Back on the saddle</title>
        <description>&lt;p&gt;Man it&amp;#39;s been a long time!&lt;/p&gt;

&lt;p&gt;It&amp;#39;s been over a year since I published anything on this blog. And it&amp;#39;s been a busy year, an upside-down year, a year of upheaval.&lt;/p&gt;

&lt;p&gt;First of all Joyent decided to terminate it&amp;#39;s VPS hosting in favour of their cloud offerings, thus switching off all textdrive remnants.
They couldn&amp;#39;t have chosen a worse time for it. With preparations for EuRuKo 2013 in full swing there was simply not enough time to take care of moving.&lt;/p&gt;

&lt;p&gt;So I left it until the servers were turned off. And thus ampelofilosofies disappeared from the net.&lt;/p&gt;

&lt;p&gt;Time to remedy that. After a well earned holiday I get to sit down and redo the blog. Way back in 2005 the third incarnation of this blog (it&amp;#39;s like Doctor Who, it keeps coming back in different forms since 1996) was a static site generated from  HTML and Textile sources and a bunch of home brewed ruby scripts. Back then I was convinced it was the best way to manage my content: text based, version controlled and easy to transform.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/software/2009-10-05-putting-it-back-together&quot;&gt;4th incarnation&lt;/a&gt; was a Radiant based site. At the time it was easy to setup, there was a wealth of plugins that allowed things like image galleries, comments and attachements so it seemed like a good idea. And I switched from textile to markdown.&lt;/p&gt;

&lt;p&gt;Fast forward 4 years (which seems to be the &amp;quot;reincarnation&amp;quot; time for some reason) and that &amp;quot;good&amp;quot; idea proved to be a big impediment in getting the site back up in the limited free time available. The venerable Radiant installation that was running on the hosted server was outdated, upgrading to the current version proved a huge chore, none of the plugins runs anymore and my content is locked in an sqlite3 database making extraction rather cumbersome.&lt;/p&gt;

&lt;p&gt;This is not about bashing Radiant. It&amp;#39;s more about me not having the time to keep up with the updates in a viable way while having adopted Radiant quite early in it&amp;#39;s development cycle. The latest version has the upgrade process under wraps, but I&amp;#39;m left with an ancient codebase barely running on ruby 1.8.7.&lt;/p&gt;

&lt;p&gt;I still prefer the generate-from-text-source approach. Luckily, since I have absolutely no inclination in resurrecting my ruby scripts (omg! I look at the ruby code I wrote in 2005 and I scoff at the naive stranger who thought it was good), Jekyll follows exactly the same philosophy - only it does things right.&lt;/p&gt;

&lt;p&gt;It has been an enormous pleasure rescuing all the content from the clutches of sqlite3 and Jekyll has proven a joy to work with.&lt;/p&gt;

&lt;p&gt;The most important thing in the migration from Radiant to Jekyll has been maintaining the permalinks. Analytics show that there are some poor souls visiting and linking to a few of my articles (&lt;a href=&quot;/2010/05/20/rumblings/things-you-should-know-while-dating-a-computer-programmer&quot;&gt;Things you should know while dating a computer programmer&lt;/a&gt; being the most popular for some reason) so it would be bad form to change the links. Bad enough that they have been offline for so long.&lt;/p&gt;

&lt;p&gt;Thankfully Jekyll makes it very easy to change the default permalink scheme. So in the coming days I will complete the migration of the content, rework the appearance of the site, activate RSS and comments. After that there&amp;#39;s a few articles that need publishing. Like I said, it has been a long, busy and above all interesting year.&lt;/p&gt;
</description>
        <pubDate>Fri, 30 Aug 2013 01:08:43 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/rumblings/2013/08/30/back-on-the-saddle</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/rumblings/2013/08/30/back-on-the-saddle</guid>
      </item>
    
      <item>
        <title>Η Ευρώπη και η σοβαρή σάχλα</title>
        <description>&lt;p&gt;Είδαμε και τη Eurovision φέτος.&lt;/p&gt;

&lt;p&gt;Είναι μια από εκείνες τις βασανιστικές εμπειρίες όπου βομβαρδίζεσαι διαδοχικά από οδυνηρά ερεθίσματα που προσβάλουν την αισθητική και τη νοημοσύνη σου στο βαθμό που η μοναδική διέξοδος είναι ο σαρκασμός και το καγχαστό γέλιο μέχρι δακρύων.&lt;/p&gt;

&lt;p&gt;Φυσικά μόνο με παρέα έτσι; Γιατί το να παρακολουθεί κανείς αυτό το έκτρωμα μόνος είναι τραγωδία. Από την άλλη κάποια πράγματα μου έκαναν εντύπωση:&lt;/p&gt;

&lt;p&gt;Η διοργάνωση φέτος έγινε στο Μπακού, την πρωτεύουσα του Αζερμπαϊτζάν, μια χώρα με ένα ποινικό μητρώο για πράξεις κατά των ανθρωπίνων δικαιωμάτων και της ελευθερίας της έκφρασης που πάει πίσω μέχρι και τα χρόνια της τσαρικής Ρωσίας. Η γερμανική αναμετάδοση δε σταμάτησε να το σχολιάζει κατά τη διάρκεια της εκπομπής.&lt;/p&gt;

&lt;p&gt;Οι Νορβηγοί βυθισμένοι μέχρι τα μπούνια σε μια δίκη αντιπαράθεση του άκρατου μίσους με την αξιοπρέπεια και το σεβασμό στον άνθρωπο, &lt;a href=&quot;http://www.youtube.com/watch?v=QdHnenxPPnc&quot;&gt;στέλνουν&lt;/a&gt; έναν ιρανικής καταγωγής, ανοιχτά ομοφυλόφιλο νεαρό στην σύνορα των μουλάδων. Ο οποίος παρεπιπτόντως μπορεί και &lt;a href=&quot;http://www.youtube.com/watch?feature=player_detailpage&amp;amp;v=kIGeUVAuOmM#t=659s&quot;&gt;στέκεται σοβαρότατος και συγκροτημένος&lt;/a&gt; (βάλτε υπότιτλους). Τι κάνουμε η υπόλοιπη Ευρώπη; Τον αφήνουμε τελευταίο.&lt;/p&gt;

&lt;p&gt;Αλλά δεν έχει σημασία γιατί τα χέρια νίυονται με την &amp;quot;μεγαλύτερη συγκομιδή πόντων&amp;quot; της μαροκινής καταγωγής Σουηδέζας. Έτσι δεν είναι; Θα μπορούσα - λέμε τώρα - να κάθομαι να κρατάω σημειώσεις με το ποιά χώρα έδωσε ποιούς πόντους που και να βγάλω μια βαθυστόχαστη και τελείως άκυρη ανάλυση για την ωριμότητα των ανά την Ευρώπη τηλεθεατών, αλλά εδώ μιλάμε για τη Eurovision, υπάρχουν και κάποια όρια.&lt;/p&gt;

&lt;p&gt;Η Ψωροκώσταινα έστειλε τη &amp;quot;δικιά μας&amp;quot; Κυπραία (πάση θυσία να εξασφαλιστεί το 12άρι, δεν είναι καιροί για πειραματισμούς) να τραγουδήσει:&lt;/p&gt;

&lt;p&gt;&amp;quot;You make me dance like a maniac, you make me want your aphrodisiac&amp;quot; κοινώς, &amp;quot;Ανοίξαμε και σας περιμένουμε, ελάτε να μας γ@#&amp;amp;$!τε&amp;quot;&lt;/p&gt;

&lt;p&gt;Εγώ πάντως θα κρατήσω την εξαιρετική Ευρώπη της εποχής του διαδικτύου που στέλνει σε μια ισλαμική χώρα &lt;a href=&quot;http://www.youtube.com/watch?v=WKNRGc71hjc&quot;&gt;6 ορθόδοξες γιαγιούλες&lt;/a&gt; να μαζέψουν χρήματα για τον Ιερό Ναό του χωριού  τραγουδώντας &amp;quot;Party for Everybody&amp;quot;. Και τα καταφέρνουν! &lt;/p&gt;

&lt;p&gt;Δεν ξέρω τι να σκεφτώ όταν κοιτάω τη Eurovision και βλέπω μια γιορτή της Ευρώπης που θέλουμε να έχουμε επενδυμένη με τόσο χάλια μουσική. &lt;/p&gt;

&lt;p&gt;Τραγικομωδία!&lt;/p&gt;
</description>
        <pubDate>Sun, 27 May 2012 16:16:43 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/rumblings/2012/05/27/europe-serious-sillines</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/rumblings/2012/05/27/europe-serious-sillines</guid>
      </item>
    
      <item>
        <title>Ruby performance improvements on Windows</title>
        <description>&lt;p&gt;Thanks to &lt;a href=&quot;http://twitter.com/#!/luislavena&quot;&gt;@luislavena&lt;/a&gt; I got wind of the &lt;a href=&quot;https://groups.google.com/forum/?fromgroups#!topic/thecodeshop/WVA4N2lJoM4&quot;&gt;1.9.3 TCS experimental build&lt;/a&gt;. The promise of faster File operations under Windows was too good to pass up.&lt;/p&gt;

&lt;p&gt;My by now legendary ( ;) ) build system (see &lt;a href=&quot;/2011/08/09/script-performance/&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;/software/2011/06/08/rake-performance-check-the-mirror/&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;/software/2011/05/20/rake-performance-sh-im-working/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;/software/2011/05/10/ruby-performance-what-a-difference-the-compiler-makes/&quot;&gt;here&lt;/a&gt; in reverse chronological order) is ideal as a realistic benchmark: It&amp;#39;s a production system that relies heavily on File operations, reading, writing files and manipulating paths by the thousands. On Windows!&lt;/p&gt;

&lt;p&gt;And it has a rather large performance-measuring test suite.&lt;/p&gt;

&lt;h3&gt;The environment&lt;/h3&gt;

&lt;p&gt;Everything runs within a Win7 32bit virtual machine with 2 logical cores and 3Gb of RAM hosted on Win7 64Bit on a quad core Dell Latitude with 8Gb RAM and a 7200 rpm spinning disk. I&amp;#39;ve gone to great lengths to ensure that all tests run under the same conditions (no other processes but VMWare Player, laptop plugged in, sources on the same revision etc.).&lt;/p&gt;

&lt;h3&gt;The tests&lt;/h3&gt;

&lt;p&gt;As stated, the system currently runs on 1.9.2p290. I cloned the VM twice and installed &lt;a href=&quot;http://rubyinstaller.org/downloads/&quot;&gt;1.9.3p194&lt;/a&gt; on one and the &lt;a href=&quot;https://github.com/thecodeshop/ruby/wiki/Downloads&quot;&gt;tcs-ruby193&lt;em&gt;require&lt;/em&gt;fenix&lt;em&gt;gc&lt;/em&gt;hash_20120413-2&lt;/a&gt; binary on the other. I then run my gem install scripts so that I had freshly compiled gems for each installation.&lt;/p&gt;

&lt;h3&gt;Results&lt;/h3&gt;

&lt;p&gt;The Y axis is seconds (yes, that&amp;#39;s an almost half hour build right there - I&amp;#39;d hung my head in shame if it wasn&amp;#39;t really monumental)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/193_performance.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The performance improvement that 1.9.3 offers is excellent. Across the board the average improvement from 1.9.2 is 18.7%.
This percentage is skewed by the long running builds that are unfortunately affected by the network (due to floating license servers) which might also explain the spike in task 13. For the short tasks that do only file manipulation, file I/O and data conversions the average improvement is over 40% (but with those tasks being short a good chunk is the improvement in require times).&lt;/p&gt;

&lt;p&gt;Tasks 4, 10, 13 and 14 are big, full builds that probably trigger the garbage collector but I can&amp;#39;t say for sure without instrumenting the code. 13 and 14 are also dependent on the networked license server and thus there&amp;#39;s an additional factor of unreliability there (builds were ran nights to minimize the danger of the license server croaking, but then there&amp;#39;s a host of servers doing nightly builds as well)&lt;/p&gt;

&lt;p&gt;The TCS ruby improves a further 9% on average over the 1.9.3 RubyInstaller but it fares worse on the big slow tasks that are most painful to my team.&lt;/p&gt;

&lt;p&gt;My &amp;quot;require&amp;quot; benchmark is rake -T (task #1) and for that the absolute numbers are 10.11s for 1.9.2, 5.37s for 1.9.3 and 4.87s for TCS. Active Record continues to be the worst offender here but the new require logic makes things bearable.&lt;/p&gt;

&lt;p&gt;Tasks 6 and 8 are IDE project creation tasks which means file generation using erubis templates with the content being FileList[] instances of manipulated pathnames. The TCS build blows everything out of the water here, being 20% faster than stock 1.9.3 which is in turn 20% faster then 1.9.2. That to me says one thing: &amp;quot;Please,please, &lt;strong&gt;please&lt;/strong&gt; merge the fenix patch into Ruby!&amp;quot;&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;If you &amp;#39;re still on 1.9.2 then you should switch to 1.9.3&lt;/strong&gt;. Performance is improved across the board.&lt;/p&gt;

&lt;p&gt;I won&amp;#39;t yet jump on the TCS bandwagon because of the performance lag in the long tasks but I think that the fenix patch should be merged into Ruby main, the numbers are simply so much better.&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Apr 2012 16:16:43 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2012/04/24/ruby-performance-improvements-on-windows</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2012/04/24/ruby-performance-improvements-on-windows</guid>
      </item>
    
      <item>
        <title>Dealing with cruft</title>
        <description>&lt;p&gt;Working to enhance a software team&amp;#39;s productivity is a never ending task with a very vague goal. &lt;/p&gt;

&lt;p&gt;It looks very bad on any burndown chart, task-based productivity report or velocity factor if you look at it on an individual basis. &lt;/p&gt;

&lt;p&gt;Jon Udell &lt;a href=&quot;http://blog.jonudell.net/2012/01/09/another-way-to-think-about-geeks-and-repetitive-tasks/&quot;&gt;posted an article&lt;/a&gt; with a sane viewpoint on the geek vs. others automation meme and I found the closing comment describes very nicely (part of) the role of a &amp;quot;productivity engineer&amp;quot;&lt;sup&gt;1&lt;/sup&gt;:&lt;/p&gt;

&lt;p&gt;&amp;quot;&lt;em&gt;In this view of the world, tasks that involve data manipulation (as so many modern chores do) are undertaken by teams. There is an infinite supply of manual chores. Everybody tackles them. Ideally there is one member of the team I call the toolsmith. Working shoulder to shoulder with the team, the toolsmith spots an opportunity to automate some piece of the work, writes some code, deploys it, observes how it gets used (or doesn’t get used), assesses its impact (or lack of impact), and then iterates on the code. Meanwhile the toolsmith keeps working alongside the team, chipping away at the never-ending and always-evolving list of manual chores, looking for more opportunities to automate, and exploiting them in an incremental and collaborative way.&lt;/em&gt;&amp;quot;&lt;/p&gt;

&lt;p&gt;There comes a point where the collection of automation utilities becomes cumbersome. Since currently I am deep in build systems and rake I see the same effect in the number of tasks that become available as we add automation steps and combinations of steps targeted at different workflows within our project (i.e. flashing the target when developing, debugging or testing).&lt;/p&gt;

&lt;p&gt;In some cases you start thinking about &lt;del&gt;object&lt;/del&gt;task hierarchies.
In other cases things are superseded by newer functionality or the developers adopt a different/quicker/more productive workflow along the iterative process that is a software project.&lt;/p&gt;

&lt;p&gt;In my own mind the system code just grows old. It can grow old with me - which just means I can read the code without retching and it will continue to work as wished - or grow old without me, in which case it becomes a grumpy, needy old man with a grudge and a cane to hit me with whenever I want to change something.&lt;/p&gt;

&lt;p&gt;So how do you grow old in health and good spirits? You need exercise, regular checkups and some preventive medicine.&lt;/p&gt;

&lt;h3&gt;As an example...&lt;/h3&gt;

&lt;p&gt;Imagine a large build system built with rake. Something to the tune of ~8K lines of Ruby, with a lot of tasks controlling every aspect of software development from compiling and linking to document generation, documentation, release mechanics, metrics collection and automated testing.&lt;/p&gt;

&lt;p&gt;Although not the traditional software example, such a system exhibits a compressed timeline of the code lifecycle especially where the build up of cruft and the speed with which parts of the code become obsolete are concerned so it serves really well for this article. And no it&amp;#39;s not just because that&amp;#39;s all I have been doing lately and I have nothing more interesting to talk about&lt;sup&gt;2&lt;/sup&gt;.&lt;/p&gt;

&lt;h3&gt;Exercise&lt;/h3&gt;

&lt;p&gt;Code that does not run grows old really fast. The easiest way to keep up is to have tests. Without them large chunks of code fall into obscurity, things start breaking in tasks of &amp;quot;secondary importance&amp;quot; (i.e. documentation generation vs. system build). &lt;/p&gt;

&lt;p&gt;100% test coverage is an ultimately useless effort but you do need enough so that most of your code gets exercised and you have to test all of the entry points to the system.&lt;/p&gt;

&lt;h3&gt;Regular checkups&lt;/h3&gt;

&lt;p&gt;So you have collected all this code but do you actually need it? &lt;/p&gt;

&lt;p&gt;Collect usage metrics - which tasks are called, how often etc. There is a misconception that this needs to be done automatically and it sure is an efficient way but going around and interviewing your users/developers also works. It depends on your system.&lt;/p&gt;

&lt;p&gt;Sometimes interviewing actually works better as you discover or point out new ways of doing things. Actual human communication goes a long way towards assuring that your software actually does what your users want it to do, which I guess is the whole point behind agile methodologies.&lt;/p&gt;

&lt;p&gt;Visualization techniques are also very useful in uncovering forgotten corners, complex dependencies or optimization opportunities. Having a graph of tasks and dependencies works much better than staring at several pages of code. Then you can go around, paper in hand, and literally point and ask &amp;quot;do you actually use this?&amp;quot;&lt;sup&gt;3&lt;/sup&gt;&lt;/p&gt;

&lt;h3&gt;Preventive medicine&lt;/h3&gt;

&lt;p&gt;Sometimes your checkups will uncover things that have been left to rot. The only way to deal with them is to take a scalpel to them.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Do not be afraid to throw away code!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Armed with the information your checkups provide, together with the tests, you should be confident enough to trim down the fat and keep that old code lean and healthy.&lt;/p&gt;

&lt;h3&gt;Nothing new under the sun&lt;/h3&gt;

&lt;p&gt;When expressing a metaphor on caring about and for your code I realize belatedly that I&amp;#39;m not saying anything about software development that has not been included in iterative, test driven - agile if you want - development practices. &lt;/p&gt;

&lt;p&gt;But I&amp;#39;m talking about automation and development infrastructure, tools and scripts! The quick and dirty hacks you throw together so that you can then get on with the real work. &lt;/p&gt;

&lt;p&gt;You&amp;#39;re going to have a &lt;em&gt;very&lt;/em&gt; grumpy old man if you don&amp;#39;t treat your development environment as it should be treated: just like another &lt;a href=&quot;/software/2011/02/04/managing-your-development-environment/&quot;&gt;software project&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt;I really hate the term. I wish I could find something that sounds cooler and conveys the role of a software engineer that enables his/her team to work faster, with greater efficiency and less hassle, bringing enjoyment into the workplace. Productivity engineer just conjures the image of a suited consultant gaming the numbers. Toolsmith is too narrow a term as you tend to work on process as much as tools.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt;And I take offence at even the suggestion that such a system is not interesting/cutting edge/insert-cool-term-here.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;3&lt;/sup&gt;In Ruby the graph gem is a very useful resource and for rake systems that use less crazy dynamic task creation than mine it comes with a script to plot a graph of tasks off the shelf.&lt;/p&gt;
</description>
        <pubDate>Wed, 18 Apr 2012 16:16:43 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2012/04/18/dealing-with-cruft</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2012/04/18/dealing-with-cruft</guid>
      </item>
    
      <item>
        <title>rake dynamic prerequisites</title>
        <description>&lt;p&gt;There&amp;#39;s a behaviour in rake I keep stumbling on. It&amp;#39;s the inability to dynamically add prerequisite tasks on a task from one of it&amp;#39;s prerequisites.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve used this gist a couple of times now: &lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/847273.js?file=rakefile&quot;&gt; &lt;/script&gt;

&lt;p&gt;I&amp;#39;m pretty sure the first time I actually stumbled on this was &lt;a href=&quot;http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/159167&quot;&gt;sometime in 2005&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Why?&lt;/h3&gt;

&lt;p&gt;The output from the rakefile above is 
&lt;script src=&quot;https://gist.github.com/847273.js?file=output&quot;&gt; &lt;/script&gt;
when, if the dependency tree was built dynamically, &amp;#39;c&amp;#39; should pop up before &amp;#39;a&amp;#39;:
&lt;script src=&quot;https://gist.github.com/847273.js?file=outut%20as%20it%20should%20be&quot;&gt; &lt;/script&gt;
Why would you need this you will ask?&lt;/p&gt;

&lt;p&gt;Well, it helps to do things like &lt;code&gt;task :build =&amp;gt; :determine_sources&lt;/code&gt; instead of &lt;code&gt;task :build =&amp;gt; determine_sources()&lt;/code&gt; and avoid the performance hit of scanning for dependencies before you actually call the task.&lt;/p&gt;

&lt;p&gt;This improves rake responsiveness which has a positive effect on team moral (no kidding, this is important!)&lt;/p&gt;

&lt;p&gt;The workaround is to calculate all dependencies for all tasks when the rakefile loads and it does not scale.&lt;/p&gt;

&lt;p&gt;Case in point: Currently our rakefile builds a C system with a changing number of small applications. Manually adding tasks for every new application costs too much so it is done automatically. Because no dynamic prerequisites are allowed, the method that creates the tasks also needs to scan the source and determine the complete dependency tree for every app task.&lt;/p&gt;

&lt;p&gt;This adds unnecessary delays in rake&amp;#39;s startup. As we usually only call one build task we only need to calculate the dependencies for that one task (this is actually done but with a whole bunch of code that essentially controls task creation based on the task called and it is fragile and prevents us from calling multiple tasks in the same command line - basically it&amp;#39;s a hack)&lt;/p&gt;

&lt;h3&gt;Put your money...&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/damphyr/rake/commit/609ca3b434a7ff6689ca476a9ee5d7d22437042a&quot;&gt;patch&lt;/a&gt; is actually trivial, a two line change in lib/rake/task.rb in the invoke_prerequisites method&lt;sup&gt;1&lt;/sup&gt;.&lt;/p&gt;

&lt;h3&gt;Where&amp;#39;s the catch?&lt;/h3&gt;

&lt;p&gt;Well, this actually only works if a prereq is changing the prerequisite list it is a member of. Anything else is dependent on the sequence the tasks appear in the prerequisites list and has unexpected results.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s also the slight delay introduced by iterating over the prerequisites again, but this barely registers compared with the actual task invocation times.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; And yet it took me almost 7 years to fix. Talk about procrastination...&lt;/p&gt;
</description>
        <pubDate>Fri, 13 Jan 2012 15:16:43 +0100</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2012/01/13/rake-dynamic-prerequisites</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2012/01/13/rake-dynamic-prerequisites</guid>
      </item>
    
      <item>
        <title>Poor man's test parallelism</title>
        <description>&lt;h3&gt;Problematic luxury&lt;/h3&gt;

&lt;p&gt;Recently in our current project we ran up against a luxury problem: The number of our tests has grown so much that it became unfeasible to let them run on a per-commit basis.&lt;/p&gt;

&lt;p&gt;There are also so called &amp;#39;long running&amp;#39; tests that test processes with a standard duration of several minutes&lt;sup&gt;1&lt;/sup&gt;. We actually want to run all tests on all builds but we were faced with a few hurdles.&lt;/p&gt;

&lt;p&gt;The build used for the tests is &lt;strong&gt;big&lt;/strong&gt; - meaning it contains the whole system and thus has the slowest build times. Running the tests in the same build job only exasperates the problem blowing the self-imposed 10 minute limit sky high.&lt;/p&gt;

&lt;p&gt;Currently the &amp;quot;monster&amp;quot; build (all platforms, all components) clocks in at ~30 minutes under high load or ~12 minutes if it gets the build server to itself&lt;sup&gt;2&lt;/sup&gt;. The build required for tests comes second at ~8 minutes.&lt;/p&gt;

&lt;h3&gt;Throw hardware at the problem&lt;/h3&gt;

&lt;p&gt;The conventional approach fits our problem well: Split the tests in separate test suites and throw hardware at the problem. Since we are using VMs for our development environment it is actually very easy to instantiate a VM for every test suite and let the testing commence in parallel (for other reasons we cannot run test suites in parallel in the same VM).&lt;/p&gt;

&lt;p&gt;Where it gets a bit complicated is coordinating the builds and the tests. We use &lt;a href=&quot;http://jenkins-ci.org/&quot;&gt;Jenkins&lt;/a&gt; for build management and 
it is feasible to create a master-slave configuration feeding the build package to the test jobs but it still strikes me as unnecessarily complicated&lt;sup&gt;3&lt;/sup&gt;. &lt;/p&gt;

&lt;p&gt;It also means that the data on the dependencies between the different build jobs is distributed in the Jenkins instances. I have a particular aversion to this type of configuration: ideally any job management system should be able to function without built-in knowledge of it&amp;#39;s place in the system. It just needs to know where to go for the information and we get to manage it centrally&lt;sup&gt;4&lt;/sup&gt;.&lt;/p&gt;

&lt;h3&gt;What do you actually want?&lt;/h3&gt;

&lt;p&gt;In order to kick off the tests all we need is a URL pointing to the build package and a bit of metadata, in this case the revision the build corresponds to.&lt;/p&gt;

&lt;p&gt;Once the tests are executed we need to know the status of the tests for the revision and a URL pointing to the detailed logs.&lt;/p&gt;

&lt;p&gt;Given that we want to test all change sets and that test suites have greatly varying execution times we want to know as soon as possible which revision breaks a test suite...per test suite.&lt;/p&gt;

&lt;h3&gt;Please join the queue in an orderly fashion&lt;/h3&gt;

&lt;p&gt;So we want to distribute one build to N testers without knowing when they are going to be available to process it. Sounds like a background job thingy doesn&amp;#39;t it?&lt;/p&gt;

&lt;p&gt;Setup a queue for each tester, publish the build information (URL &amp;amp; revision) and let the tester grab the build and do it&amp;#39;s thing. Fire and forget!&lt;/p&gt;

&lt;p&gt;This type of job processing is bread and butter for web applications and there&amp;#39;s a lot of libraries/systems that do this: &lt;a href=&quot;https://github.com/defunkt/resque&quot;&gt;resque&lt;/a&gt;, &lt;a href=&quot;http://agilewebdevelopment.com/plugins/bj&quot;&gt;BackgroundJob&lt;/a&gt;, &lt;a href=&quot;https://github.com/tobi/delayed_job&quot;&gt;DelayedJob&lt;/a&gt; etc.&lt;/p&gt;

&lt;p&gt;Still too complicated. You need Redis, or Rails, or some SQL database or you&amp;#39;re tied to a POSIX OS&lt;sup&gt;5&lt;/sup&gt;. You get all kinds of goodies like priority scheduling, persistence and monitoring (Resque is my particular favorite with the nifty web GUI) but honestly this is the best case of YAGNI I have yet encountered.&lt;/p&gt;

&lt;h3&gt;Not created here&lt;/h3&gt;

&lt;p&gt;Why can&amp;#39;t I find something simple, with minimal dependencies that will run everywhere? Probably because it takes less time to built it than to look for it! &lt;/p&gt;

&lt;p&gt;Take &lt;a href=&quot;http://www.sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt; and Ruby&amp;#39;s built-in Queue class, sprinkle some JSON and you get &lt;a href=&quot;https://github.com/damphyr/rplex&quot;&gt;rplex&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;How it works&lt;/h3&gt;

&lt;p&gt;The rplex service waits. In Jenkins at the end of the build we simple post the data to rplex.&lt;/p&gt;

&lt;p&gt;On the tester side an endless loop (implemented in Rplex::Processor) runs the tests whenever a build appears.&lt;/p&gt;

&lt;p&gt;How do we get the test results? Same concept: At the end of the test run we post the data back to rplex, this time targeting a single rplex client. That process just updates our information radiator.&lt;/p&gt;

&lt;h3&gt;Simple complexity&lt;/h3&gt;

&lt;p&gt;We have a whole bunch of rplex clients now but nowhere near the maintenance overhead of Jenkins jobs. The process looks like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start a VM&lt;/li&gt;
&lt;li&gt;Start the rake task with the Rplex::Processor&lt;/li&gt;
&lt;li&gt;Do something else&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fiddling with the data format allows us to do everything we need without touching rplex. If we get a huge backlog for slow test suites we simply restart rplex and empty the queues&lt;sup&gt;6&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Come to think of it, I could replace Jenkins completely using rplex as the core...hmmmm!&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; We&amp;#39;re talking integration and system tests here. Where unit tests are concerned we exert draconian control to ensure fast build times.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt; Network based license schemes for compilers suck big time!&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;3&lt;/sup&gt; Some initial problems with setting up master-slave in Jenkins with our firewall and network zone configuration did not help.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;4&lt;/sup&gt; Which means we get to version control a single source of configuration and handle redundancy by cloning instances.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;5&lt;/sup&gt; Oh Windows! Thou art the bane of my developer life!&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;6&lt;/sup&gt; While in theory you would not want to leave any build untested when development is in full swing and you get 5 or 10 patches in the space of 5 minutes - just because somebody was careless - you only care about the last one.&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Jan 2012 15:16:43 +0100</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2012/01/03/poor-mans-test-parallelism</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2012/01/03/poor-mans-test-parallelism</guid>
      </item>
    
      <item>
        <title>Επιλεκτικότητα</title>
        <description>&lt;p&gt;Μερικές φορές (...τις νύχτες περνάς σε κλειστά club της συμφοράς - συγχωρήστε με, αλλά είναι καταναγκαστικό το συμπλήρωμα του στίχου).
Αλλά παρεκλίνω πριν καν αρχίσω. Θα είναι όμως δύσκολο να βγει νόημα από το παρακάτω παραλλήρημα.&lt;/p&gt;

&lt;p&gt;Η &amp;quot;κρίση&amp;quot; - και γιατί την βάζεις θα μου πεις σε εισαγωγικά; Θα τη βάλω σε εισαγωγικά γιατί όταν μιλάει κανείς για &amp;quot;κρίση&amp;quot; περιορίζεται στην οικονομική της πλευρά, ένα κομμάτι που ολοένα και περισσότερο μου μοιάζει φτιαχτό, ψευδές, ένας αντιπερισπασμός απέναντι στην γενική πραγματικότητα.&lt;/p&gt;

&lt;p&gt;Η πραγματική κρίση, αυτή της έλλειψης ιδεών, του ατομικισμού, της κοινωνικής αποσύνθεσης, της παντελούς έλλειψης παιδείας, η κρίση της κοινής λογικής δεν μας προέκυψε ξαφνικά. Βλέπουμε το αναπόφευκτο αποτέλεσμα μιας μακροχρόνιας πορείας απαξίωσης και ωχαδερφισμού. Και όταν για τη γενιά μου και τους νεότερους (δλδ το 70% του πληθυσμού) αυτή η κατάσταση ήταν φυσιολογική δεν μπορώ να μιλάω για κρίση. Εξού και τα εισαγωγικά.&lt;/p&gt;

&lt;p&gt;Οι σπασμωδικές ενέργειες του κατεστημένου αναβιώνουν και ενισχύουν τις συμπεριφορές του παρελθόντος και με τη σειρά τους ενισχύουν τη βιαιότητα των αντιδράσεων σε έναν ατέρμονο φαύλο κύκλο.
Ναι, αναφέρομαι στις συλλήψεις νεαρών από την αστυνομία, τον ξυλοδαρμό τους &lt;em&gt;μετά&lt;/em&gt; τη σύλληψη και την κατασκευή - γιατί δεν μπορεί να χαρακτηριστεί αλλιώς - κακουργηματικού κατηγορητηρίου.&lt;/p&gt;

&lt;p&gt;Είναι αυτό το μεικτό συναίσθημα οργής και έκπληξης μπροστά στην ανείπωτη αμάθεια και βλακεία. Αυτό που με κάνει να φωνάζω &amp;quot;μα καλά ρε όρνια, πότε σε ολόκληρη την ιστορία της ανθρωπότητας έχει επιφέρει η καταστολή τίποτα περισσότερο από βραχυπρόθεσμα αποτελέσματα; Πόσο Μ****ΚΕΣ πρέπει να είστε ώστε να μη βλέπετε ότι το μοναδικό αποτέλεσμα είναι η υπονόμευση του μέλλοντος όταν χώνετε 15χρονα στη φυλακή με το έτσι θέλω. Το δικό σου το ζαγάρι δλδ. είναι προστατευμένο;&amp;quot;&lt;/p&gt;

&lt;p&gt;Αλλά εξακολουθώ να παρεκλίνω. Παρακολουθώ τις εξελίξεις, μεταβιβάζω ειδήσεις, σχηματίζω γνώμη, όλα μέσα από ένα κύκλο ανθρώπων και μέσων προσεκτικά επιλεγμένων.
Μια πολύ λεπτη ισορροπία ανάμεσα στην σωστή ενημέρωση, την προστασία (ψυχολογική και ψυχική), την απομόνωση και την εθελοτυφλία. &lt;/p&gt;

&lt;p&gt;Είναι πολύ εύκολο να κρυφτείς στο κύκλο των γνωστών και φίλων, των ιδεολογικών συνοδοιπόρων. Κάπως έτσι κόντεψε να μου ξεφύγει το γεγονός ότι υπάρχουν άνθρωποι που δυσανασχετούν για το #freemenacius και την έκφραση κοινής λογικής που συνοδεύει την αδρανειακή αντίδραση ενός πανικόβλητου κατεστημένου.&lt;/p&gt;

&lt;p&gt;Ειλικρινά, δεν θέλω να ασχοληθώ. Προτιμώ, σαφώς προτιμώ, τη θετική αποδοχή ομοϊδεατών. Προτιμώ να κουνάω το κεφάλι καταφατικά, να μη συναντώ αντίλογο. Είναι πιο εύκολο. Ακόμα πιο εύκολο είναι να τα κόψω τελείως τα νέα, να απαλλαγώ επιτέλους από αυτή τη μαυρίλα, την κατάθλιψη και την απαισιοδοξία. Η κοινή λογική όμως λέει ότι αυτό είναι στρουθοκαμηλισμός.&lt;/p&gt;

&lt;p&gt;Και στο τέλος η παράνοια και ο αντίλογος θα εισβάλλουν και στον μικρό κύκλο προστασίας που τόσο προσεκτικά έχω κτίσει. Check mate.&lt;/p&gt;

&lt;p&gt;Εσύ που πιστεύεις ότι καλά τους κάνανε, εσύ που ζεις με το megamou και θα μου παπαγαλίσεις την τελευταία έκδοση του τηλεοπτικού λάβδανου, βγες άνθρωπε μου από το καβούκι σου. Κοίτα γύρω σου, μπορεί εσένα να μη σε αγγίζει ακόμα, αλλά ρε φίλε, θα σε φτάσει κι εσένα, όποιος κι αν είσαι.&lt;/p&gt;

&lt;p&gt;Το ξέρω ότι φοβάσαι. Είναι φυσιολογικό όταν υπάρχει τέτοια ανισότητα. Φοβάσαι όσο είσαι από πάνω, φοβάσαι να μιλήσεις μήπως και χάσεις τα προνόμια. Φοβάσαι μήπως βρεθείς από κάτω.&lt;/p&gt;

&lt;p&gt;Ω, το ντύνεις με &lt;a href=&quot;http://news.radiobubble.gr/2011/12/blog-post_08.html?spref=tw&quot;&gt;&amp;quot;συμβαίνουν αυτά&amp;quot;&lt;/a&gt;, με &amp;quot;δε πειράζει μωρέ&amp;quot;, με &amp;quot;αλβανούς&amp;quot; , με &amp;quot;ρώσους&amp;quot;,  με &amp;quot;αναρχικούς&amp;quot; μα δεν παύει να είναι φόβος. &lt;/p&gt;

&lt;p&gt;Το ξέρω, γιατί είμαι κι εγώ σαν κι εσένα. Αλλά το ίδιο είναι και ο @menacius και τα παιδιά που ξενυχτάνε στη ΓΑΔΑ. Όλοι μας το ίδιο είμαστε και αν δε σηκώσεις το κεφάλι αύριο θα είσαι εσύ στη θέση τους...&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Dec 2011 15:16:43 +0100</pubDate>
        <link>http://www.ampelofilosofies.gr/rumblings/2011/12/09/epilektikotita</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/rumblings/2011/12/09/epilektikotita</guid>
      </item>
    
  </channel>
</rss>