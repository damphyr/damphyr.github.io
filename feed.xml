<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ampelofilosofies</title>
    <description>Random comments on random subjects in random language</description>
    <link>http://www.ampelofilosofies.gr</link>
    <atom:link href="http://www.ampelofilosofies.gr/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Published author...sort of</title>
        <description>&lt;p&gt;In the past year a group of Zühlke coleagues led by &lt;a href=&quot;https://twitter.com/sypounentes&quot;&gt;Christian Abegg&lt;/a&gt;  and &lt;a href=&quot;https://twitter.com/peitor&quot;&gt;Peter Gfader&lt;/a&gt; put together a collection of articles about things we consider important with the aim of publishing them as a book.&lt;/p&gt;

&lt;p&gt;That book is finally out!&lt;/p&gt;

&lt;p&gt;The official blurb is&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In «Machines – Code – People» readers learn about best practices, cultural philosophies, great ideas and practically proven concepts. In 50 short articles Zühlke engineers share what they are passionate about. You will find many useful tips from various areas of today’s tech industry. The range of topics covered includes the latest technical developments as well as collaboration topics and individual values and techniques.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can buy the dead tree version on &lt;a href=&quot;https://www.amazon.de/Machines-Code-People-engineers-passionate/dp/3748141181/ref=sr_1_1?__mk_de_DE=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;keywords=machines+code+people&amp;qid=1561359217&amp;s=gateway&amp;sr=8-1&quot;&gt;Amazon&lt;/a&gt;, you can browse it for free &lt;a href=&quot;https://zuehlke.github.io/machines-code-people/&quot;&gt;online&lt;/a&gt; or download one of the &lt;a href=&quot;https://zuehlke.github.io/machines-code-people/articles/preface.html&quot;&gt;e-book versions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I consider this a 70% step to crossing &amp;quot;be a published author&amp;quot; off the bucket list.&lt;/p&gt;

&lt;p&gt;I am especially proud, not just because of my article in the book (it is an edited version of the &lt;a href=&quot;/software/2014/07/17/vars-build-rules&quot;&gt;build rules&lt;/a&gt; post in this blog) but because I came up with a title the rest of the company found cool.&lt;/p&gt;

&lt;p&gt;Taken verbatim from our internal discussion when deciding on the title:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It alludes (admittedly over-simplified, but what do you expect from a title) to the course Zuehlke has taken over the 50 years of its history: From building machines and electronics, to adding software and processes (code), innovation and business consulting which is ultimately people.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It also works as the three things we do best (if you put the people in the context of working with the machines and code ;) ).&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Jun 2019 14:15:21 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2019/06/26/published-author</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2019/06/26/published-author</guid>
      </item>
    
      <item>
        <title>Adventures in Azure DevOps: I git too fast</title>
        <description>&lt;p&gt;I like keeping the number of commits in my pull requests in the low single digits, preferably 1. For context see the post on my &lt;a href=&quot;/software/2019/06/18/disaster-resistant-git&quot;&gt;disaster resistant git workflow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I used to do all the work, squashing the commits at the end of the work before merging my pull requests but recently I have switched to using &lt;code&gt;git commit --amend&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The reason for this is that while I have noticed that I rarely need to re-arrange my commits in logical groups when squashing (call it a benefit of experience - it certainly was not like this years ago), I make a lot of typing and syntax errors.&lt;/p&gt;

&lt;p&gt;As a result my typical change originally looks like&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;c31e548 Some informed and wise comment on the change
dfdfd15 typo
d19f4f1 typo
7122e4a typo fix
a62803a syntax fix
53b99b8 dammit
c657575 why didn't this work?
d8e72cf doh, PEBKAC
5017515 what an idiot
59c53d1 stupid semicolon
db6aa1c I hate ...
47d3dc7 AAAARGH
4640d92 done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Previously I would be kind and squash, but you could follow everything in the pull request notifications. &lt;code&gt;--amend&lt;/code&gt;allows me to appear infalible :D.&lt;/p&gt;

&lt;p&gt;As an added optimization (remember, I usually do builds and CI and stuff like that - my code does not need the CI, it IS the CI) I recently added an alias to my collection:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config alias.cowboy
&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;--amend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As a measure of sparing me a few keystrokes it is great (remember, I typo &lt;strong&gt;a lot&lt;/strong&gt;). As a practice it is questionable, but see in which context it is used in the aforementioned git workflow post.&lt;/p&gt;

&lt;p&gt;Funnily, in Azure Devops I get to trip myself up with this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/git-too-fast.png&quot; alt=&quot;Checkout error&quot;&gt;&lt;/p&gt;

&lt;p&gt;Today I started with builds failing on checkout, which was wierd.&lt;/p&gt;

&lt;p&gt;Looking closer it gets momentarily even wierder:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;fatal: reference is not a tree
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;What happened&lt;/h2&gt;

&lt;p&gt;Basically my cowboy ways pulled the rug from under git&amp;#39;s feet.&lt;/p&gt;

&lt;p&gt;What you see is a live demostration of the dangers of rewriting history in git.&lt;/p&gt;

&lt;p&gt;The build is setup with a stage of 5 jobs but for the moment we only have a pool of 2 agents. So if I catch my typo fast enough and play the cowboy card the running build will try to get a SHA that does not exist anymore.&lt;/p&gt;

&lt;p&gt;No harm done other than a negative skew on my successfull build percentage.&lt;/p&gt;

&lt;p&gt;Everything is fine, we&amp;#39;re all professionals here.&lt;/p&gt;
</description>
        <pubDate>Tue, 18 Jun 2019 16:15:21 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2019/06/18/azure-devops-git-too-fast</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2019/06/18/azure-devops-git-too-fast</guid>
      </item>
    
      <item>
        <title>Disaster-resistant git</title>
        <description>&lt;p&gt;Over the years I have developed a very disaster-resistant git workflow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Change to open-ended branches (master, develop, releases etc.) is always via pull requests.&lt;/li&gt;
&lt;li&gt;Force push is blocked on all open branches.&lt;/li&gt;
&lt;li&gt;All changes happen in a branch, no matter how small.&lt;/li&gt;
&lt;li&gt;Branch is always rebased onto its PR target, never merged.&lt;/li&gt;
&lt;li&gt;Merge strategy is usually rebase and --no-ff.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That last one is more a cosmetic preference: In projects with big teams and complex structures/systems it is easier to track the sequence of introduction of the changes via the merge nodes.
For the rest of this post when you see &amp;#39;branch&amp;#39; it means a branch that will eventually be merged into another as opposed to an &amp;quot;open-ended&amp;quot; branch like &lt;em&gt;master&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;The problem is merging&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;There is a beast at the end of most branches and it is called Merge. It strikes fear in the hearts of all programmers and only a special few dare face it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Its most powerful weapon, the razor sharp Merge Conflicts will shred your intellect to pieces in a single stroke, leaving you wandering aimlesssly in a sea of Code.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The beast grows more powerful with Time. Enough Time passes and it will be invincible.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It feeds on Code, give it enough and it will be invincible.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Dealing with merge conflicts&lt;/h2&gt;

&lt;p&gt;The fear of merges and merge conflicts usually develops when someone attempts to merge a branch that contains too many changes and has been growing over a long time (from days to weeks, it depends on your team&amp;#39;s velocity - I once had to merge one that was almost a year old, in svn no less - true story, not fun).&lt;/p&gt;

&lt;p&gt;When encountering a merge conflict, the human algorithm is as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Have I changed the file?

&lt;ul&gt;
&lt;li&gt;Yes: I know how to resolve the conflict because I know what I wanted to do.&lt;/li&gt;
&lt;li&gt;No: Take the other version.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After finishing the merge, always check the resulting diff, since sometimes the automatic merge algorithm will produce changes that are logically faulty (i.e. you can get buggy code or non-sensical content that merges fine).&lt;/p&gt;

&lt;p&gt;In a long-running branch with a lot of changes I simply do not know enough to resolve the conflict, either because multiple people are involved or because I have forgotten over time. Now I have to reconstruct the context while merging or quit.&lt;/p&gt;

&lt;p&gt;Also, in a long chain of commits I really have no idea how to resolve a conflict in a commit in the middle of the chain - I have often had to resolve a conflict in a long commit chain that was reverted in a later commit.&lt;/p&gt;

&lt;p&gt;Never mind checking the diff when it is 50 files and a couple of thousand LOCs.&lt;/p&gt;

&lt;p&gt;This is reason number one against feature branches - too much, left for too long.&lt;/p&gt;

&lt;p&gt;So there are guidelines:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Branches need to be short-lived&lt;/li&gt;
&lt;li&gt;Keep the diff small&lt;/li&gt;
&lt;li&gt;Keep the number of commits small to very small&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As always, one-line guidelines require ellaboration.&lt;/p&gt;

&lt;h2&gt;Branch lifetime&lt;/h2&gt;

&lt;p&gt;Short-lived, when we define it in time, is unfortunately a very fuzzy term. You will find advice like &amp;quot;no more than a day&amp;quot; and other equally arbitrary terms.&lt;/p&gt;

&lt;p&gt;This guideline is the one I see teams ignoring most often. And as long as the rest are followed, with little or no consequences if we want to be honest.&lt;/p&gt;

&lt;p&gt;As long as you remember what the change is - the context and the goal as well - the branch is not old.&lt;/p&gt;

&lt;p&gt;Time alone is not a good criterion. Measuring distance from your target branch in LOCs (the size of the diff) or number of commits is a better indicator of staleness and your chances of encountering the Merge Beast.&lt;/p&gt;

&lt;h2&gt;Diff size&lt;/h2&gt;

&lt;p&gt;IM(NSH)O this is the really critical factor. In order to satisfy the conflict resolution algorithm I need to know about the change. The bigger it is, the more difficult the task.&lt;/p&gt;

&lt;p&gt;Another factor is senseless diff bloat like whitespace changes or stylistic changes. Treat them like a self-contained change. Do not mix them with logic changes. If you need to change the style, the identation size, tabs to spaces etc. then &lt;strong&gt;do it in a separate branch&lt;/strong&gt; and PR.&lt;/p&gt;

&lt;p&gt;Better yet, auto-format on commit (a man can have whishes!).&lt;/p&gt;

&lt;p&gt;In practice, keep the list of changed files to a minimum and the LOC size per file small. In other words, keep your PR diff view clean.&lt;/p&gt;

&lt;h2&gt;Number of commits&lt;/h2&gt;

&lt;p&gt;For a long time I was of the &amp;#39;small commits, discrete steps towards the solution&amp;#39; school. Each commit should do one thing and my commits are structured and commented in such a way as to present the reviewer with my path towards the solution.&lt;/p&gt;

&lt;p&gt;This is a brilliant approach if you are creating a workshop or you are teaching.&lt;/p&gt;

&lt;p&gt;In the real world we are interested in the solution. We&amp;#39;re a team of software developers, we have trust in our abilities to grasp small to medium globs of code. And in practice we use the pull request forms to do the work. So at work the unit of change is the pull request, not the commit.&lt;/p&gt;

&lt;p&gt;The unspoken assumption is that I have broken my user stories down to manageable pieces and do not improvise a redesign while writing the code.
Keep the number of commits low (single digit number), ideally bring it down to 1.&lt;/p&gt;

&lt;p&gt;How many commits away you are from master is a good indicator of how stale your branch is. This is easily solved with a routine of regular rebasing. Regular as in &lt;em&gt;at least once a day&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;How many commits you have in your branch is a good indicator of the amount of trouble you will be when merging. And since rebasing is the same as merging in this aspect, how difficult your daily routine will be.&lt;/p&gt;

&lt;p&gt;Setting &lt;a href=&quot;https://git-scm.com/docs/git-rerere&quot;&gt;rerere&lt;/a&gt; in the git configuration simplifies repeated rebases but it is a setting that has to be used with caution.&lt;/p&gt;

&lt;h2&gt;Side notes&lt;/h2&gt;

&lt;p&gt;There are some points that might be obvious to some:&lt;/p&gt;

&lt;p&gt;Doing all changes in branches &lt;em&gt;localizes&lt;/em&gt; your conflict resolution algorithm to the branch. It provides a necessary restriction of context that removes &lt;strong&gt;a lot&lt;/strong&gt; of overhead. It is &lt;em&gt;your&lt;/em&gt; change you need to care about.&lt;/p&gt;

&lt;p&gt;This means that branch constructs like the one used by git flow where &lt;em&gt;develop&lt;/em&gt; is merged into &lt;em&gt;master&lt;/em&gt; cannot be easily supported like this.&lt;/p&gt;

&lt;p&gt;A PR workflow following the guidelines faithfully is like a discrete time simulation of trunk-based development with the steps being the merge nodes. The smaller the blocks (i.e. number of commits), the closer we are to trunk-based. Remove the --no-ff from the merge strategy and the distinction dissappears in the end result.&lt;/p&gt;

&lt;p&gt;Larger changes (of which the most common type we call &amp;#39;features&amp;#39;) require conscious design.
In my experience, teams fall prey to the Merge Beast because they lack ways to incrementally introduce changes or have been given user stories that are too vague or too big. This is not a git related subject, don&amp;#39;t blame the tool.&lt;/p&gt;
</description>
        <pubDate>Tue, 18 Jun 2019 14:15:21 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2019/06/18/disaster-resistant-git</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2019/06/18/disaster-resistant-git</guid>
      </item>
    
      <item>
        <title>Adventures in Azure DevOps: iOS secrets</title>
        <description>&lt;p&gt;This new-fangled (&lt;em&gt;sic&lt;/em&gt;) mobile app development thing, I tell you. I have been hearing stories, horror stories.&lt;/p&gt;

&lt;p&gt;For example, the &amp;quot;certificates for iOS applications&amp;quot; story. Pure horror. Grey hair overnight, stuff of nightmares.&lt;/p&gt;

&lt;p&gt;And then they tell you you have to build these things in the cloud, on disposable VMs.&lt;/p&gt;

&lt;p&gt;I have a rule when setting up projects for teams that aspire to the DevOps tag:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Just the repository&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I should be able, with just the contents of the repository, to reconstruct the project, inclusive of development environment, production setup and released artifacts.&lt;/p&gt;

&lt;p&gt;I will accept one exception to this rule and this is &lt;strong&gt;secrets&lt;/strong&gt;. Under no circumstances should any type of secret, be that password, private key or certificate, end up in the repository.&lt;/p&gt;

&lt;p&gt;At least that is the theory. To swing back to the title subject, handling of certificates in iOS app compilation has broken this rule in &lt;em&gt;every single project&lt;/em&gt; I have seen to date. Admittedly, that number is in the low double digits.&lt;/p&gt;

&lt;p&gt;Typically there will be a chosen deployment profile to be added to the repo for CI purposes and we will trust on the privacy of the repo, or the eventual expiration of the certificates.&lt;/p&gt;

&lt;p&gt;So, finding out that Azure DevOps explicitly caters to exactly this case within the build pipelines is a very nice surprise.&lt;/p&gt;

&lt;p&gt;Since the 2018 version there is a &lt;a href=&quot;https://docs.microsoft.com/en-gb/azure/devops/pipelines/tasks/utility/install-apple-provisioning-profile?view=azure-devops&quot;&gt;dedicated task (InstallAppleProvisioningProfile)&lt;/a&gt; for Apple provisioning profiles.&lt;/p&gt;

&lt;p&gt;This is based on the &lt;a href=&quot;https://docs.microsoft.com/en-gb/azure/devops/pipelines/library/secure-files?view=azure-devops&quot;&gt;secure files&lt;/a&gt; facility, which allows us to store secrets separately from the repos and use them in pipelines.&lt;/p&gt;

&lt;h2&gt;No exceptions to the rule&lt;/h2&gt;

&lt;p&gt;Back to &lt;code&gt;Just the repository&lt;/code&gt;, just because I do not really like exceptions, especially exceptions that have a tendency to run amok.&lt;/p&gt;

&lt;p&gt;Secrets are such an exception. You can get a lot of them: SSL certificates, signing certificates, SSH keys, Apple provisioning profiles, Android Keystore etc. A modern development environment catering to the cloud is useless without them.&lt;/p&gt;

&lt;p&gt;A practical solution to this is something like &lt;a href=&quot;https://keepass.info/&quot;&gt;KeePass&lt;/a&gt;, which is a password manager with no internet service to back it, but with a useful scripting interface.&lt;/p&gt;

&lt;p&gt;The concept goes like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;All secrets are kept in a KeePass database file, which is commited in the repo.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Whether you script secret retrieval from the KeePass DB to add it to Azure Devops (or whichever secret management service/tool you use), or just document their existence and prefered management solution I leave to you, dear reader.&lt;/p&gt;

&lt;p&gt;That leaves us with one secret (the password/key to the KeePass database) to transmit over alternate channels.&lt;/p&gt;

&lt;h2&gt;Staying flexible&lt;/h2&gt;

&lt;p&gt;The KeePass DB  approach also allows us to handle using the secrets locally with a bit of clever scripting.&lt;/p&gt;

&lt;p&gt;If I want to follow &lt;a href=&quot;/software/2014/07/17/vars-build-rules&quot;&gt;my own rules&lt;/a&gt;, there needs to be a way to replicate the build locally, and just setting up XCode with my own key is not close enough a replica for my criteria (i.e. I still want to be able to produce a production build locally - just in case the cloud fails. Call me paranoid).&lt;/p&gt;

&lt;p&gt;Using secure files introduces a deviation between local build and CI that cannot be replicated by the simple fact that secure files can only be downloaded with use of the Azure Devops pipeline task. There is no script alternative to allow you to get to the file outside a pipeline.&lt;/p&gt;

&lt;p&gt;The bit of clever scripting would at least simulate the secure files function by retrieving the secret out of KeePass instead.&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Jun 2019 14:15:21 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2019/06/14/azure-devops-ios-secrets</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2019/06/14/azure-devops-ios-secrets</guid>
      </item>
    
      <item>
        <title>Multiplatform build adventures: Xamarin</title>
        <description>&lt;p&gt;Now that I can have everything &lt;a href=&quot;/software/2019/06/12/dotnet-core-clean-builds&quot;&gt;out-of-band&lt;/a&gt; I like the dotnet core tooling a bit more.&lt;/p&gt;

&lt;p&gt;But it looks like we&amp;#39;re not there for everything yet - funny in a way, since now, even though in this project everything is Microsoft, I still have to integrate differrent toolchains.&lt;/p&gt;

&lt;p&gt;So, the newest problem on the block: Xamarin Android projects cannot be restored with &lt;code&gt;dotnet restore&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/dotnet/project-system/issues/2498&quot;&gt;relevant bug entry&lt;/a&gt; is at the time of writing still open and &lt;em&gt;not&lt;/em&gt; adressed in VS2019.&lt;/p&gt;

&lt;p&gt;So, we fall back to msbuild with&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;msbuild /t:restore AndroidApp.csproj
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Thu, 13 Jun 2019 14:15:21 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2019/06/13/xamarin-dotnet</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2019/06/13/xamarin-dotnet</guid>
      </item>
    
      <item>
        <title>Out-of-band DotNet core</title>
        <description>&lt;p&gt;&lt;em&gt;This entry was edited again on 2019-09-04 and updated so that no more project file entries are necessary&lt;/em&gt;.
I am a proponent of &amp;quot;out-of-band&amp;quot; builds. This simply means that any and all files generated by the build process should not under any circumstances be found next to sources.&lt;/p&gt;

&lt;p&gt;The simplest check for this is doing a &lt;code&gt;git status&lt;/code&gt; after building and seeing no untracked files, provided your .gitignore is (almost) empty.&lt;/p&gt;

&lt;p&gt;Correspondingly I find long .gitignore files simply annoying and an indication of sloppy development practices.&lt;/p&gt;

&lt;p&gt;This is a long saga, there are &lt;a href=&quot;/software/2016/02/16/damn-you-vs&quot;&gt;rant entries&lt;/a&gt; in this blog from way back in 2016.&lt;/p&gt;

&lt;p&gt;Visual Studio was my greatest adversary in the quest for clean workspaces...until DotNet core came out.&lt;/p&gt;

&lt;p&gt;Previously in the saga we figured out how to get the intermediate &lt;em&gt;compilation&lt;/em&gt; results out of the way by setting &lt;code&gt;&amp;lt;IntermediateOutputPath&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But dotnet does not respect this property. It uses instead &lt;code&gt;&amp;lt;BaseIntermediateOutputPath&amp;gt;&lt;/code&gt;. Things like nuget specs and package assets (properties and tasks for nuget packages etc.) will land in this directory.&lt;/p&gt;

&lt;p&gt;OK, you say, I&amp;#39;ll set that in the project file and be done. And then you spent a couple of hours trying to figure out why the setting is not respected.&lt;/p&gt;

&lt;p&gt;It all has to do with the way msbuild defines properties and figuring out which property to use and when it is defined.&lt;/p&gt;

&lt;p&gt;See, in the drive to have everything &amp;quot;just work&amp;quot; when you create a dotnet core project in Visual Studio the project element will have a magic &lt;em&gt;Sdk&lt;/em&gt; attribute:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Project&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Sdk=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Microsoft.NET.Sdk&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This, very slyly, instructs msbuild to import a whole bunch of property and task files. No need for you to know all the dirty details, innit?&lt;/p&gt;

&lt;p&gt;And if you try to override it late, you will get a nice warning&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;C:\Program&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Files\dotnet\sdk\2.2.300\Microsoft.Common.CurrentVersion.targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;813&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;warning&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MSB3539:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;The&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BaseIntermediateOutputPath&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;was&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;modified&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;was&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;used&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MSBuild&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;which&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;can&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lead&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unexpected&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;results.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Tools&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;such&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NuGet&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;will&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;specified&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MSBuildProjectExtensionsPath&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;instead.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;To&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;must&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Microsoft.Common.props&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imported&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Directory.Build.props.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Directory.Build.props&lt;/code&gt; is one of those &amp;quot;magic&amp;quot; files. It is loaded very early and you can set these properties there. It will get picked up if it is there and msbuild will search far and wide for it (it will go up the directory tree and then look in a few places more).&lt;/p&gt;

&lt;h2&gt;Not that simple&lt;/h2&gt;

&lt;p&gt;Timing is everything it seems. There are things you cannot put in &lt;code&gt;Directory.Build.props&lt;/code&gt;. For example, the &lt;em&gt;AssemblyName&lt;/em&gt; property is not set yet when the file is processed, so we cannot really set &lt;em&gt;OutputPath&lt;/em&gt; and &lt;em&gt;IntermediateOutputPath&lt;/em&gt; to safely differentiate compilation artifacts.&lt;/p&gt;

&lt;p&gt;The one thing we learned the hard way: Always add &lt;code&gt;$(Configuration)&lt;/code&gt;somewhere in the path otherwise you will get very wierd results (as in &amp;quot;honey, I linked the wrong binaries&amp;quot;).&lt;/p&gt;

&lt;p&gt;To be able to use property values that are set later, use &lt;code&gt;Directory.Build.targets&lt;/code&gt; which is read after msbuild has loaded its task files.&lt;/p&gt;

&lt;p&gt;So we split the difference&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Directory.Build.props&lt;/code&gt; is very basic, as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Project&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;BaseOutputPath&amp;gt;&lt;/span&gt;$(MSBuildThisFileDirectory)\..\..\out\build\$(MSBuildProjectName)\&lt;span class=&quot;nt&quot;&gt;&amp;lt;/BaseOutputPath&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;BaseIntermediateOutputPath&amp;gt;&lt;/span&gt;$(BaseOutputPath)\obj&lt;span class=&quot;nt&quot;&gt;&amp;lt;/BaseIntermediateOutputPath&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Project&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice the use of &lt;em&gt;MSBuildThisFileDirectory&lt;/em&gt; in the base path, that allows us to define the path relative to the property file.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Directory.Build.targets&lt;/code&gt; is where we set project and configuration specific paths:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Project&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;OutputPath&amp;gt;&lt;/span&gt;$(BaseOutputPath)\$(AssemblyName)\bin\$(Configuration)&lt;span class=&quot;nt&quot;&gt;&amp;lt;/OutputPath&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;IntermediateOutputPath&amp;gt;&lt;/span&gt;$(BaseIntermediateOutputPath)$(AssemblyName)\obj\$(Configuration)&lt;span class=&quot;nt&quot;&gt;&amp;lt;/IntermediateOutputPath&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we&amp;#39;re done. There is though one catch, especially if you have a lot of .NET framework projects that do not make use of the SDK simplifications.&lt;/p&gt;

&lt;p&gt;You need to remove any &lt;em&gt;OutputPath&lt;/em&gt; definitions in conditional entries (usually the &lt;em&gt;Condition=&amp;quot;&amp;#39;$(Configuration)|$(Platform)&amp;#39;==&amp;#39;Debug|AnyCPU&amp;#39;&amp;quot;&lt;/em&gt; and &lt;em&gt;Condition=&amp;quot;&amp;#39;$(Configuration)|$(Platform)&amp;#39;==&amp;#39;Release|AnyCPU&amp;#39;&amp;quot;&lt;/em&gt; entries.
Visual Studio does not expose &lt;em&gt;IntermediateOutputPath&lt;/em&gt; in the GUI so you will not see an entry unless you add it.&lt;/p&gt;

&lt;p&gt;You also need to be aware that when editing properties in Visual Studio the values are changed in the project files, which will overrided any entries in the Directory.Build files.&lt;/p&gt;

&lt;h2&gt;Out of band builds ftw!&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;out/&lt;/code&gt; should be the only entry in .gitignore.&lt;/p&gt;

&lt;p&gt;This setup will force msbuild, dotnet and VS to at least compile everything in &lt;code&gt;out/build&lt;/code&gt; and stop littering the workspace.&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Jun 2019 14:15:21 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2019/06/12/dotnet-core-clean-builds</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2019/06/12/dotnet-core-clean-builds</guid>
      </item>
    
      <item>
        <title>Ruby on Windows: Chocolatey time</title>
        <description>&lt;p&gt;I have been steadily increasing my use of chocolatey for installation of toolchains on Windows.&lt;/p&gt;

&lt;p&gt;There are still a few problems, e.g. not all packages allow setting an alternate installation directory etc., but these are problems we had with the original installers as well.&lt;/p&gt;

&lt;p&gt;There are also some version pinning issues with some packages that seem to originate on the way chocolatey provides URLs to updated packages. These lead to failures if the version is pinned and the package gets updated.&lt;/p&gt;

&lt;h2&gt;Ruby and chocolatey&lt;/h2&gt;

&lt;p&gt;Since the 2.4 version, the &lt;a href=&quot;https://rubyinstaller.org/&quot;&gt;RubyInstaller&lt;/a&gt; has switched to using the newer msys2 toolchain for C extension compilation which complicated the process of automating installation via the MSI installer.&lt;/p&gt;

&lt;p&gt;Fortunately both msys2 and the newer RubyInstallaer are available as chocolatey packages.&lt;/p&gt;

&lt;p&gt;Unfortunately there are still some hiccups.&lt;/p&gt;

&lt;p&gt;You have to take care to place the msys2 path entry &lt;em&gt;before&lt;/em&gt; the Git for Windows path entry.
The git installer bundles a mingw version that will mess up gem installations if detected before msys2.&lt;/p&gt;

&lt;p&gt;Same goes for the ChefDK path entry, only this time with ruby: ChefDK bundles a ruby distro and gem installations will go array if it is found first in the path.&lt;/p&gt;

&lt;h2&gt;Chef and chocolatey&lt;/h2&gt;

&lt;p&gt;My current infrastructure-as-code solution for turning Windows into a development environment is based on &lt;a href=&quot;https://www.chef.io/products/chef-infra/&quot;&gt;Chef&lt;/a&gt; and the &lt;a href=&quot;https://supermarket.chef.io/cookbooks/windev/versions/0.8.4&quot;&gt;windev cookbook&lt;/a&gt; (full disclosure: windev is maintained by yours truly, so doh!).&lt;/p&gt;

&lt;p&gt;Chef provides a &lt;a href=&quot;https://docs.chef.io/resource_chocolatey_package.html&quot;&gt;chocolatey_package&lt;/a&gt; resource and windev adds a configuration helper &lt;em&gt;choco_packages&lt;/em&gt; for adding packages.&lt;/p&gt;

&lt;p&gt;The following snippet will configure windev to install ruby on a windows machine:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;c:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bin;c:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;msys2;C:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Program Files&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Git&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bin;C:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ProgramData&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;chocolatey&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bin;C:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Windows&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;system32;C:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Windows;C:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Windows&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;System32&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Wbem;C:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Windows&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;System32&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;WindowsPowerShell&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;v1.0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;;C:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;opscode&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;chefdk&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;embedded&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bin;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;choco_packages&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2.6.3.1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/InstallDir:'C:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ruby'&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;msys2&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/InstallDir:'C:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;msys2'&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;run_list&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;recipe[windev::environment]&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;recipe[windev::packages]&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Unfortunately, there is a bug in the interaction between Chef and chocolatey (in the choco_package resource), specific to the msys2 installation.&lt;/p&gt;

&lt;p&gt;The installation of msys2 will hang and fail with a timeout - though msys2 will have been correctly installed. Re-run Chef and everything continues normally.&lt;/p&gt;

&lt;p&gt;Kinda defeats the main purpose of using it with Chef, but we still get to document in code how the environment is set up.&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Jun 2019 12:15:21 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2019/06/12/ruby-on-windows</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2019/06/12/ruby-on-windows</guid>
      </item>
    
      <item>
        <title>Adventures in Azure DevOps: It begins</title>
        <description>&lt;p&gt;I&amp;#39;ve been doing work with Azure Devops lately and since there&amp;#39;s things to learn, there will be blog posts.&lt;/p&gt;

&lt;p&gt;Now I am well known for my vitriolic views on Microsoft&amp;#39;s approach to ALM (Application Lifecycle Management) which were mainly represented in TFS, a behemoth that is now in its 5th (?) rebranding phase. Only this time it looks more like a reincarnation. It has been 13 years since they first gave it a go after all.&lt;/p&gt;

&lt;h2&gt;First impressions&lt;/h2&gt;

&lt;p&gt;The complexity is now mostly gone, hidden away. This is a good thing.
You can still trace Microsoft&amp;#39;s need to satisfy enterprise policies and wierd gate-keeping bureaucracy, but these things are mostly hidden in security and access policy configuration pages. And the defaults are finally sane.&lt;/p&gt;

&lt;p&gt;The mainly point-and-click GUI driven way of doing everything is still there and it is still offered as the &amp;quot;way to do things&amp;quot; but at least the docs make it obvious that there is a way to script &lt;em&gt;everything&lt;/em&gt; and that it is there from the beginning.&lt;/p&gt;

&lt;p&gt;So, usable and dare I say, promising.&lt;/p&gt;

&lt;h2&gt;Things to come&lt;/h2&gt;

&lt;p&gt;There&amp;#39;s very little I will be able to say about issue tracking, the default Agile/Scrum issue tracker with the standard boards more than covers whatever requirements I have for maintaining a backlog. My job is to get automation up and running: builds, tests, packaging and deployment.&lt;/p&gt;

&lt;p&gt;You will notice I avoid saying &amp;quot;DevOps&amp;quot; and CI. The first does not apply to me individually, but to my team, and the second is a byproduct of getting all the things right (i.e. if we get the automation right and we apply it to every change &lt;em&gt;then&lt;/em&gt; we will have CI)&lt;/p&gt;

&lt;p&gt;On the other hand, expect a lot on pipelines and how they get implemented in Azure Devops.
Getting a single build for a single tech up and running is ridiculously easy - the system analyzes your code and pretty much serves you the build jobs on a platter.&lt;/p&gt;

&lt;p&gt;But I never have a single build or a system that uses a single tech, do I?&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Jun 2019 12:15:21 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2019/06/06/azure-devops-beginning</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2019/06/06/azure-devops-beginning</guid>
      </item>
    
      <item>
        <title>ForgetMeNot: Git Submodules</title>
        <description>&lt;p&gt;I&amp;#39;m more likely to choose a monorepo solution if possible and I generally dislike the submodule feature in git but as always there are valid use cases (e.g. think about building a platform instead of a system).&lt;/p&gt;

&lt;p&gt;So I put git submodules to work and immediately started doing the same mistake again and again: typos in the directory name for the module.&lt;/p&gt;

&lt;p&gt;Now, just changing the entries in the .gitmodules file is not enough to get the module out of the way, we also need to remove the repository index entries.&lt;/p&gt;

&lt;p&gt;To cleanly remove a git submodule you need the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git submodule deinit module
git &lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;typoed_module_dir
git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Removed submodule module&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; .git/modules/typoed_module_dir
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You then add the submodule back (after you have checked the spelling this time) and obviously explicitly set the branch and the checkout directory so that you can verify everything is typed correctly.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git submodule add &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; master https://git.host/module.git CorrectlySpelledDir
git submodule init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Sun, 17 Mar 2019 11:15:21 +0100</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2019/03/17/forgetmenot-git-submodules</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2019/03/17/forgetmenot-git-submodules</guid>
      </item>
    
      <item>
        <title>On laziness</title>
        <description>&lt;p&gt;I am a lazy person. Apparently this is not unusual, on the contrary &lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S0028393218303981&quot;&gt;recently published research&lt;/a&gt; indicates this is the default setting for humans.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m also a software developer, so according to Larry Wall I already posess one of the three great virtues (the other two being impatience and hubris) required for greatness. And I have to say my innate tendency to avoid work has helped immensely in shaping my career and success as a software developer.&lt;/p&gt;

&lt;p&gt;The funny thing is, it took a lot of work. I am a lazy person with 20 years hard work behind him. Most of it is relabeling work as fun.&lt;/p&gt;

&lt;p&gt;A small aside on language: In Greek, there are two words for work, &amp;quot;δουλειά&amp;quot; and &amp;quot;εργασία&amp;quot;. The first one shares the same root as the word for slavery, the second shares the root with the word for project (also the root that leads to English words like ergonomics). There is a clear distinction between work you &lt;em&gt;have&lt;/em&gt; to do (&amp;quot;δουλειά&amp;quot;) and work that contributes something (&amp;quot;έργο&amp;quot;).&lt;/p&gt;

&lt;p&gt;So, with this in mind, as long as I work to contribute (&amp;quot;εργάζομαι&amp;quot;) instead of having to work (&amp;quot;δουλεύω&amp;quot;) all is good. Meaning that if the work is intellectually stimulating, presents an interesting problem to solve and is conducted in a friendly, appreciating and supportive environment, well, it does not feel like work.&lt;/p&gt;

&lt;p&gt;So I find myself working hard and appreciating the benefits, but with a complete understanding for my 9 year old&amp;#39;s utter disinterest in doing homework.&lt;/p&gt;

&lt;p&gt;The current approach of parental influence is to differentiate lazy into &amp;quot;smart lazy&amp;quot; and &amp;quot;dumb lazy&amp;quot; since &amp;quot;smart&amp;quot; is good and we like being &amp;quot;smart&amp;quot;, while &amp;quot;lazy&amp;quot; is not necessarily totally negative since grandma calls dad lazy all the time and grandma has absolute authority but we like dad :P.&lt;/p&gt;

&lt;p&gt;Smart lazy is learning your maths tables by heart, dumb lazy is doing &amp;quot;6 times 5&amp;quot; by doing &amp;quot;5,10,15,20,25,30&amp;quot; every single time.&lt;/p&gt;

&lt;p&gt;But the upfront cost of memorizing multiplication tables is something not easily accepted. &amp;quot;Avoid boring repetiteveness&amp;quot; is not an argument that has traction with either 9 year olds or management - both groups simply let others do the boring bits.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s some obvious parallels to software development and automation and tools and all this DevOps hooha. Most of the content on this blog is dedicated to figuring out how to let the computers do the repetitive boring stuff. What it leaves out is how often we have to do the boring, repetitive stuff because it just seems &amp;quot;easier&amp;quot; or &amp;quot;cheaper&amp;quot;.&lt;/p&gt;

&lt;p&gt;Which leads us to the next chapter: &amp;quot;justifying upfront investment on the promise of future gains&amp;quot;. 9 year olds are an even tougher crowd than management on this subject. Send help.&lt;/p&gt;
</description>
        <pubDate>Thu, 20 Sep 2018 10:15:21 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2018/09/20/on-laziness</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2018/09/20/on-laziness</guid>
      </item>
    
  </channel>
</rss>