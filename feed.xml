<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ampelofilosofies</title>
    <description>Random comments on random subjects in random language</description>
    <link>http://www.ampelofilosofies.gr</link>
    <atom:link href="http://www.ampelofilosofies.gr/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>ForgetMeNot: SublimeText shell with errors on Windows</title>
        <description>&lt;p&gt;I&amp;#39;ve been running &lt;a href=&quot;http://www.sublimetext.com/3&quot;&gt;SublimeText v3&lt;/a&gt; with the &lt;a href=&quot;https://github.com/misfo/Shell-Turtlestein&quot;&gt;Shell-Turtlestein&lt;/a&gt; plugin for a while now.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s rarely a need to switch out of the editor window anymore and I&amp;#39;m feeling more emacsy than ever.&lt;/p&gt;

&lt;p&gt;I use the same setup on all platforms (Windows, OS X and Linux) and all it takes to configure is a couple or JSON files in the correct locations.&lt;/p&gt;

&lt;p&gt;Shell-Turtlestein uses the same technique that the SublimeText build systems use to parse errors from the output of a command and this involves regular expressions (que moan). &lt;/p&gt;

&lt;p&gt;I also mostly run rake and drive minitest unit tests so there is a couple of cases where I would like to jump to the line an error indicates:
When a test assertion fails and when an exception occurs.&lt;/p&gt;

&lt;p&gt;The following entry in the Shell-Turtlestein settings file will allow the use of F4 to jump to the error line in these two cases on windows (for *ix OSes there&amp;#39;s plenty of examples out there)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;exec_args&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;file_regex&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;^\\s*\\w*\\(*\\w*\\)*\\s*\\[*(\\w+:\\/.+\\.*\\w*):([0-9]+)\\]*:()(.*)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 30 Jul 2014 00:00:00 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2014/07/30/forgetmenot-sublimetext-shell-with-errors-on-windows</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2014/07/30/forgetmenot-sublimetext-shell-with-errors-on-windows</guid>
      </item>
    
      <item>
        <title>VAR's Build Rules</title>
        <description>&lt;p&gt;This is a post that came out of a discussion thread at work &lt;sup&gt;1&lt;/sup&gt;. Originally it was a simple question on alternatives to TFS as a build system. But you know how it goes, things evolve into questions you can only answer with 42.&lt;/p&gt;

&lt;p&gt;During the conversation the rules described in this post came out of the woodwork.&lt;/p&gt;

&lt;h2&gt;Distinctions, distinctions&lt;/h2&gt;

&lt;p&gt;Before we get into the rules we need to distinguish between a build system and a build management system.&lt;/p&gt;

&lt;p&gt;A build system performs transformations in sequence according to a predetermined dependency chain to create artifacts. A subset of this is the compilation of sources to binaries.&lt;/p&gt;

&lt;p&gt;A build management system coordinates build system(s).&lt;/p&gt;

&lt;p&gt;A build system is highly project specific, it is affected by toolchains, project conventions and generally can only run on a specially configured host (i.e. development environment).&lt;/p&gt;

&lt;p&gt;A build management system can run everywhere so long as it can start the build system on the appropriate host. The specificity of a build management system is limited to the number of version control systems it supports. Although theoretically it doesn&amp;#39;t have to provide version control support it is a given that such support will be provided in the minimum feature set.&lt;/p&gt;

&lt;p&gt;Jenkins, TeamCity, TravisCI, BuildBot are build management systems.&lt;/p&gt;

&lt;p&gt;TFS tries to do both at once, mixes them up, confuses the terminology and generally does a bang up job of completely screwing things up.&lt;/p&gt;

&lt;h2&gt;VAR&amp;#39;s Build Rules&lt;/h2&gt;

&lt;p&gt;(var is my username at work)&lt;/p&gt;

&lt;h3&gt;1. I am the build server&lt;/h3&gt;

&lt;p&gt;Rule #1 requires that the build server follows the exact same steps as any other developer. &lt;/p&gt;

&lt;p&gt;Expressed the other way around: Every developer has to be able to recreate locally the complete build process without deviations given the development environment and the correct version of the source tree.&lt;/p&gt;

&lt;h3&gt;2. When the build server says no, it means no!&lt;/h3&gt;

&lt;p&gt;Rule #2 says that if a build server says a build is broken, then the build is broken. Drop everything and read the logs. &lt;/p&gt;

&lt;p&gt;There is no &amp;quot;it works for me&amp;quot;, your build server is Judge Dredd: judge, juror and executioner.&lt;/p&gt;

&lt;p&gt;You can only adhere to this rule if you followed Rule #1&lt;/p&gt;

&lt;h3&gt;3. IDEs are the enemy AKA F5 is not a build process&lt;/h3&gt;

&lt;p&gt;Which means that if you drive your development process from an IDE there is no way you can adhere to the Build Rules. &lt;/p&gt;

&lt;p&gt;This rule has major complications on the development environment, ties directly into the subject of allowing your developers to use whatever tools they feel comfortable with and adherence to it is actively sabotaged by Visual Studio.&lt;/p&gt;

&lt;p&gt;My current approach to this problem is laid out in &lt;a href=&quot;/software/2014/07/03/gaudi-versus-the-dreaded-ide&quot;&gt;Gaudi vs. the dreaded IDE&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Adhering to the rules&lt;/h2&gt;

&lt;p&gt;To create a system that adheres to rules #1 &amp;amp; #2 you have to think like a Lego builder: Lots of small, specialized tasks that do one thing can be used to compose more complex processes etc.&lt;/p&gt;

&lt;p&gt;As an example a &lt;em&gt;release&lt;/em&gt; task instead of doing everything in one big implementation will depend on the build tasks for each of the libraries and applications and the tasks that run the tests etc. Using the syntax of rake in a contrived example one would do&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:release&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:&amp;quot;test:all&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:&amp;quot;test:all&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:&amp;quot;test:foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:&amp;quot;test:bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:&amp;quot;test:foo&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:&amp;quot;build:foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now a developer will probably use the component tasks a lot more than the composite :release task and we will certainly have a build job on the server that only does releases.&lt;/p&gt;

&lt;p&gt;This is a necessity since the system needs to satisfy different usage  patterns: the build server uses composite tasks that implement complete workflows while the developer usex component tasks with surgical precision in the interest of speed and effectiveness.&lt;/p&gt;

&lt;p&gt;From the perspective of the build system engineer this approach is self-evident for the same reason it&amp;#39;s evident when building applications: Small chunks of code are easier to manage, test, reuse and understand.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s also one of the reasons why make, ant and the msbuild XML syntax suck big time as general task description languages but that is a subject that requires a whole other post.&lt;/p&gt;

&lt;p&gt;All of this segways nicely into the final rule:&lt;/p&gt;

&lt;h3&gt;4. Your (build) infrastructure is a software development project&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;/software/2011/02/04/managing-your-development-environment&quot;&gt;This post has already been written&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rule #4 means you need tests and CI and a plan. To make matters worse your users are some of the most obnoxious, impatient and down right pedantic users on the face of the planet. They want everything perfect, robust, simple and fast and they want it yesterday. You better be dogfooding by this point...&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; I work at &lt;a href=&quot;http://www.zuehlke.com&quot;&gt;ZÃ¼hlke&lt;/a&gt; where I have the luck to interact with brilliant engineers. Not just software engineers either.&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Jul 2014 16:00:00 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2014/07/17/vars-build-rules</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2014/07/17/vars-build-rules</guid>
      </item>
    
      <item>
        <title>Gaudi versus the dreaded IDE</title>
        <description>&lt;p&gt;I will come out and say it: I dislike IDEs. From Visual Studio to Eclipse by way of IntelliJ and Netbeans I find them all slow, unwieldy, complicated and buggy. They hide too much of the workings of the toolchains, spread configruation over a zillion dialogs, collaborate with source control like a stray dog with an alley cat and litter the workspace with all kinds of useless files.&lt;/p&gt;

&lt;p&gt;Way back in `07 Jeff Atwood penned &amp;quot;&lt;a href=&quot;http://blog.codinghorror.com/the-f5-key-is-not-a-build-process/&quot;&gt;The F5 Key Is Not A Build Process&lt;/a&gt;&amp;quot;. While I could add about 4 pages of things you can do with a &amp;quot;build script&amp;quot; outside of an IDE it wouldn&amp;#39;t add anything to the point so go read it. &lt;/p&gt;

&lt;p&gt;Then go print &amp;quot;The F5 Key Is Not A Build Process&amp;quot; on a banner, hung it in the office and live by it.&lt;/p&gt;

&lt;h2&gt;But...&lt;/h2&gt;

&lt;p&gt;There is one and only one unavoidable reason to use a fully fledged IDE and that is &lt;em&gt;The Debugger&lt;/em&gt;! 
Every other reason can be done away with, provided there is sufficient editor and shell foo.&lt;/p&gt;

&lt;p&gt;But IDE projects have big disadvantages when following proper software development practices (e.g. at least continuous integration with automated tests). Generally if you want to develop in an IDE and have a CI system you end up maintaining both separately&lt;sup&gt;1&lt;/sup&gt;. &lt;/p&gt;

&lt;p&gt;We define as maintenance the tasks of adding/removing files, defining dependencies between code components, compiler settings etc.&lt;/p&gt;

&lt;p&gt;Errors in the IDE projects are also very hard to detect automatically: The build server will not use the IDE so the  change is going to propagate to the whole team. There is nothing that drives developers to frustration faster than not being able to compile locally when the build server says everything is fine.&lt;/p&gt;

&lt;p&gt;Solution: make the command line build system the master and provide IDE project generation facilities. &lt;/p&gt;

&lt;p&gt;When a developer wants to use the IDE, she generates the project from a freshly updated workspace with the correct settings and continues working.&lt;/p&gt;

&lt;p&gt;&amp;quot;But, there&amp;#39;s so many IDEs out there and they all use different file formats!&amp;quot; you will say and you will be absolutely correct. &lt;/p&gt;

&lt;p&gt;The best case is when the IDE allows you to use a custom build system. This removes Visual Studio and a couple of more obscure ones from the list of frendlies, but VS has a very good documented XML-based format so there are ways around it.&lt;/p&gt;

&lt;p&gt;Still the following example can be adapted to work in every case.&lt;/p&gt;

&lt;h2&gt;Gaudi &amp;amp; QtCreator Example&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s say we have a project that uses &lt;a href=&quot;http://github.com/damphyr/gaudi&quot;&gt;Gaudi&lt;/a&gt; as it&amp;#39;s build system. And let&amp;#39;s say the team insisted on using &lt;a href=&quot;https://qt-project.org/doc/qtcreator-2.5/index.html&quot;&gt;QtCreator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;QCreator uses two separate files: One file (prj.pro) lists the files, resources, paths etc. while the other (prj.user.pro) contains the IDE settings (layout, colors and more importantly the build &amp;amp; run settings). &lt;/p&gt;

&lt;p&gt;Instead of maintaining the QtCreator project files separately we create a template from a functioning project file. In other words use the GUI once to configure everthing just so. &lt;/p&gt;

&lt;p&gt;For convenience we use the ERB format for the templates&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;The prj.pro.template is very simple:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;TEMPLATE = app
CONFIG += console
CONFIG -= app_bundle
CONFIG -= qt

SOURCES += \
    &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%=source_list.join(&amp;quot; \\\n    &amp;quot;)%&amp;gt;

HEADERS += \
    &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%=header_list.join(&amp;quot; \\\n    &amp;quot;)%&amp;gt;

OTHER_FILES += \
    &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%=other_list.join(&amp;quot; \\\n    &amp;quot;)%&amp;gt;

INCLUDEPATH += \
    &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%=include_path_list.join(&amp;quot; \\\n    &amp;quot;)%&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we show only the relevant part from the prj.user.pro.template&lt;sup&gt;3&lt;/sup&gt; with the custom build system settings&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;valuemap&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;QVariantMap&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;....Target.BuildConfiguration.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;QString&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;....BuildDirectory&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%=build_directory%&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;valuemap&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;QVariantMap&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ProjectExplorer.BuildConfiguration.BuildStepList.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;valuemap&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;QVariantMap&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ProjectExplorer.BuildStepList.Step.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bool&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ProjectExplorer.BuildStep.Enabled&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;QString&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;...Arguments&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;GAUDI_CONFIG=&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%=system_config_file%&amp;gt; 
  build:deployment DEPLOYMENT=&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%=deployment_name%&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;QString&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;...Command&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;rake&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;QString&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;...WorkingDirectory&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%=base%&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;QString&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;...DefaultDisplayName&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Rake Build&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;QString&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;...DisplayName&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;QString&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;...Id&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;ProjectExplorer.ProcessStep&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/valuemap&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We now have our templates. The parameter names are fully arbitrary at the moment, they serve only as descriptive names.&lt;/p&gt;

&lt;p&gt;We are faced with the task of collecting the file names, setting paths correctly etc. This is where &lt;a href=&quot;http://github.com/damphyr/gaudi&quot;&gt;Gaudi&lt;/a&gt; comes in.
The Rake task code that generates the prj.pro file looks like the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:qtc&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#Quick and dirty get the first GCC program available to get the example running&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Gaudi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Deployment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Dummy&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;programs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;gcc&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#Use the configuration methods to place artifacts within the workspace&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;outfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;qtcreator&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.pro&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;tools/templates/qtcreator.pro.template&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#collect all source and header files&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;source_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sources&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;header_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#A Gaudi::Program depends on Gaudi::Components &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#which are groupings of source files.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#This gets us all sources and headers&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;source_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sources&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;header_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#one of the ways to get the include paths&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;include_path_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniq&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#The Hash with the template parameters&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;source_list&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;header_list&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;include_path_list&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include_path_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;other_list&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config_file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniq&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;write_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What we get from Gaudi:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The configuration defining the workspace (output directory, base directory etc.)&lt;/li&gt;
&lt;li&gt;A few classes (Deployment, Program, Component) linking sources to binary artifacts and encapsulating the dependencies between code constructs&lt;/li&gt;
&lt;li&gt;Helpers for template handling (from&lt;em&gt;template, write&lt;/em&gt;file etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Creating IDE project files while maintaining a fully command line enabled build system is not very difficult. The combination of one of the myriad template engines with a few lines of scripting to collect the necessary information gets you quickly to a very usable solution. The bulk of the time spent is dedicated to deciphering the IDE file format and creating the template.&lt;/p&gt;

&lt;h2&gt;You never walk alone&lt;/h2&gt;

&lt;p&gt;QtCreator expertise provided and code polished by &lt;a href=&quot;http://github.com/jahnf&quot;&gt;jahnf&lt;/a&gt; who suffered through all my explanations of Gaudi interna and managed to write tasks at the end.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; It can be done but driving the process of development from the IDE throws up all sorts of hurdles in a proper CI workflow.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt; Gaudi is built on Rake, which is Ruby, which offers ERB in the standard library&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;3&lt;/sup&gt; Because XML! &lt;/p&gt;

&lt;p&gt;&lt;sup&gt;4&lt;/sup&gt; Once set up and configured properly&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Jul 2014 16:00:00 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2014/07/03/gaudi-versus-the-dreaded-ide</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2014/07/03/gaudi-versus-the-dreaded-ide</guid>
      </item>
    
      <item>
        <title>Building with rake: Provisions</title>
        <description>&lt;p&gt;This is the third article in the series and it is part two of the setup saga. the whole thing starts &lt;a href=&quot;/software/2013/10/22/building-with-rake-I&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;/software/2014/03/15/building-with-rake-II&quot;&gt;part one&lt;/a&gt; we laid the ground work and ended up with a 32bit CentOS 6.5 installation in a virtual machine configured for control via vagrant.&lt;/p&gt;

&lt;p&gt;With the groundwork laid it is time for the provisioning part. The main reason for creating a vagrant base box was because I have never before worked with CentOS, or the KPIT toolchain, so naturally I tend to make mistakes. Sometimes I&amp;#39;ll just blunder so bad that the only way to get back to a viable state is to start from the beginning. With the vagrant base box this whole process is as follows:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;vagrant up 
vagrant ssh
&lt;span class=&quot;c&quot;&gt;#blunder about&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#mess up&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
vagrant halt
vagrant destroy &lt;span class=&quot;c&quot;&gt;#rinse&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#repeat&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 

&lt;p&gt;Anything that works ends up in the provisioning script&lt;/p&gt;

&lt;h2&gt;Provisioning&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/tools.jpg&quot; alt=&quot;tools&quot;&gt; Provisioning is the act of installing and configuring software on a computer. &lt;/p&gt;

&lt;p&gt;Ideally it would be all software, operating system included, so we could plug in a machine and it would start and auto-magically become a fully functional computer without human intervention. And then we would name it SkySomething and it would form a network with it&amp;#39;s siblings which consequently would be SkyNe...omg, I am working towards the destruction of the human race!&lt;/p&gt;

&lt;p&gt;Back to the present, we generally pick a basis configuration for the OS (ergo the base box) and then automate everything else. Full grown provisioning tools like Chef, Puppet and Ansible will allow you to keep large numbers of machines working and also let you use the collective expertise of several thousand IT administrators. I&amp;#39;m just using a shell script and I&amp;#39;m going to embed it in the &lt;a href=&quot;https://github.com/damphyr/embedded-C-rake/blob/master/Vagrantfile&quot;&gt;Vagrantfile&lt;/a&gt;. So there...&lt;/p&gt;

&lt;p&gt;To (finally) start building our C code we will need Ruby (you still remember this whole thing is &amp;quot;Building with Rake&amp;quot; I hope) and the &lt;a href=&quot;http://www.kpitgnutools.com/latestToolchain.php&quot;&gt;KPIT RX toolchain&lt;/a&gt; .&lt;/p&gt;

&lt;h2&gt;HowTo&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Clone the &lt;a href=&quot;https://github.com/damphyr/embedded-C-rake/&quot;&gt;git repository&lt;/a&gt; acompanying this blog post series.&lt;/li&gt;
&lt;li&gt;Download the &lt;a href=&quot;http://www.kpitgnutools.com/latestToolchain.php&quot;&gt;RPM&lt;/a&gt; for the elf-rx tools from KPIT and place it in the setup/ directory&lt;/li&gt;
&lt;li&gt;vagrant up&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The repository has &lt;a href=&quot;https://github.com/damphyr/embedded-C-rake/tree/master/setup&quot;&gt;more detailed instructions&lt;/a&gt; with all the ifs and buts for those who don&amp;#39;t want to follow convention. &lt;/p&gt;

&lt;p&gt;Once &amp;#39;vagrant up&amp;#39; is finished, log in the VM with &amp;#39;vagrant ssh&amp;#39; and you&amp;#39;re set to work. &lt;/p&gt;

&lt;h2&gt;Practical stuff&lt;/h2&gt;

&lt;p&gt;Package managers all across *ix distributions are a mess. Specifically for Ruby the versions available are usually about a month away from end-of-life or at best a couple of years behind the current stable.&lt;/p&gt;

&lt;p&gt;Even more specific, yum lists a 1.8.7 version that is long dead and consigned to the history books. So installation from source it is. For the purposes of this experiment this is more than adequate. And to make matters more interesting, lets get the latest and greatest at the time of writing, 2.1.1.&lt;/p&gt;

&lt;p&gt;The provisioning &amp;quot;script&amp;quot; is:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;yum -y install zlib zlib-devel
yum -y install openssl-devel
yum -y install libyaml libyaml-devel
yum -y install wget
wget http://cache.ruby-lang.org/pub/ruby/2.1/ruby-2.1.1.tar.gz
tar xvf ruby-2.1.1.tar.gz
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ruby-2.1.1
./configure
make
make install
&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Setting up environment
cp /home/vagrant/host_share/setup/bash_profile /home/vagrant/.bash_profile
chown vagrant:vagrant /home/vagrant/.bash_profile
chmod &lt;span class=&quot;m&quot;&gt;544&lt;/span&gt; /home/vagrant/.bash_profile
rpm --install /home/vagrant/host_share/setup/gnurx_v14.01_elf-1-1.i386.rpm&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I mean, really, this thing has no error handling, nothing. It&amp;#39;s a shambles masquerading as a script. But hey, it mostly works&lt;/p&gt;

&lt;p&gt;This script will evolve as we add gems, things go wrong, versions change etc. That is OK. More than OK, it is desired. This is the single source for our development environment.&lt;/p&gt;

&lt;h2&gt;Other tricks&lt;/h2&gt;

&lt;p&gt;You will notice there is a setup/bash_profile file and in the provisioning script it is used as the .bash_profile for the vagrant user. This is part of a method I use very often when creating development environments under *ix systems. &lt;/p&gt;

&lt;p&gt;Instead of creating elaborate scripts that add users, services, environment variables etc. recreate the filesystem structure for the system under version control and save only the differences to the base installation. &lt;/p&gt;

&lt;p&gt;To update the system just copy everything over.  Any scripting can be done in your working environment. &lt;/p&gt;

&lt;p&gt;This is especially useful when your target is a constrained system that lacks most development tools but it has a lot of other advantages as well. To list a few:&lt;/p&gt;

&lt;p&gt;Search across all administered systems from the comfort of your workstation, versioned changes and instant reset to a known state with a simple copy action.&lt;/p&gt;

&lt;h2&gt;Afterthoughts&lt;/h2&gt;

&lt;p&gt;For any other project the toolchain RPM and the Ruby tarfile would be in the repository and the provisioning script would start by installing git and then pulling the repository in the VM. This project will live on the bleeding edge :P !&lt;/p&gt;

&lt;p&gt;It&amp;#39;s not unusual for embedded projects to have support lifecycles of 5 years or more. Can you remember which CentOS version was state-of-the-art 7 years ago? Can you guarantee that 6.5 will be available in seven years time? The longer a project will be supported for, the more of it&amp;#39;s environment should be in the repository. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/the_dream.png&quot; alt=&quot;that&amp;#39;s the dream&quot;&gt;  The goal is to be able to recreate the development environment at any point in time with just a copy of HEAD at hand.&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Mar 2014 00:00:00 +0100</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2014/03/19/building-with-rake-III</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2014/03/19/building-with-rake-III</guid>
      </item>
    
      <item>
        <title>Building with rake: Setup</title>
        <description>&lt;p&gt;This is the second article in the series,the whole thing starts &lt;a href=&quot;/software/2013/10/22/building-with-rake-I&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And while the series is about building C systems with Rake there is a lot of preparation work to be done before we can actually run the first file through the compiler.&lt;/p&gt;

&lt;h2&gt;Setting up the environment&lt;/h2&gt;

&lt;p&gt;Actually setting up the environment, installing the editor, the IDE, the compiler toolchain and making sure they are accessible from the terminal or the IDE etc. is a task most developers do not consciously consider. As a consequence we tend to underestimate the amount of work required to do it right and the actual cost of getting it wrong.&lt;/p&gt;

&lt;p&gt;Oh, and this is dangerous ground. Editor wars, OS wars, the death-through-infrastructure syndrome and a zillion other reasons why it&amp;#39;s not going to work.&lt;/p&gt;

&lt;p&gt;This is a very important step in every project, I can&amp;#39;t stress this enough. Consistency in the development environment is the single most important point when working with embedded software. Consider that apart from the usual software errors you have to deal with new, untested or flaky hardware. Just check the picture of a  &amp;quot;smoke tested&amp;quot; board, cuplrit of a failed long running test. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/smoke_test.png&quot; alt=&quot;smoke test&quot;&gt; &lt;/p&gt;

&lt;p&gt;And new electronics are ALWAYS a potential source of errors. Come to think of it, you can take &amp;#39;potential&amp;#39; out of that sentence and it would still be true.&lt;/p&gt;

&lt;p&gt;The difficulty of locating the cause for a bug increases exponentially with every source of errors. So we need as few error sources as possible. As a first step we establish a consistent development environment so that we can exclude differences between workstations as a culprit.&lt;/p&gt;

&lt;p&gt;As a bonus, no developer can use &amp;#39;it works for me&amp;#39; as a cop out when something breaks.&lt;/p&gt;

&lt;p&gt;Take care not to misunderstand &amp;#39;consistent&amp;#39; for &amp;#39;limited&amp;#39;. With provisioning tools like Chef, Puppet or Ansible there is very little reason why you can&amp;#39;t satisfy every developer&amp;#39;s wishes when it comes to editor, IDE or any other productivity tool.&lt;/p&gt;

&lt;p&gt;And yes, all of this is also true on Windows. Painful, but true.&lt;/p&gt;

&lt;h2&gt;Practical matters&lt;/h2&gt;

&lt;p&gt;What we&amp;#39;re going to need is &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;VirtualBox&lt;/a&gt;, &lt;a href=&quot;http://www.vagrantup.com/&quot;&gt;vagrant&lt;/a&gt;, a CentOS basebox and optionally a git repository containing a bunch of &lt;a href=&quot;http://www.opscode.com/chef/&quot;&gt;Chef&lt;/a&gt; recipes.&lt;/p&gt;

&lt;p&gt;With these ingredients in the end we will cook up a VM that will be our development environment with the RX63N board.&lt;/p&gt;

&lt;p&gt;The CentOS choice is dictated by the fact that the &lt;a href=&quot;http://www.kpitgnutools.com/latestToolchain.php&quot;&gt;KPIT toolchain&lt;/a&gt; comes packaged in RPM format. It also has to be the 32bit version, since KPIT does not come compiled for a x64 Linux flavour.&lt;/p&gt;

&lt;p&gt;The base box proved to be problematic as &lt;a href=&quot;http://www.vagrantbox.es/&quot;&gt;http://www.vagrantbox.es/&lt;/a&gt; lists only one recent CentOS box as 32bit but the base box is actually 64bit. Well, creating base boxes is easy. There&amp;#39;s &lt;a href=&quot;https://github.com/okfn/ckan/wiki/How-to-Create-a-CentOS-Vagrant-Base-Box&quot;&gt;blog posts&lt;/a&gt; about it.&lt;/p&gt;

&lt;p&gt;Originally I wrote &amp;quot;there&amp;#39;s more interesting things to talk about&amp;quot;. But it seems that once more the combination of versions needed for the task requires some digging and further work. So, following the instructions on the provided link I proceeded to create a 32 bit CentOS 6.5 base box for vagrant. The set of instructions is &lt;a href=&quot;https://github.com/damphyr/embedded-C-rake/blob/master/setup/CentOSBaseBox.md&quot;&gt;up on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Hints &amp;amp; Tips for the decrepit mind&lt;/h2&gt;

&lt;p&gt;If you&amp;#39;re like me you&amp;#39;ll need to be reminded that on vagrant base boxes the root password is &amp;#39;vagrant&amp;#39;.&lt;/p&gt;

&lt;h2&gt;VM at hand&lt;/h2&gt;

&lt;p&gt;There are a few things to do that for convenience&amp;#39;s sake I will skip since this is a personal sandbox project.&lt;/p&gt;

&lt;p&gt;There should be a project user (or depending on how far you want to take it, one account per team member). Things like repository access, SSH keys etc. need to be setup. For convenience everything will be done with the vagrant user.&lt;/p&gt;

&lt;p&gt;Also, to keep software updates under control, there should be a chef/puppet/ansible installation and the contents of the VM should be managed as source. Since this is a one man team environment and there&amp;#39;s only really two software packages to install we will skip the overhead for now.&lt;/p&gt;

&lt;p&gt;It should be noted though that between the time I started putting this environment together and now (which is about 5 months) there have been 4 new vagrant versions, a major CentOS update, 3 KPIT toolchain updates (one major version), a new Ruby version and uncountable gem updates. At the rate I&amp;#39;m writing I will be forced to add Chef recipes just to be able to keep the environment current.&lt;/p&gt;

&lt;p&gt;In the next installment we&amp;#39;ll setup the toolchain and the RX63N board and figure out how to call everything from rake.&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Mar 2014 14:00:00 +0100</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2014/03/15/building-with-rake-II</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2014/03/15/building-with-rake-II</guid>
      </item>
    
      <item>
        <title>ForgetMeNot: File.join weirdness</title>
        <description>&lt;p&gt;I&amp;#39;m busy with a paid-for-by-an-actual-client system based on the Renesas RX630 so the RX63N adventure has been tabled for a while.&lt;/p&gt;

&lt;p&gt;Still I stumbled on a little Ruby weirdness today that I have to take down just in case.&lt;/p&gt;

&lt;p&gt;So when handling paths, doing a File.join(&amp;quot;/foo/foo&amp;quot;,&amp;quot;../../bar&amp;quot;) should give /bar back. &lt;/p&gt;

&lt;p&gt;If by some twist of luck there&amp;#39;s a space before those first two dots though, the results are quite unexpected:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p195&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/foo/foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; ../../bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/foo/foo/bar&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The dots are somehow stripped away. Btw. when doing the same with only one directory level:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p195&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;010&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;../../bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/bar&amp;quot;&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p195&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;011&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; ../../bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/foo/bar&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Also, this only happens when there are two sets of dots (&amp;quot;../../&amp;quot;). When there is only one then the sneaky whitespace is easier to detect:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p195&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;012&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; ../bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/foo/ ../bar&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 04 Dec 2013 19:00:00 +0100</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2013/12/04/weird-file-joins</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2013/12/04/weird-file-joins</guid>
      </item>
    
      <item>
        <title>ATCAR: The Tin Robot Menace</title>
        <description>&lt;p&gt;What do you get if you put together an Android starter kit, several empty cans, some broken household items, two geekdads and a four year old?&lt;/p&gt;

&lt;p&gt;A kick-ass maker weekend in Berlin!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://plus.google.com/u/0/114681917079512934320/posts?partnerid=gplp0&quot;&gt;dianthos&lt;/a&gt; welcomed me with &amp;quot;I got these tin cans and this one servo motor, let&amp;#39;s build a robot!&amp;quot;. Obviously the response was &amp;quot;Excellent! Let&amp;#39;s go shopping&amp;quot;.&lt;/p&gt;

&lt;h3&gt;Planning&lt;/h3&gt;

&lt;p&gt;Friday evening was the planning stage. Mostly to decide what the robot wil look like and what we can actually do with the available materials.&lt;/p&gt;

&lt;p&gt;The original idea came to dianthos while looking at &lt;a href=&quot;http://spoonful.com/crafts/can-do-robots&quot;&gt;tin can toys&lt;/a&gt; so we spend a bit choosing the cans and figuring out if and how the Arduino UNO would fit in there.&lt;/p&gt;

&lt;p&gt;While there was no shortage of tin cans and odd bits and pieces,  our electronics stockpile was a bit limited:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One 180 degree servo motor&lt;/li&gt;
&lt;li&gt;A couple of buttons&lt;/li&gt;
&lt;li&gt;One potentiometer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We had enough LEDs and resistors and there were a few other bits and pieces in the &lt;a href=&quot;http://shop.fritzing.org/products/fritzing-starter-kit-with-arduino-uno&quot;&gt;starter kit&lt;/a&gt; but what we really were interested in was the servo motor.&lt;/p&gt;

&lt;p&gt;At the end the plan called for a robot that swivels it&amp;#39;s torso and has LEDs for eyes.&lt;/p&gt;

&lt;h3&gt;Shopping&lt;/h3&gt;

&lt;p&gt;Saturday was off to geekdad paradise: Conrad and Bauhaus. For those not familiar with german brands Conrad is an electronics shop and Bauhaus is a DIY shop. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/tinanton_materials.jpg&quot; alt=&quot;materials for the dread robot&quot;&gt;  And to make things difficult, our goal was to NOT buy a brand new Dremel drill just so we can drill a couple of holes in a tin can. We came very close to not achieving the goal.&lt;/p&gt;

&lt;p&gt;Total cost of the materials was about 10â¬ but our bill run quite a bit higher (useful advice to all wives out there: don&amp;#39;t let your man go to a DIY &lt;em&gt;and&lt;/em&gt; an electronics shop with his best mate. Some cliches are too strong for even the best of us).&lt;/p&gt;

&lt;p&gt;Our materials at hand it was time for coding. This was actually the easiest task. Fritzing and Arduino put together make hobby electronics a breeze.&lt;/p&gt;

&lt;p&gt;Our robot uses the servo to swivel it&amp;#39;s torso 180 degrees, has a red LED for it&amp;#39;s cyclopean eye and the USB light for hands. We took the three Arduino examples Blink, Button and Servo.Knob.&lt;/p&gt;

&lt;p&gt;To make it more interesting we decided that the robot would have two modes of operating. In one the light remains on and the robot can be swiveled using the potentiometer, in the other the robot swivels automatically and the led blinks. Switching between modes is controlled through a button that toggles between the two modes.&lt;/p&gt;

&lt;p&gt;The code for all of this for all of this is just a bit of organisation around code of the three examples and it fits in a &lt;a href=&quot;https://gist.github.com/damphyr/7514713&quot;&gt;gist&lt;/a&gt;. The circuitry is similarly the aggregation of the corresponding examples in Fritzing:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/tinanton_breadboard.jpg&quot; alt=&quot;the breadboard version&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Sunday&lt;/h3&gt;

&lt;p&gt;So with the circuitry and the software decided we proceeded in assembling the robot. Which took us almost the whole day!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/tinanton_assembly.jpg&quot; alt=&quot;starting&quot;&gt; &lt;/p&gt;

&lt;p&gt;the sinister red eye was entirely intended :) It is the 50th Doctor Who anniversary, so the obligatory &amp;quot;Exterminate&amp;quot; was the soundtrack during the robot&amp;#39;s operation.&lt;/p&gt;

&lt;p&gt;ATCAR is up for a revision, it should get a control board for the potentiometer and the button (at the moment there&amp;#39;s just cables leading to the breadboard) and a future version 2.0 will probably incorporate a battery power supply.&lt;/p&gt;

&lt;p&gt;Arduino is so much fun! And trust me, the best way to get the kids involved is to get the geekdads excited!&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Nov 2013 00:00:00 +0100</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2013/11/13/tinanton</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2013/11/13/tinanton</guid>
      </item>
    
      <item>
        <title>Building with rake: Introduction</title>
        <description>&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This is the introduction to a series of articles I&amp;#39;ve been meaning to write for a while now. I&amp;#39;ve been working with Ruby for the last 12 years now and I&amp;#39;ve never done Rails or - the occasional Sinatra app aside - web applications.&lt;/p&gt;

&lt;p&gt;So this series will serve as an example of what you can do with Ruby away from Rails and also help me clarify and organise my own knowledge. Code samples will go up on GitHub.&lt;/p&gt;

&lt;p&gt;So let&amp;#39;s start by creating a build system from scratch. To simplify the subject but still keep things interesting we will create a build system for a project in C that runs on the RX63N (just because I have one lying around)&lt;/p&gt;

&lt;h2&gt;The RX63N&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/rx63n.jpg&quot; alt=&quot;RX63N evaluation board&quot;&gt;&lt;/p&gt;

&lt;p&gt;This is a nifty little evaluation board for the &lt;a href=&quot;http://www.glyn.de/Produkte/Mikrocontroller/RENESAS/RX63N-SUPPORT-Videos&quot;&gt;RX63N 32bit CPU by Renesas&lt;/a&gt;(link is in German). The RX63N has ethernet and USB capabilities baked in, as well as a whole host of other &amp;quot;embedded&amp;quot; stuff. For the acronym, soup you can look up SPI, Single-Wire, GPIO, PWM, EXTAL etc. &lt;/p&gt;

&lt;p&gt;I won&amp;#39;t really go into the guts of this little system because I won&amp;#39;t get to talk about Ruby at all. The idea is to take one of the example applications offered by Renesas and built it without the provided IDE while also talking about structuring C code and moving away from make&amp;#39;s legacy (I can hear the cries: &amp;quot;HERETIC! INFIDEL!&amp;quot;&amp;quot;)&lt;/p&gt;

&lt;p&gt;Moving away from make means we need a replacement for it, a DSL for building systems that can equal and surpass the capabilities offered by the most cryptical of build tools. Enter rake&lt;/p&gt;

&lt;h2&gt;Rake&lt;/h2&gt;

&lt;p&gt;Rake is an equivalent of make written in Ruby and well known to Rubyists. It&amp;#39;s used every day to run tests, perform database migrations etc.  It&amp;#39;s &amp;quot;task management&amp;quot; software, but let&amp;#39;s not confuse it with a TODO list app. At it&amp;#39;s core it&amp;#39;s dependency resolution software.&lt;/p&gt;

&lt;p&gt;At this point I will skip the introduction to rake and it&amp;#39;s capabilities (which I had written and I removed because it turned into another two articles) and assume you know the basics (read &lt;a href=&quot;http://martinfowler.com/articles/rake.html&quot;&gt;Martin Fowler&amp;#39;s article&lt;/a&gt; from way back in &amp;#39;05 and the &lt;a href=&quot;http://rake.rubyforge.org/&quot;&gt;documentation&lt;/a&gt; to get up to speed)&lt;/p&gt;

&lt;p&gt;Rake&amp;#39;s strong point is that it is a simple DSL on top of Ruby and that apart from the few primitives it defines everything else in your Rakefile (i.e. the equivalent to a Makefile) is Ruby code.&lt;/p&gt;

&lt;p&gt;I cannot even begin to describe what a difference this makes when trying to build stuff. Instead hopefully I will demostrate it over a long series of articles that are going to incrementally compose part of a complex system. &lt;/p&gt;

&lt;p&gt;The original &amp;quot;build system&amp;quot; whose structure and concepts are the basis for these articles is ~8K lines of Ruby. It turns out the term &amp;quot;build system&amp;quot; is not accurate anymore. &amp;quot;Total Development Environment Control&amp;quot; is a much more appropriate term. It has spawned a few articles in it&amp;#39;s day, mainly concerning Ruby performance under Windows and rake trivia.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/software/2011/05/10/ruby-performance-what-a-difference-the-compiler-makes&quot;&gt;Ruby Performance: What a difference the compiler makes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/software/2011/05/20/rake-performance-sh-im-working&quot;&gt;rake performance: sh...I&amp;#39;m working&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/software/2011/06/08/rake-performance-check-the-mirror&quot;&gt;rake performance: check the mirror&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/software/2011/08/09/script-performance&quot;&gt;Script performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/software/2012/01/13/rake-dynamic-prerequisites&quot;&gt;rake dynamic prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/software/2012/04/24/ruby-performance-improvements-on-windows&quot;&gt;Ruby performance improvements on Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The time has come to extract the core of this system, the part that actually builds C applications and see how it holds up after three &amp;quot;incarnations&amp;quot;.&lt;/p&gt;

&lt;p&gt;So in the next few posts, while we run the RX63N through it&amp;#39;s paces, we&amp;#39;ll go through:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Building C code with rake&lt;/li&gt;
&lt;li&gt;DRY Build Systems in rake and managing the Ruby code base.&lt;/li&gt;
&lt;li&gt;A structure for component-based embedded C systems&lt;/li&gt;
&lt;li&gt;Managing cross-platform compilation and multi-platform C code bases&lt;/li&gt;
&lt;li&gt;Getting free of the IDE while still being able to debug&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And to make matters more interesting I&amp;#39;ll do it on Windows but make sure it runs on Linux as well so that we can have as direct a comparison as possible. To that effect, instead of using the Renesas provided (and quite expensive) toolchain I&amp;#39;m going to use the &lt;a href=&quot;http://www.kpitgnutools.com/index.php&quot;&gt;KPIT GNU toolchain&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now all I need is a nifty name for the series!&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Oct 2013 01:00:00 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2013/10/22/building-with-rake-I</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2013/10/22/building-with-rake-I</guid>
      </item>
    
      <item>
        <title>Building a vagrant guest plugin for QNX</title>
        <description>&lt;p&gt;The yak shaving expedition continues...&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/software/2013/10/18/qnx-vagrant&quot;&gt;Previously&lt;/a&gt; I set out to create a base box for QNX and naively expected to do a &lt;em&gt;vagrant up&lt;/em&gt; and have everything work. HA!&lt;/p&gt;

&lt;p&gt;Vagrant was very offended at my presumption and started going on about how it was impossible to recognise the OS I was trying to use.&lt;/p&gt;

&lt;p&gt;So I entered the magical world of vagrant &lt;a href=&quot;http://docs.vagrantup.com/v2/plugins/development-basics.html&quot;&gt;plugins&lt;/a&gt; and specifically &lt;a href=&quot;http://docs.vagrantup.com/v2/plugins/guests.html&quot;&gt;guest&lt;/a&gt; and &lt;a href=&quot;http://docs.vagrantup.com/v2/plugins/guest-capabilities.html&quot;&gt;guest capability&lt;/a&gt; plugins&lt;/p&gt;

&lt;p&gt;Let me start by saying that the vagrant API is beautifuly done. Simple, flexible and cleanly coded. The only downside, which is a result of this flexibility, is that you won&amp;#39;t ever get an exhaustive reference. You have to dive into the code!&lt;/p&gt;

&lt;p&gt;Now, to build a guest plugin there are four things that need to be defined:&lt;/p&gt;

&lt;h2&gt;Guest&lt;/h2&gt;

&lt;p&gt;The guest plugin needs it&amp;#39;s name and one method, detect? and looks like this&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;vagrant&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;VagrantPlugins&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;GuestQNX&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Guest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Vagrant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:guest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;detect?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;communicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;uname -s | grep QNX&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We did say that QNX is BSD-like, didn&amp;#39;t we?&lt;/p&gt;

&lt;h2&gt;Guest capabilities&lt;/h2&gt;

&lt;p&gt;With a bit of trial and error I figured out the minimum amount of capabilities that a guest plugin must have to survive booting and shutting down.&lt;/p&gt;

&lt;p&gt;These are &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/damphyr/vagrant-qnx/blob/master/vagrant-guest-qnx/lib/qnx/vagrant/cap/configure_networks.rb&quot;&gt;configure_networks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/damphyr/vagrant-qnx/blob/master/vagrant-guest-qnx/lib/qnx/vagrant/cap/halt.rb&quot;&gt;halt&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I added &lt;a href=&quot;https://github.com/damphyr/vagrant-qnx/blob/master/vagrant-guest-qnx/lib/qnx/vagrant/cap/change_hostname.rb&quot;&gt;change_hostname&lt;/a&gt; just because it was easy.&lt;/p&gt;

&lt;p&gt;Instead of listing here the implementation code and make this post miles long with copy-paste-able information why don&amp;#39;t you head on to &lt;a href=&quot;http://https://github.com/damphyr/vagrant-qnx/tree/master/vagrant-guest-qnx&quot;&gt;github&lt;/a&gt; and browse at leisure?&lt;/p&gt;

&lt;h2&gt;What took you so long?&lt;/h2&gt;

&lt;p&gt;So a few things that I had to get right for this plugin to work.&lt;/p&gt;

&lt;h3&gt;Gem structure&lt;/h3&gt;

&lt;p&gt;I&amp;#39;m not really sure, but a file named exactly like your plugin (in this case vagrant-guest-qnx.rb) at the top of your gem&amp;#39;s structure seems to be what vagrant expects. Didn&amp;#39;t actually see it documented anywhere but I browsed several 3rd party plugins and copied the structure from vagrant-berkshelf.&lt;/p&gt;

&lt;p&gt;I lifted the handy loader guard there as well:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; 
 &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;vagrant&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LoadError&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;The Vagrant Guest QNX plugin must be run within vagrant&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So this code won&amp;#39;t give you ugly stacktraces by chance.&lt;/p&gt;

&lt;h3&gt;The shell&lt;/h3&gt;

&lt;p&gt;This actually cost quite a bit of time. Vagrant generally has awesome logging, very detailed, but in this case it kept exiting with &amp;quot;no error message&amp;quot; so I had to dig in and use the magical powers of sprinkled puts. Turns out all machine.communicate.execute calls were returning exit status 126.&lt;/p&gt;

&lt;p&gt;Now for all you youngsters out there, 126 and 127 are usually shell code for &amp;quot;bloody hell, I can&amp;#39;t find what you want me to run&amp;quot;. And as it turns out, when communicating over ssh vagrant defaults to running everything with bash.&lt;/p&gt;

&lt;p&gt;Unfortunately bash is not available on stock QNX which uses ksh and links it to /bin/sh. So we need &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;sh&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;in the Vagrantfile.&lt;/p&gt;

&lt;h3&gt;Shared folders&lt;/h3&gt;

&lt;p&gt;There are no VMWare Tools or Guest Additions for QNX. I don&amp;#39;t expect there will ever be. Yet Vagrant tries to establish a share between host and the VM and (in by now typical fashion) ends up hanging forever. So one more addition to the Vagrantfile is needed&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;synced_folder&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/vagrant&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:disabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And that&amp;#39;s it!&lt;/p&gt;

&lt;h2&gt;Tadaaa!&lt;/h2&gt;

&lt;p&gt;This is the bare minimum Vagrantfile needed to operate the base box you created by faithfully following &lt;a href=&quot;software/2013/10/18/qnx-vagrant&quot;&gt;my instructions&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Vagrantfile API/syntax version. Don&amp;#39;t touch unless you know what you&amp;#39;re doing!&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;VAGRANTFILE_API_VERSION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Vagrant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;VAGRANTFILE_API_VERSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;qnx65&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;box_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;qnx65sp1.box&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;sh&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;synced_folder&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/vagrant&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:disabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will need to install the vagrant-guest-qnx plugin (yes, it&amp;#39;s up on rubygems)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;vagrant plugin install vagrant-guest-qnx&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are also a few constraints on the QNX VM:&lt;/p&gt;

&lt;p&gt;Because there is no sudo in the stock VM everything is done with su. For that reason the default no-password setting for root is still there. For the purposes of this yak shaving expedition that is more than enough. There is a sudo package for QNX and if by some miracle someone is interested, a pull request will be very welcome.&lt;/p&gt;

&lt;p&gt;Halting does not shutdown very fast. Although shutdown is performed, because there are no VM extensions the VM is still listed as running. So you have to wait for the forced shutdown. Not very nice but good enough.&lt;/p&gt;

&lt;p&gt;I now declare this yak shaved!&lt;/p&gt;
</description>
        <pubDate>Sat, 19 Oct 2013 01:00:00 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2013/10/19/vagrant-guest-qnx</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2013/10/19/vagrant-guest-qnx</guid>
      </item>
    
      <item>
        <title>Vagrant with QNX Neutrino</title>
        <description>&lt;p&gt;&lt;em&gt;If you don&amp;#39;t know what QNX is don&amp;#39;t be scared, but if you don&amp;#39;t know what vagrant is this post is probably not for you :) &lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Most of my career I have lamented not being able to use the best and most exciting tools because they just won&amp;#39;t work for whatever I have to get running at the time.&lt;/p&gt;

&lt;p&gt;Working with Windows you learn very fast to not expect much comfort, or support, or sane functioning command line interfaces for that matter. But I love edge cases, they represent a chalenge.&lt;/p&gt;

&lt;p&gt;So for the past week or so I have been putting together a setup for QNX Neutrino 6.5 machines.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.qnx.com/products/neutrino-rtos/neutrino-rtos.html&quot;&gt;QNX Neutrino&lt;/a&gt; is a real time operating system offered by QNX Software Systems which apparently belongs to RIM now. It&amp;#39;s a nifty microkernel RTOS, very Unix-like, more BSD than Linux in some ways and you can add all kinds of open source goodies to it.&lt;/p&gt;

&lt;p&gt;QNX is also very kind and offers a VMWare VM with the latest version of the OS. For the task at hand that was a godsend. So I made a few copies and started experimenting with the setup until it was done. &lt;/p&gt;

&lt;p&gt;And then the yak shaving started.&lt;/p&gt;

&lt;p&gt;See, every time I made a mistake I just deleted the VM, made another copy from the QNX master and continued the work. Sounds familiar? &lt;/p&gt;

&lt;p&gt;It&amp;#39;s more or less the vagrant work flow: Define your VM, do &lt;em&gt;vagrant up&lt;/em&gt; to start it, do the work with &lt;em&gt;vagrant ssh&lt;/em&gt; and when you&amp;#39;re finished &lt;em&gt;vagrant halt&lt;/em&gt; or &lt;em&gt;vagrant destroy&lt;/em&gt; if you went too far. The idea was to use a shell provisioning setup and easily test the setup scripts.&lt;/p&gt;

&lt;p&gt;How hard can it be to build a vagrant basebox for QNX? Considering it&amp;#39;s 23:00 and I started this at around 19:00 I would not say it&amp;#39;s easy.&lt;/p&gt;

&lt;h2&gt;Creating the basebox&lt;/h2&gt;

&lt;p&gt;The QNX VM came in VMWare format, I have a VM Workstation license and there is a (commercial) vagrant plugin for VMWare which I promptly acquired. I did not want to go through the trouble of converting the QNX VM from VMWare to VirtualBox just in case the yak became a yak herd. &lt;/p&gt;

&lt;p&gt;Before we package the whole thing there are a few things that need to be done on the QNX VM to allow vagrant to work with it. Everything listed is run as root.&lt;/p&gt;

&lt;h3&gt;Setup sshd&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#! /bin/sh&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#setup ssh access &lt;/span&gt;
random -t
&lt;span class=&quot;c&quot;&gt;#use emtpy passphrases&lt;/span&gt;
ssh-keygen -t rsa -f /etc/ssh/ssh_host_key -b 2048
ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key
ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key
&lt;span class=&quot;c&quot;&gt;#and start the server&lt;/span&gt;
/usr/sbin/sshd&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Also, edit /etc/rc.d/rc.local and add the line &lt;em&gt;/usr/sbin/sshd&amp;amp;&lt;/em&gt; at the end so that sshd starts when the machine reboots.&lt;/p&gt;

&lt;h3&gt;Setup the vagrant user&lt;/h3&gt;

&lt;p&gt;I really dislike this because I have not found a way to automate it further. You need to go through the passwd questions manually.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#! /bin/sh&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Accept default values and use vagrant as the password&lt;/span&gt;
passwd vagrant&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After this you need to add &amp;#39;users:x:100:&amp;#39; at the end of /etc/group&lt;/p&gt;

&lt;h3&gt;Passwordless ssh access&lt;/h3&gt;

&lt;p&gt;Get the &lt;a href=&quot;https://github.com/mitchellh/vagrant/blob/master/keys/vagrant.pub&quot;&gt;vagrant insecure public key&lt;/a&gt; and copy it into /home/vagrant/.ssh/authorized_keys. Then to make sure do the following&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;chown -R vagrant:users /home/vagrant/.ssh
chmod -R &lt;span class=&quot;m&quot;&gt;700&lt;/span&gt; /home/vagrant/.ssh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If the permissions are not set corretly openSSH will not login succesfully (and you will not know why!)&lt;/p&gt;

&lt;h3&gt;Actually create the base box&lt;/h3&gt;

&lt;p&gt;The basebox format is actually very basic: Whatever VM files your provider requires to start the VM plus a metadata.json file with the following content:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;provider:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;vmware_workstation&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Values that are valid at the time of writing are &amp;quot;vmware&lt;em&gt;workstation&amp;quot;, &amp;quot;vmware&lt;/em&gt;fusion&amp;quot; and &amp;quot;virtualbox&amp;quot;.&lt;/p&gt;

&lt;p&gt;For VMWare VMs the following should do the trick when run in the VMs directory.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;tar cvf qnx65.box *.vmdk *.vmx *.vmxf *.nvram metadata.json&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(add the .json file yourself :) )&lt;/p&gt;

&lt;h2&gt;Enter Vagrant&lt;/h2&gt;

&lt;p&gt;So we do the &lt;em&gt;vagrant init&lt;/em&gt; and edit the Vagrantfile&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;VAGRANTFILE_API_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Vagrant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;VAGRANTFILE_API_VERSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;qnx65&amp;quot;&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;qnx65.box&amp;quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#No real URL, the basebox was just in the same directory&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first &lt;em&gt;vagrant up&lt;/em&gt; needs to specify the provider otherwise vagrant defaults to Virtualbox&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;vagrant up --provider vmware_workstation&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, if you did not setup ssh correctly then vagrant is going to hang with &amp;quot;Waiting for VM to boot. This can take a few minutes&amp;quot;. This can be easily ascertained if you set the environment variable VAGRANT_LOG=debug and watch how vagrant repeatedly tries to connect and fails miserably never giving up. Go back and set those permissions...&lt;/p&gt;

&lt;p&gt;If you have setup ssh correctly then you&amp;#39;re going to get a &amp;quot;The guest operating system of the machine could not be detected!&amp;quot;. So much for Unix-like. &lt;/p&gt;

&lt;p&gt;Fun fact: If ssh is not correctly setup and &lt;em&gt;vagrant up&lt;/em&gt; hangs, then you can control-C and then try &lt;em&gt;vagrant halt&lt;/em&gt;. After an inordinate amount of time the VM is going to  shutdown. If ssh does work then &lt;em&gt;vagrant halt&lt;/em&gt; will die horribly complaining that it cannot recognise the OS.&lt;/p&gt;

&lt;p&gt;Which means that there&amp;#39;s going to be a continuation to this adventure, where we dwell into the creation of a vagrant guest plugin. This yak is not yet completely shaved.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;There&amp;#39;s a &lt;a href=&quot;/software/2013/10/18/vagrant-guest-qnx&quot;&gt;follow up post&lt;/a&gt; with the QNX guest plugin&lt;/em&gt; &lt;/p&gt;
</description>
        <pubDate>Fri, 18 Oct 2013 01:00:00 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2013/10/18/qnx-vagrant</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2013/10/18/qnx-vagrant</guid>
      </item>
    
  </channel>
</rss>