<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ampelofilosofies</title>
    <description>Random comments on random subjects in random language</description>
    <link>http://www.ampelofilosofies.gr</link>
    <atom:link href="http://www.ampelofilosofies.gr/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Building with rake: Setup</title>
        <description>&lt;p&gt;This is the second article in the series,the whole thing starts &lt;a href=&quot;/software/2013/10/21/building-with-rake-I&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And while the series is about building C systems with Rake there is a lot of preparation work to be done before we can actually run the first file through the compiler.&lt;/p&gt;

&lt;h2&gt;Setting up the environment&lt;/h2&gt;

&lt;p&gt;Actually setting up the environment, installing the editor, the IDE, the compiler toolchain and making sure they are accessible from the terminal or the IDE etc. is a task most developers do not consciously consider. As a consequence we tend to underestimate the amount of work required to do it right and the actual cost of getting it wrong.&lt;/p&gt;

&lt;p&gt;Oh, and this is dangerous ground. Editor wars, OS wars, the death-through-infrastructure syndrome and a zillion other reasons why it&amp;#39;s not going to work.&lt;/p&gt;

&lt;p&gt;This is a very important step in every project, I can&amp;#39;t stress this enough. Consistency in the development environment is the single most important point when working with embedded software. Consider that apart from the usual software errors you have to deal with new, untested or flaky hardware. Just check the picture of a  &amp;quot;smoke tested&amp;quot; board, cuplrit of a failed long running test. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/smoke_test.png&quot; alt=&quot;smoke test&quot;&gt; &lt;/p&gt;

&lt;p&gt;And new electronics are ALWAYS a potential source of errors. Come to think of it, you can take &amp;#39;potential&amp;#39; out of that sentence and it would still be true.&lt;/p&gt;

&lt;p&gt;The difficulty of locating the cause for a bug increases exponentially with every source of errors. So we need as few error sources as possible. As a first step we establish a consistent development environment so that we can exclude differences between workstations as a culprit.&lt;/p&gt;

&lt;p&gt;As a bonus, no developer can use &amp;#39;it works for me&amp;#39; as a cop out when something breaks.&lt;/p&gt;

&lt;p&gt;Take care not to misunderstand &amp;#39;consistent&amp;#39; for &amp;#39;limited&amp;#39;. With provisioning tools like Chef, Puppet or Ansible there is very little reason why you can&amp;#39;t satisfy every developer&amp;#39;s wishes when it comes to editor, IDE or any other productivity tool.&lt;/p&gt;

&lt;p&gt;And yes, all of this is also true on Windows. Painful, but true.&lt;/p&gt;

&lt;h2&gt;Practical matters&lt;/h2&gt;

&lt;p&gt;What we&amp;#39;re going to need is &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;VirtualBox&lt;/a&gt;, &lt;a href=&quot;http://www.vagrantup.com/&quot;&gt;vagrant&lt;/a&gt;, a CentOS basebox and optionally a git repository containing a bunch of &lt;a href=&quot;http://www.opscode.com/chef/&quot;&gt;Chef&lt;/a&gt; recipes.&lt;/p&gt;

&lt;p&gt;With these ingredients in the end we will cook up a VM that will be our development environment with the RX63N board.&lt;/p&gt;

&lt;p&gt;The CentOS choice is dictated by the fact that the &lt;a href=&quot;http://www.kpitgnutools.com/latestToolchain.php&quot;&gt;KPIT toolchain&lt;/a&gt; comes packaged in RPM format. It also has to be the 32bit version, since KPIT does not come compiled for a x64 Linux flavour.&lt;/p&gt;

&lt;p&gt;The base box proved to be problematic as &lt;a href=&quot;http://www.vagrantbox.es/&quot;&gt;http://www.vagrantbox.es/&lt;/a&gt; lists only one recent CentOS box as 32bit but the base box is actually 64bit. Well, creating base boxes is easy. There&amp;#39;s &lt;a href=&quot;https://github.com/okfn/ckan/wiki/How-to-Create-a-CentOS-Vagrant-Base-Box&quot;&gt;blog posts&lt;/a&gt; about it.&lt;/p&gt;

&lt;p&gt;Originally I wrote &amp;quot;there&amp;#39;s more interesting things to talk about&amp;quot;. But it seems that once more the combination of versions needed for the task requires some digging and further work. So, following the instructions on the provided link I proceeded to create a 32 bit CentOS 6.5 base box for vagrant. The set of instructions is &lt;a href=&quot;https://github.com/damphyr/embedded-C-rake/blob/master/setup/CentOSBaseBox.md&quot;&gt;up on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Hints &amp;amp; Tips for the decrepit mind&lt;/h2&gt;

&lt;p&gt;If you&amp;#39;re like me you&amp;#39;ll need to be reminded that on vagrant base boxes the root password is &amp;#39;vagrant&amp;#39;.&lt;/p&gt;

&lt;h2&gt;VM at hand&lt;/h2&gt;

&lt;p&gt;There are a few things to do that for convenience&amp;#39;s sake I will skip since this is a personal sandbox project.&lt;/p&gt;

&lt;p&gt;There should be a project user (or depending on how far you want to take it, one account per team member). Things like repository access, SSH keys etc. need to be setup. For convenience everything will be done with the vagrant user.&lt;/p&gt;

&lt;p&gt;Also, to keep software updates under control, there should be a chef/puppet/ansible installation and the contents of the VM should be managed as source. Since this is a one man team environment and there&amp;#39;s only really two software packages to install we will skip the overhead for now.&lt;/p&gt;

&lt;p&gt;It should be noted though that between the time I started putting this environment together and now (which is about 5 months) there have been 4 new vagrant versions, a major CentOS update, 3 KPIT toolchain updates (one major version), a new Ruby version and uncountable gem updates. At the rate I&amp;#39;m writing I will be forced to add Chef recipes just to be able to keep the environment current.&lt;/p&gt;

&lt;p&gt;In the next installment we&amp;#39;ll setup the toolchain and the RX63N board and figure out how to call everything from rake.&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Mar 2014 14:00:00 +0100</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2014/03/15/building-with-rake-II</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2014/03/15/building-with-rake-II</guid>
      </item>
    
      <item>
        <title>ForgetMeNot: File.join weirdness</title>
        <description>&lt;p&gt;I&amp;#39;m busy with a paid-for-by-an-actual-client system based on the Renesas RX630 so the RX63N adventure has been tabled for a while.&lt;/p&gt;

&lt;p&gt;Still I stumbled on a little Ruby weirdness today that I have to take down just in case.&lt;/p&gt;

&lt;p&gt;So when handling paths, doing a File.join(&amp;quot;/foo/foo&amp;quot;,&amp;quot;../../bar&amp;quot;) should give /bar back. &lt;/p&gt;

&lt;p&gt;If by some twist of luck there&amp;#39;s a space before those first two dots though, the results are quite unexpected:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p195&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/foo/foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; ../../bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/foo/foo/bar&amp;quot;&lt;/span&gt;
 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The dots are somehow stripped away. Btw. when doing the same with only one directory level:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p195&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;010&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;../../bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/bar&amp;quot;&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p195&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;011&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; ../../bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/foo/bar&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Also, this only happens when there are two sets of dots (&amp;quot;../../&amp;quot;). When there is only one then the sneaky whitespace is easier to detect:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p195&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;012&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; ../bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/foo/ ../bar&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 04 Dec 2013 19:00:00 +0100</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2013/12/04/weird-file-joins</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2013/12/04/weird-file-joins</guid>
      </item>
    
      <item>
        <title>ATCAR: The Tin Robot Menace</title>
        <description>&lt;p&gt;What do you get if you put together an Android starter kit, several empty cans, some broken household items, two geekdads and a four year old?&lt;/p&gt;

&lt;p&gt;A kick-ass maker weekend in Berlin!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://plus.google.com/u/0/114681917079512934320/posts?partnerid=gplp0&quot;&gt;dianthos&lt;/a&gt; welcomed me with &amp;quot;I got these tin cans and this one servo motor, let&amp;#39;s build a robot!&amp;quot;. Obviously the response was &amp;quot;Excellent! Let&amp;#39;s go shopping&amp;quot;.&lt;/p&gt;

&lt;h3&gt;Planning&lt;/h3&gt;

&lt;p&gt;Friday evening was the planning stage. Mostly to decide what the robot wil look like and what we can actually do with the available materials.&lt;/p&gt;

&lt;p&gt;The original idea came to dianthos while looking at &lt;a href=&quot;http://spoonful.com/crafts/can-do-robots&quot;&gt;tin can toys&lt;/a&gt; so we spend a bit choosing the cans and figuring out if and how the Arduino UNO would fit in there.&lt;/p&gt;

&lt;p&gt;While there was no shortage of tin cans and odd bits and pieces,  our electronics stockpile was a bit limited:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One 180 degree servo motor&lt;/li&gt;
&lt;li&gt;A couple of buttons&lt;/li&gt;
&lt;li&gt;One potentiometer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We had enough LEDs and resistors and there were a few other bits and pieces in the &lt;a href=&quot;http://shop.fritzing.org/products/fritzing-starter-kit-with-arduino-uno&quot;&gt;starter kit&lt;/a&gt; but what we really were interested in was the servo motor.&lt;/p&gt;

&lt;p&gt;At the end the plan called for a robot that swivels it&amp;#39;s torso and has LEDs for eyes.&lt;/p&gt;

&lt;h3&gt;Shopping&lt;/h3&gt;

&lt;p&gt;Saturday was off to geekdad paradise: Conrad and Bauhaus. For those not familiar with german brands Conrad is an electronics shop and Bauhaus is a DIY shop. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/tinanton_materials.jpg&quot; alt=&quot;materials for the dread robot&quot;&gt;  And to make things difficult, our goal was to NOT buy a brand new Dremel drill just so we can drill a couple of holes in a tin can. We came very close to not achieving the goal.&lt;/p&gt;

&lt;p&gt;Total cost of the materials was about 10€ but our bill run quite a bit higher (useful advice to all wives out there: don&amp;#39;t let your man go to a DIY &lt;em&gt;and&lt;/em&gt; an electronics shop with his best mate. Some cliches are too strong for even the best of us).&lt;/p&gt;

&lt;p&gt;Our materials at hand it was time for coding. This was actually the easiest task. Fritzing and Arduino put together make hobby electronics a breeze.&lt;/p&gt;

&lt;p&gt;Our robot uses the servo to swivel it&amp;#39;s torso 180 degrees, has a red LED for it&amp;#39;s cyclopean eye and the USB light for hands. We took the three Arduino examples Blink, Button and Servo.Knob.&lt;/p&gt;

&lt;p&gt;To make it more interesting we decided that the robot would have two modes of operating. In one the light remains on and the robot can be swiveled using the potentiometer, in the other the robot swivels automatically and the led blinks. Switching between modes is controlled through a button that toggles between the two modes.&lt;/p&gt;

&lt;p&gt;The code for all of this for all of this is just a bit of organisation around code of the three examples and it fits in a &lt;a href=&quot;https://gist.github.com/damphyr/7514713&quot;&gt;gist&lt;/a&gt;. The circuitry is similarly the aggregation of the corresponding examples in Fritzing:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/tinanton_breadboard.jpg&quot; alt=&quot;the breadboard version&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Sunday&lt;/h3&gt;

&lt;p&gt;So with the circuitry and the software decided we proceeded in assembling the robot. Which took us almost the whole day!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/tinanton_assembly.jpg&quot; alt=&quot;starting&quot;&gt; &lt;/p&gt;

&lt;p&gt;the sinister red eye was entirely intended :) It is the 50th Doctor Who anniversary, so the obligatory &amp;quot;Exterminate&amp;quot; was the soundtrack during the robot&amp;#39;s operation.&lt;/p&gt;

&lt;p&gt;ATCAR is up for a revision, it should get a control board for the potentiometer and the button (at the moment there&amp;#39;s just cables leading to the breadboard) and a future version 2.0 will probably incorporate a battery power supply.&lt;/p&gt;

&lt;p&gt;Arduino is so much fun! And trust me, the best way to get the kids involved is to get the geekdads excited!&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Nov 2013 00:00:00 +0100</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2013/11/13/tinanton</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2013/11/13/tinanton</guid>
      </item>
    
      <item>
        <title>Building with rake: Introduction</title>
        <description>&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This is the introduction to a series of articles I&amp;#39;ve been meaning to write for a while now. I&amp;#39;ve been working with Ruby for the last 12 years now and I&amp;#39;ve never done Rails or - the occasional Sinatra app aside - web applications.&lt;/p&gt;

&lt;p&gt;So this series will serve as an example of what you can do with Ruby away from Rails and also help me clarify and organise my own knowledge. Code samples will go up on GitHub.&lt;/p&gt;

&lt;p&gt;So let&amp;#39;s start by creating a build system from scratch. To simplify the subject but still keep things interesting we will create a build system for a project in C that runs on the RX63N (just because I have one lying around)&lt;/p&gt;

&lt;h2&gt;The RX63N&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/rx63n.jpg&quot; alt=&quot;RX63N evaluation board&quot;&gt;&lt;/p&gt;

&lt;p&gt;This is a nifty little evaluation board for the &lt;a href=&quot;http://www.glyn.de/Produkte/Mikrocontroller/RENESAS/RX63N-SUPPORT-Videos&quot;&gt;RX63N 32bit CPU by Renesas&lt;/a&gt;(link is in German). The RX63N has ethernet and USB capabilities baked in, as well as a whole host of other &amp;quot;embedded&amp;quot; stuff. For the acronym, soup you can look up SPI, Single-Wire, GPIO, PWM, EXTAL etc. &lt;/p&gt;

&lt;p&gt;I won&amp;#39;t really go into the guts of this little system because I won&amp;#39;t get to talk about Ruby at all. The idea is to take one of the example applications offered by Renesas and built it without the provided IDE while also talking about structuring C code and moving away from make&amp;#39;s legacy (I can hear the cries: &amp;quot;HERETIC! INFIDEL!&amp;quot;&amp;quot;)&lt;/p&gt;

&lt;p&gt;Moving away from make means we need a replacement for it, a DSL for building systems that can equal and surpass the capabilities offered by the most cryptical of build tools. Enter rake&lt;/p&gt;

&lt;h2&gt;Rake&lt;/h2&gt;

&lt;p&gt;Rake is an equivalent of make written in Ruby and well known to Rubyists. It&amp;#39;s used every day to run tests, perform database migrations etc.  It&amp;#39;s &amp;quot;task management&amp;quot; software, but let&amp;#39;s not confuse it with a TODO list app. At it&amp;#39;s core it&amp;#39;s dependency resolution software.&lt;/p&gt;

&lt;p&gt;At this point I will skip the introduction to rake and it&amp;#39;s capabilities (which I had written and I removed because it turned into another two articles) and assume you know the basics (read &lt;a href=&quot;http://martinfowler.com/articles/rake.html&quot;&gt;Martin Fowler&amp;#39;s article&lt;/a&gt; from way back in &amp;#39;05 and the &lt;a href=&quot;http://rake.rubyforge.org/&quot;&gt;documentation&lt;/a&gt; to get up to speed)&lt;/p&gt;

&lt;p&gt;Rake&amp;#39;s strong point is that it is a simple DSL on top of Ruby and that apart from the few primitives it defines everything else in your Rakefile (i.e. the equivalent to a Makefile) is Ruby code.&lt;/p&gt;

&lt;p&gt;I cannot even begin to describe what a difference this makes when trying to build stuff. Instead hopefully I will demostrate it over a long series of articles that are going to incrementally compose part of a complex system. &lt;/p&gt;

&lt;p&gt;The original &amp;quot;build system&amp;quot; whose structure and concepts are the basis for these articles is ~8K lines of Ruby. It turns out the term &amp;quot;build system&amp;quot; is not accurate anymore. &amp;quot;Total Development Environment Control&amp;quot; is a much more appropriate term. It has spawned a few articles in it&amp;#39;s day, mainly concerning Ruby performance under Windows and rake trivia.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/software/2011/05/10/ruby-performance-what-a-difference-the-compiler-makes&quot;&gt;Ruby Performance: What a difference the compiler makes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/software/2011/05/20/rake-performance-sh-im-working&quot;&gt;rake performance: sh...I&amp;#39;m working&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/software/2011/06/08/rake-performance-check-the-mirror&quot;&gt;rake performance: check the mirror&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/software/2011/08/09/script-performance&quot;&gt;Script performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/software/2012/01/13/rake-dynamic-prerequisites&quot;&gt;rake dynamic prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/software/2012/04/24/ruby-performance-improvements-on-windows&quot;&gt;Ruby performance improvements on Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The time has come to extract the core of this system, the part that actually builds C applications and see how it holds up after three &amp;quot;incarnations&amp;quot;.&lt;/p&gt;

&lt;p&gt;So in the next few posts, while we run the RX63N through it&amp;#39;s paces, we&amp;#39;ll go through:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Building C code with rake&lt;/li&gt;
&lt;li&gt;DRY Build Systems in rake and managing the Ruby code base.&lt;/li&gt;
&lt;li&gt;A structure for component-based embedded C systems&lt;/li&gt;
&lt;li&gt;Managing cross-platform compilation and multi-platform C code bases&lt;/li&gt;
&lt;li&gt;Getting free of the IDE while still being able to debug&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And to make matters more interesting I&amp;#39;ll do it on Windows but make sure it runs on Linux as well so that we can have as direct a comparison as possible. To that effect, instead of using the Renesas provided (and quite expensive) toolchain I&amp;#39;m going to use the &lt;a href=&quot;http://www.kpitgnutools.com/index.php&quot;&gt;KPIT GNU toolchain&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now all I need is a nifty name for the series!&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Oct 2013 01:00:00 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2013/10/22/building-with-rake-I</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2013/10/22/building-with-rake-I</guid>
      </item>
    
      <item>
        <title>Building a vagrant guest plugin for QNX</title>
        <description>&lt;p&gt;The yak shaving expedition continues...&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/software/2013/10/18/qnx-vagrant&quot;&gt;Previously&lt;/a&gt; I set out to create a base box for QNX and naively expected to do a &lt;em&gt;vagrant up&lt;/em&gt; and have everything work. HA!&lt;/p&gt;

&lt;p&gt;Vagrant was very offended at my presumption and started going on about how it was impossible to recognise the OS I was trying to use.&lt;/p&gt;

&lt;p&gt;So I entered the magical world of vagrant &lt;a href=&quot;http://docs.vagrantup.com/v2/plugins/development-basics.html&quot;&gt;plugins&lt;/a&gt; and specifically &lt;a href=&quot;http://docs.vagrantup.com/v2/plugins/guests.html&quot;&gt;guest&lt;/a&gt; and &lt;a href=&quot;http://docs.vagrantup.com/v2/plugins/guest-capabilities.html&quot;&gt;guest capability&lt;/a&gt; plugins&lt;/p&gt;

&lt;p&gt;Let me start by saying that the vagrant API is beautifuly done. Simple, flexible and cleanly coded. The only downside, which is a result of this flexibility, is that you won&amp;#39;t ever get an exhaustive reference. You have to dive into the code!&lt;/p&gt;

&lt;p&gt;Now, to build a guest plugin there are four things that need to be defined:&lt;/p&gt;

&lt;h2&gt;Guest&lt;/h2&gt;

&lt;p&gt;The guest plugin needs it&amp;#39;s name and one method, detect? and looks like this&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;vagrant&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;VagrantPlugins&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;GuestQNX&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Guest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Vagrant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:guest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;detect?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;communicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;uname -s | grep QNX&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We did say that QNX is BSD-like, didn&amp;#39;t we?&lt;/p&gt;

&lt;h2&gt;Guest capabilities&lt;/h2&gt;

&lt;p&gt;With a bit of trial and error I figured out the minimum amount of capabilities that a guest plugin must have to survive booting and shutting down.&lt;/p&gt;

&lt;p&gt;These are &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/damphyr/vagrant-qnx/blob/master/vagrant-guest-qnx/lib/qnx/vagrant/cap/configure_networks.rb&quot;&gt;configure_networks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/damphyr/vagrant-qnx/blob/master/vagrant-guest-qnx/lib/qnx/vagrant/cap/halt.rb&quot;&gt;halt&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;I added &lt;a href=&quot;https://github.com/damphyr/vagrant-qnx/blob/master/vagrant-guest-qnx/lib/qnx/vagrant/cap/change_hostname.rb&quot;&gt;change_hostname&lt;/a&gt; just because it was easy.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instead of listing here the implementation code and make this post miles long with copy-paste-able information why don&amp;#39;t you head on to &lt;a href=&quot;http://https://github.com/damphyr/vagrant-qnx/tree/master/vagrant-guest-qnx&quot;&gt;github&lt;/a&gt; and browse at leisure?&lt;/p&gt;

&lt;h2&gt;What took you so long?&lt;/h2&gt;

&lt;p&gt;So a few things that I had to get right for this plugin to work.&lt;/p&gt;

&lt;h3&gt;Gem structure&lt;/h3&gt;

&lt;p&gt;I&amp;#39;m not really sure, but a file named exactly like your plugin (in this case vagrant-guest-qnx.rb) at the top of your gem&amp;#39;s structure seems to be what vagrant expects. Didn&amp;#39;t actually see it documented anywhere but I browsed several 3rd party plugins and copied the structure from vagrant-berkshelf.&lt;/p&gt;

&lt;p&gt;I lifted the handy loader guard there as well:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; 
 &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;vagrant&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LoadError&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;The Vagrant Guest QNX plugin must be run within vagrant&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So this code won&amp;#39;t give you ugly stacktraces by chance.&lt;/p&gt;

&lt;h3&gt;The shell&lt;/h3&gt;

&lt;p&gt;This actually cost quite a bit of time. Vagrant generally has awesome logging, very detailed, but in this case it kept exiting with &amp;quot;no error message&amp;quot; so I had to dig in and use the magical powers of sprinkled puts. Turns out all machine.communicate.execute calls were returning exit status 126.&lt;/p&gt;

&lt;p&gt;Now for all you youngsters out there, 126 and 127 are usually shell code for &amp;quot;bloody hell, I can&amp;#39;t find what you want me to run&amp;quot;. And as it turns out, when communicating over ssh vagrant defaults to running everything with bash.&lt;/p&gt;

&lt;p&gt;Unfortunately bash is not available on stock QNX which uses ksh and links it to /bin/sh. So we need &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;sh&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;in the Vagrantfile.&lt;/p&gt;

&lt;h3&gt;Shared folders&lt;/h3&gt;

&lt;p&gt;There are no VMWare Tools or Guest Additions for QNX. I don&amp;#39;t expect there will ever be. Yet Vagrant tries to establish a share between host and the VM and (in by now typical fashion) ends up hanging forever. So one more addition to the Vagrantfile is needed&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;synced_folder&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/vagrant&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:disabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And that&amp;#39;s it!&lt;/p&gt;

&lt;h2&gt;Tadaaa!&lt;/h2&gt;

&lt;p&gt;This is the bare minimum Vagrantfile needed to operate the base box you created by faithfully following &lt;a href=&quot;software/2013/10/18/qnx-vagrant&quot;&gt;my instructions&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Vagrantfile API/syntax version. Don&amp;#39;t touch unless you know what you&amp;#39;re doing!&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;VAGRANTFILE_API_VERSION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Vagrant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;VAGRANTFILE_API_VERSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;qnx65&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;box_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;qnx65sp1.box&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;sh&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;synced_folder&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/vagrant&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:disabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will need to install the vagrant-guest-qnx plugin (yes, it&amp;#39;s up on rubygems)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;vagrant plugin install vagrant-guest-qnx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are also a few constraints on the QNX VM:&lt;/p&gt;

&lt;p&gt;Because there is no sudo in the stock VM everything is done with su. For that reason the default no-password setting for root is still there. For the purposes of this yak shaving expedition that is more than enough. There is a sudo package for QNX and if by some miracle someone is interested, a pull request will be very welcome.&lt;/p&gt;

&lt;p&gt;Halting does not shutdown very fast. Although shutdown is performed, because there are no VM extensions the VM is still listed as running. So you have to wait for the forced shutdown. Not very nice but good enough.&lt;/p&gt;

&lt;p&gt;I now declare this yak shaved!&lt;/p&gt;
</description>
        <pubDate>Sat, 19 Oct 2013 01:00:00 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2013/10/19/vagrant-guest-qnx</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2013/10/19/vagrant-guest-qnx</guid>
      </item>
    
      <item>
        <title>Vagrant with QNX Neutrino</title>
        <description>&lt;p&gt;&lt;em&gt;If you don&amp;#39;t know what QNX is don&amp;#39;t be scared, but if you don&amp;#39;t know what vagrant is this post is probably not for you :) &lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Most of my career I have lamented not being able to use the best and most exciting tools because they just won&amp;#39;t work for whatever I have to get running at the time.&lt;/p&gt;

&lt;p&gt;Working with Windows you learn very fast to not expect much comfort, or support, or sane functioning command line interfaces for that matter. But I love edge cases, they represent a chalenge.&lt;/p&gt;

&lt;p&gt;So for the past week or so I have been putting together a setup for QNX Neutrino 6.5 machines.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.qnx.com/products/neutrino-rtos/neutrino-rtos.html&quot;&gt;QNX Neutrino&lt;/a&gt; is a real time operating system offered by QNX Software Systems which apparently belongs to RIM now. It&amp;#39;s a nifty microkernel RTOS, very Unix-like, more BSD than Linux in some ways and you can add all kinds of open source goodies to it.&lt;/p&gt;

&lt;p&gt;QNX is also very kind and offers a VMWare VM with the latest version of the OS. For the task at hand that was a godsend. So I made a few copies and started experimenting with the setup until it was done. &lt;/p&gt;

&lt;p&gt;And then the yak shaving started.&lt;/p&gt;

&lt;p&gt;See, every time I made a mistake I just deleted the VM, made another copy from the QNX master and continued the work. Sounds familiar? &lt;/p&gt;

&lt;p&gt;It&amp;#39;s more or less the vagrant work flow: Define your VM, do &lt;em&gt;vagrant up&lt;/em&gt; to start it, do the work with &lt;em&gt;vagrant ssh&lt;/em&gt; and when you&amp;#39;re finished &lt;em&gt;vagrant halt&lt;/em&gt; or &lt;em&gt;vagrant destroy&lt;/em&gt; if you went too far. The idea was to use a shell provisioning setup and easily test the setup scripts.&lt;/p&gt;

&lt;p&gt;How hard can it be to build a vagrant basebox for QNX? Considering it&amp;#39;s 23:00 and I started this at around 19:00 I would not say it&amp;#39;s easy.&lt;/p&gt;

&lt;h2&gt;Creating the basebox&lt;/h2&gt;

&lt;p&gt;The QNX VM came in VMWare format, I have a VM Workstation license and there is a (commercial) vagrant plugin for VMWare which I promptly acquired. I did not want to go through the trouble of converting the QNX VM from VMWare to VirtualBox just in case the yak became a yak herd. &lt;/p&gt;

&lt;p&gt;Before we package the whole thing there are a few things that need to be done on the QNX VM to allow vagrant to work with it. Everything listed is run as root.&lt;/p&gt;

&lt;h3&gt;Setup sshd&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#! /bin/sh&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#setup ssh access &lt;/span&gt;
random -t
&lt;span class=&quot;c&quot;&gt;#use emtpy passphrases&lt;/span&gt;
ssh-keygen -t rsa -f /etc/ssh/ssh_host_key -b 2048
ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key
ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key
&lt;span class=&quot;c&quot;&gt;#and start the server&lt;/span&gt;
/usr/sbin/sshd&amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Also, edit /etc/rc.d/rc.local and add the line &lt;em&gt;/usr/sbin/sshd&amp;amp;&lt;/em&gt; at the end so that sshd starts when the machine reboots.&lt;/p&gt;

&lt;h3&gt;Setup the vagrant user&lt;/h3&gt;

&lt;p&gt;I really dislike this because I have not found a way to automate it further. You need to go through the passwd questions manually.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#! /bin/sh&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Accept default values and use vagrant as the password&lt;/span&gt;
passwd vagrant
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After this you need to add &amp;#39;users:x:100:&amp;#39; at the end of /etc/group&lt;/p&gt;

&lt;h3&gt;Passwordless ssh access&lt;/h3&gt;

&lt;p&gt;Get the &lt;a href=&quot;https://github.com/mitchellh/vagrant/blob/master/keys/vagrant.pub&quot;&gt;vagrant insecure public key&lt;/a&gt; and copy it into /home/vagrant/.ssh/authorized_keys. Then to make sure do the following&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;chown -R vagrant:users /home/vagrant/.ssh
chmod -R 700 /home/vagrant/.ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If the permissions are not set corretly openSSH will not login succesfully (and you will not know why!)&lt;/p&gt;

&lt;h3&gt;Actually create the base box&lt;/h3&gt;

&lt;p&gt;The basebox format is actually very basic: Whatever VM files your provider requires to start the VM plus a metadata.json file with the following content:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;provider:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;vmware_workstation&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Values that are valid at the time of writing are &amp;quot;vmware&lt;em&gt;workstation&amp;quot;, &amp;quot;vmware&lt;/em&gt;fusion&amp;quot; and &amp;quot;virtualbox&amp;quot;.&lt;/p&gt;

&lt;p&gt;For VMWare VMs the following should do the trick when run in the VMs directory.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;tar cvf qnx65.box *.vmdk *.vmx *.vmxf *.nvram metadata.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(add the .json file yourself :) )&lt;/p&gt;

&lt;h2&gt;Enter Vagrant&lt;/h2&gt;

&lt;p&gt;So we do the &lt;em&gt;vagrant init&lt;/em&gt; and edit the Vagrantfile&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;VAGRANTFILE_API_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Vagrant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;VAGRANTFILE_API_VERSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;qnx65&amp;quot;&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;qnx65.box&amp;quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#No real URL, the basebox was just in the same directory&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first &lt;em&gt;vagrant up&lt;/em&gt; needs to specify the provider otherwise vagrant defaults to Virtualbox&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;vagrant up --provider vmware_workstation
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, if you did not setup ssh correctly then vagrant is going to hang with &amp;quot;Waiting for VM to boot. This can take a few minutes&amp;quot;. This can be easily ascertained if you set the environment variable VAGRANT_LOG=debug and watch how vagrant repeatedly tries to connect and fails miserably never giving up. Go back and set those permissions...&lt;/p&gt;

&lt;p&gt;If you have setup ssh correctly then you&amp;#39;re going to get a &amp;quot;The guest operating system of the machine could not be detected!&amp;quot;. So much for Unix-like. &lt;/p&gt;

&lt;p&gt;Fun fact: If ssh is not correctly setup and &lt;em&gt;vagrant up&lt;/em&gt; hangs, then you can control-C and then try &lt;em&gt;vagrant halt&lt;/em&gt;. After an inordinate amount of time the VM is going to  shutdown. If ssh does work then &lt;em&gt;vagrant halt&lt;/em&gt; will die horribly complaining that it cannot recognise the OS.&lt;/p&gt;

&lt;p&gt;Which means that there&amp;#39;s going to be a continuation to this adventure, where we dwell into the creation of a vagrant guest plugin. This yak is not yet completely shaved.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;There&amp;#39;s a &lt;a href=&quot;/software/2013/10/18/vagrant-guest-qnx&quot;&gt;follow up post&lt;/a&gt; with the QNX guest plugin&lt;/em&gt; &lt;/p&gt;
</description>
        <pubDate>Fri, 18 Oct 2013 01:00:00 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2013/10/18/qnx-vagrant</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2013/10/18/qnx-vagrant</guid>
      </item>
    
      <item>
        <title>ForgetMeNot:  Maintaining a cache for local bundler installs</title>
        <description>&lt;p&gt;Very often I find myself needing to install a certain set of gems without access to rubygems.org or sometimes without any network access.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://bundler.io/&quot;&gt;Bundler&lt;/a&gt; allows you perform bundle install from a cache. All you need to do is put all your gems in a vendor/cache directory where your Gemfile is and bundler will look in there if you call it with --local:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;bundle install --local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The really neat trick is that bundler will always update the cache if the vendor/cache directory is present. So doing a simple &lt;em&gt;bundle install&lt;/em&gt; with an empty vendor/cache will net you an up-to-date cache you can take with you offline.&lt;/p&gt;

&lt;p&gt;My typical use case for this is to use a Gemfile to describe my system&amp;#39;s gems (in really complicated cases there might be a couple of Gemfiles), add the vendor/cache directory, perform bundle install and commit everything but the Gemfile.lock file. &lt;/p&gt;

&lt;p&gt;In the developer VM then the environment:update task will perform a local bundle install. This way we have easy and consistent gem updates across the whole team.&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Oct 2013 11:00:00 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2013/10/14/local-bundler-installs</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2013/10/14/local-bundler-installs</guid>
      </item>
    
      <item>
        <title>ForgetMeNot:  Setting up SSH keys for Capistrano on Windows</title>
        <description>&lt;p&gt;New project, old problems.&lt;/p&gt;

&lt;p&gt;Getting familiar with the 3.0 version of Capistrano (the guys deserve praise for adopting the Rake DSL) and immediately I stumbled on the old &amp;quot;SSH passwordless logins won&amp;#39;t work on Windows&amp;quot; problem.  &lt;/p&gt;

&lt;p&gt;It&amp;#39;s a myth, but you have to fumble a bit till it can work. Did this 4 or 5 years ago (and it was slightly more work) and had to do it again this week, so here&amp;#39;s a forgetmenot on how to get Capistrano 3.x to use SSH keys for passwordless login on Windows7.&lt;/p&gt;

&lt;h3&gt;Generate your keys&lt;/h3&gt;

&lt;p&gt;No reason to go through it (which saves me like half a dozen steps from this list), but if you&amp;#39;re on Windows and you use puttygen please note that you will need to export the keys in OpenSSH format and copy the &lt;em&gt;exported&lt;/em&gt; public key in the authorized_keys file on the server side.&lt;/p&gt;

&lt;h3&gt;Copy the OpenSSH format key in C:\Users\your_username\.ssh&lt;/h3&gt;

&lt;p&gt;Now, in the *ix world keys and configuration are expected in ~/.ssh by default. Where you keep them on Windows doesn&amp;#39;t really matter, the  C:\Users\your_username\.ssh is just for conceptual consistency.&lt;/p&gt;

&lt;h3&gt;Tell Capistrano where to find the keys&lt;/h3&gt;

&lt;p&gt;The default value for key location in Capistrano is the *ixy one (doh!) so on Windows you need to go the extra mile.&lt;/p&gt;

&lt;p&gt;Now choosing C:\Users\your_username\.ssh gives us an advantage: Your keys are now in %USERPROFILE%\.ssh which means we can use the environment and get multiple user support for free. So in your stage deployment configuration set the Capistrano SSH options as follows:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ssh_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;USERPROFILE&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.ssh/key.id_rsa&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;do substitute key.id_rsa with whatever filename your keys are stored in plz ;)&lt;/p&gt;

&lt;p&gt;Also depending on the server setup there might be a :forward_agent option there or not, but if you&amp;#39;re doing :forward_agent magic with the server you don&amp;#39;t need me to tell you how to setup your ssh options.&lt;/p&gt;
</description>
        <pubDate>Fri, 27 Sep 2013 11:00:00 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2013/09/27/capistrano-windows-ssh</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2013/09/27/capistrano-windows-ssh</guid>
      </item>
    
      <item>
        <title>ForgetMeNot: SublimeText, jekyll and rake</title>
        <description>&lt;p&gt;&lt;em&gt;One more in the series of let-me-jot-this-down-cause-I-forget-easily articles&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the blog&amp;#39;s hiatus time I managed to switch from Textmate to SublimeText.&lt;/p&gt;

&lt;p&gt;The reason for switching has to do with SublimeText&amp;#39;s availability on all platforms I work with (namely I can get it to work on Windows). I&amp;#39;ve come to really like this editor with it&amp;#39;s simple JSON configuration and the lightning fast search facilities it offers. And I find increasingly annoying the need to switch outside the editor to perform tasks on the console.&lt;/p&gt;

&lt;p&gt;Luckily SublimeText has a nice and simple (again JSON based) batch execution system (called a Build System). Instead of duplicating knowledge I myself have found somewhere else, go check &lt;a href=&quot;http://addyosmani.com/blog/custom-sublime-text-build-systems-for-popular-tools-and-languages/&quot;&gt;this article by Addy Osmani&lt;/a&gt; which explains things very well.&lt;/p&gt;

&lt;p&gt;Now, switching the blog to jekyll also means I spent a lot more time within SublimeText when I write blogs. In typically lazy fashion I switched to the terminal for &lt;em&gt;jekyll build&lt;/em&gt;.  This got old very fast, so I was looking for a way to get a build system to work.&lt;/p&gt;

&lt;p&gt;The first thing was to call jekyll build directly, which went south pretty fast since I use rvm. The default OS X Ruby installation has actually never been used on my current machine.&lt;/p&gt;

&lt;p&gt;Using Addy&amp;#39;s article I figured out how to set the environment to set the rvm path. Now, instead of using &lt;em&gt;rvm-auto-ruby&lt;/em&gt; I just set the rvm default to the ruby version I use for my personal projects. All other installations don&amp;#39;t have the jekyll gem anyway.&lt;/p&gt;

&lt;p&gt;And instead of creating a build system for jekyll I just created a rakefile that calls &lt;em&gt;jekyll build&lt;/em&gt; and used the following as a build system&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;env&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;PATH&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;${HOME}/.rvm/bin:${PATH}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;LC_CTYPE&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;cmd&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;rake&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;file_regex&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;^(...*?):([0-9]*):?([0-9]*)&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That &lt;em&gt;&amp;quot;LC_CTYPE&amp;quot;:&amp;quot;UTF-8&amp;quot;&lt;/em&gt; is crucial, especially with the various greek, german and spanish UTF-8 characters loose on this blog. Jekyll chokes very fast (article number 3 to be exact) if it&amp;#39;s not set.&lt;/p&gt;

&lt;p&gt;The beauty of it is that the standard Ruby regex for errors still works and stacktraces are clickable and open the correct file within the editor. Sweet!&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Sep 2013 14:00:00 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2013/09/19/forgetmenot-sublime-jekyll-rake</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2013/09/19/forgetmenot-sublime-jekyll-rake</guid>
      </item>
    
      <item>
        <title>Baruco 2013</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/icanseethesea.jpg&quot; alt=&quot;I can see the sea&quot;&gt; Baruco is my excuse for the yearly pilgrimage to Barcelona.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s always a great pleasure coming back and the conference program is excellent, ram-packed with really really good talks. &lt;/p&gt;

&lt;p&gt;Truthfully, it&amp;#39;s just sheer pleasure to be able to sit back and watch a few talks without having to get up and run to prepare the next speaker ;).&lt;/p&gt;

&lt;p&gt;The organisation is very good and having gone through the ordeal with the EuRuKo team I&amp;#39;ll just  ignore any small faux-pas and smile. Kudos to the team for a job (very) well done. And guys...nobody expects the Wi-Fi to work.&lt;/p&gt;

&lt;p&gt;Matz, Sandi Metz, Katrina Owen, Avdi Grimm, Chris Kelly, Matt Wynne...ok, I won&amp;#39;t list the whole line up. The talks were great, the discussions in the breaks and the party even better and getting to meet up with old friends and acquaintances is...priceless.&lt;/p&gt;

&lt;p&gt;One thing I would have done differently (well, we did do differently at EuRuKo) would be to stretch the intervals a bit more, to give people more time to talk between talks. But it&amp;#39;s a delicate balance and the chosen format puts more talks on offer which is also great.&lt;/p&gt;

&lt;p&gt;I  managed to squeeze a lightning talk (I even have &lt;a href=&quot;/images/DevopsInTheRealWorld.pdf&quot;&gt;slides&lt;/a&gt; for it) on the two principles a team needs to follow when setting up it&amp;#39;s project development environment.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s two talks I would add to the show-to-every-one-because-it-explains-things-better-than-you-ever-will category. These are Sandi Metz&amp;#39;s &amp;quot;Rules&amp;quot; and Corey Haine&amp;#39;s &amp;quot;Design Patterns And The Proper Cultivation Thereof&amp;quot;. &lt;/p&gt;

&lt;p&gt;For sheer win-win in entertainment and knowledge I&amp;#39;ll push Katrina Owen&amp;#39;s &amp;quot;Here be Dragons&amp;quot; and to start a spirited discussion I&amp;#39;ll just show you Reg Braithwaite&amp;#39;s &amp;quot;What Developing With Ruby Can Teach Us About Developing Ruby&amp;quot;.&lt;/p&gt;

&lt;p&gt;If an outsider ever drops in for a visit at a Ruby conference he might get the impression that Rubyists keep patting themselves on the back and congratulating themselves on what a great, friendly and welcoming community they have. And he might leave with a slight &amp;quot;puff, them Rubyists think too much off themselves&amp;quot;.
That would be a mistake. The community is this language&amp;#39;s strongest feature. The people are approachable, open minded, hard working and knowledgable.
They will go out of their way to welcome new members and are generous with their time and knowledge.&lt;/p&gt;

&lt;p&gt;Every Ruby conference I have been to has been a pleasure and an inspiration mainly because of the people attending and Baruco was no exception. It was rather a very nice confirmation of the rule :).&lt;/p&gt;
</description>
        <pubDate>Wed, 18 Sep 2013 14:00:00 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2013/09/18/baruco2013</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2013/09/18/baruco2013</guid>
      </item>
    
  </channel>
</rss>