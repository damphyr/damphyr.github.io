<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ampelofilosofies</title>
    <description>Random comments on random subjects in random language</description>
    <link>http://www.ampelofilosofies.gr</link>
    <atom:link href="http://www.ampelofilosofies.gr/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>A decade in eight months</title>
        <description>&lt;p&gt;It has been a decade in less than 8 months.&lt;/p&gt;

&lt;p&gt;The last time I had some time to gather and collect thoughts is shrouded in mental mist. In the beginnings of April, while adjusting to a full lockdown with far reaching personal consequences, I took on a new challenge by casually accepting a new project assignment.&lt;/p&gt;

&lt;p&gt;The new team needed a “data lead”, someone described as “knows databases”. It has been about 20 years since I’ve had to earnestly confront normalisation forms or stored procedures or even query optimisation and indexes but I wasn’t really worried (hence the “casual” acceptance).&lt;/p&gt;

&lt;p&gt;I was right not to worry… about databases. Eight months later and all we use is a key-value store.&lt;/p&gt;

&lt;p&gt;It has been a decade in less than 8 months.&lt;/p&gt;

&lt;p&gt;My team has delivered the impossible: a working, web scale system in a landscape of ever changing requirements and priorities that serves tens of millions of clients daily, all in under 4 months.&lt;/p&gt;

&lt;p&gt;My team is able to pivot within hours and delivers features within a day or two. My team has had to pivot and re-prioritize every other week for the past 4 months - need trumps planning every freaking time.&lt;/p&gt;

&lt;p&gt;My team has done this working 100% remotely. With cats and dogs, kids and spouses present and overburdened wifi.&lt;/p&gt;

&lt;p&gt;My team is doing voodoo and they do it soooo well.&lt;/p&gt;

&lt;p&gt;I am immenselly proud to be part of this team.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/V2Ylf5EhsUPMQ/giphy.gif&quot; alt=&quot;Go and do the voodoo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It has been a decade in less than 8 months.&lt;/p&gt;

&lt;p&gt;The list of lessons hammered under relentless pressure and unprecedented visibility is not fully formed yet. And it is already long.&lt;/p&gt;

&lt;p&gt;There are so many things to talk about, I need a sabbatical just to put the list together.&lt;/p&gt;

&lt;p&gt;Actually having a list of discrete subjects to talk about &lt;em&gt;is&lt;/em&gt; the hardest thing. Breaking apart the melange of compromises, decisions, solutions discarded, solutions chosen and lucky guesses all done in a astonishingly short time.&lt;/p&gt;

&lt;p&gt;Looking back at incidents in a manner that isolates them from each other, the sequence they occured and the environment they occured in invites errors. Misconception and misunderstanding.&lt;/p&gt;

&lt;p&gt;The usual reductive way I follow when deciding what to focus on when crafting an experience report is not going to work this time. There is not a single point, something easily punted into a single sentence aphorism (“Automate all the things!”, “People before technology!”, “Repository first!”) that can do justice to the past eight months.&lt;/p&gt;

&lt;p&gt;I’ve read about big formative projects that gave birth to ground-breaking approaches on how teams create software. This feels like one of those projects, even though there is nothing ground-breaking in the tools and methods my team uses.&lt;/p&gt;

&lt;p&gt;I catch myself going through all that material, presentations and notes and the memories of conference encounters. This time I look for the uncertainties, the references to compromise, the “it depends”, the hesitation before delivering a list of rules, the caveats.&lt;/p&gt;

&lt;p&gt;It would be a lie to say that people don’t talk about compromises and trade-offs. More like that the warnings and conditionals are discarded with the passage of time leaving a shiny, polished success recipe, a myth.&lt;/p&gt;

&lt;p&gt;I need a new way of telling stories about (software) systems and the teams of people that build them.&lt;/p&gt;
</description>
        <pubDate>Sun, 29 Nov 2020 15:15:21 +0100</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2020/11/29/decade-in-eight-months</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2020/11/29/decade-in-eight-months</guid>
      </item>
    
      <item>
        <title>Tales of Teamcity: Failures in Kotlin</title>
        <description>&lt;p&gt;&lt;em&gt;This is part of a series of posts documenting my ongoing adventures in TeamCity, starting at &lt;a href=&quot;/software/2020/03/31/adventures-in-kotlin-1&quot;&gt;Tales of Teamcity: Adventures in Kotlin&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Kotlin is cool. I am a fool.&lt;/p&gt;

&lt;p&gt;These two sentences are both true. The best aggro moment of the last three days was when I spent over two hours trying to figure out why the following script failed:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;jetbrains.buildServer.configs.kotlin.v2019_2.*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2019.2&quot;&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;TeamCity as Code&quot;&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;buildType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Experiment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Experiment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BuildType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;experiment&quot;&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;vcs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DslContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settingsRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;steps&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Docs&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;scriptContent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;rake doc:gaudi&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I even went as far a posting an issue on the TeamCity support site. And then I went to bed, slept through the night, looked at the code again this morning and remembered I am writing code in a JVM language.&lt;/p&gt;

&lt;p&gt;So I added&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;jetbrains.buildServer.configs.kotlin.v2019_2.buildSteps.script&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;at the top.&lt;/p&gt;

&lt;p&gt;Remember, I am a professional and I have been doing this for 25 years.&lt;/p&gt;

&lt;p&gt;It helps that your TeamCity instance hosts the DSL reference at &lt;em&gt;app/dsl-documentation/index.html&lt;/em&gt;.
It also helps to read said reference.&lt;/p&gt;

&lt;p&gt;But mostly, it helps when you just go to bed and try again when you’re fresh.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;The response to my brain-dead-due-to-lack-of-sleep support request came as I was writing this. Response time less than 16 hours. I am liking this.&lt;/p&gt;
</description>
        <pubDate>Tue, 31 Mar 2020 19:15:21 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2020/03/31/adventures-in-kotlin-2</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2020/03/31/adventures-in-kotlin-2</guid>
      </item>
    
      <item>
        <title>Tales of Teamcity: Adventures in Kotlin</title>
        <description>&lt;p&gt;TeamCity is one CI system I haven’t had a lot of contact until now. As will become evident, this has now changed.&lt;/p&gt;

&lt;p&gt;So, alongside a crash course in basic Kotlin, I now have to figure out how to get my brand of build automation working in TeamCity.&lt;/p&gt;

&lt;h2 id=&quot;the-gatekeeper&quot;&gt;The gatekeeper&lt;/h2&gt;

&lt;p&gt;I have one criterion for accepting a build management system:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Build job specifications have to be stored in the repository
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s explore if TeamCity makes it past the door and how far we can take it.&lt;/p&gt;

&lt;h2 id=&quot;first-contact&quot;&gt;First contact&lt;/h2&gt;

&lt;p&gt;First contact is always a search along the lines of “build DSL, TeamCity”. I was already aware that TeamCity offers a DSL based on Kotlin and so we landed very fast on the &lt;a href=&quot;https://blog.jetbrains.com/teamcity/2019/03/configuration-as-code-part-1-getting-started-with-kotlin-dsl/&quot;&gt;blog series&lt;/a&gt; describing these features.&lt;/p&gt;

&lt;p&gt;This gets TeamCity through the door. It’s also a pretty cool taster for what Kotlin can do: the DSL looks clean and it looks like the web UI offers a way to get easily from clicked-together to code.&lt;/p&gt;

&lt;p&gt;I have studiously ignored all the IDEA bait in those posts. You should not need code completion to put a few pipelines together (narrator: he was mostly wrong).&lt;/p&gt;

&lt;p&gt;I have also skipped and jumped over the Maven references. Seriously, I have a pom allergy. It is probably going to bite me in the behind as soon as this system gets reasonably complicated and I am going to need tests, but it was all I could do to keep reading after my eyes brushed over that XML.&lt;/p&gt;

&lt;h2 id=&quot;reality-check&quot;&gt;Reality check&lt;/h2&gt;

&lt;p&gt;OK, I’m armed with Kotlin and I’ve got a TeamCity instance and I’ve got a project and I see that all the settings are version controlled. But they all go to this one repository somewhere beyond my reach.&lt;/p&gt;

&lt;p&gt;It turns out you need pretty wide-reaching access rights to be able to activate versioned settings. Luckily, it took about 10 seconds of pointed question asking and:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/AchievementUnlocked.png&quot; alt=&quot;Achievement Unlocked&quot; class=&quot;no-float&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Seriously, I’m framing this - it was my fastest 0-to-admin time ever!&lt;/p&gt;

&lt;h2 id=&quot;get-off-my-master&quot;&gt;Get off my master&lt;/h2&gt;

&lt;p&gt;Turning on versioning for project settings has one drawback: Every time you change something in the web UI, Teamcity will commit the changes in the designated repository. And it does it on master.&lt;/p&gt;

&lt;p&gt;Now, depending on the workflow you follow for your git usage this may be a good or a bad thing.&lt;/p&gt;

&lt;p&gt;First, lets agree that in principle, no changes should be done in the UI. Also, that if, by any chance any changes are done in the UI, whatever we have in the repository should overwrite them.&lt;/p&gt;

&lt;p&gt;This is rule of git acquisition number 23:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;The repository comes first&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So, when we set up versioning we set the appropriate option:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/tc_no_ui_changes.png&quot; alt=&quot;No UI changes allowed&quot; class=&quot;no-float&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, the comment accompanying the option gives me hope that things have been done properly.&lt;/p&gt;

&lt;p&gt;The goal here is to have the build setup correspond to the state of the code base at the time of the commit you are building. The &lt;a href=&quot;https://www.jetbrains.com/help/teamcity/storing-project-settings-in-version-control.html&quot;&gt;docs&lt;/a&gt; hit all the right notes for this setting. This remains to be tested.&lt;/p&gt;

&lt;p&gt;As outlined in &lt;a href=&quot;/software/2019/06/18/disaster-resistant-git&quot;&gt;disaster resistant git&lt;/a&gt; I recommend using pull requests on the quest to emulate trunk-based development.&lt;/p&gt;

&lt;p&gt;This means that master is locked, changes are allowed only via pull request and there are merge checks that mandate a successfull build.&lt;/p&gt;

&lt;p&gt;In the TeamCity context such a setup guarantees that no changes in the UI will be accepted. But it will generate a whole bunch of errors for anyone making changes.&lt;/p&gt;

&lt;p&gt;It also makes it difficult to explore and experiment with options and see how they translate to DSL code. Doubly so, because not all options that change the settings offer a nice ‘View DSL’ button - for example adding NuGet Feeds&lt;/p&gt;

&lt;h2 id=&quot;playground&quot;&gt;Playground&lt;/h2&gt;

&lt;p&gt;Basically I have a playground repository with a scaffolded &lt;a href=&quot;https://github.com/damphyr/gaudi&quot;&gt;gaudi&lt;/a&gt; that I can use to click things together. I think I already stumbled on a bug for a runner, so expect a post on community, support and bug reports.&lt;/p&gt;

&lt;p&gt;I’ve already put a variant of the &lt;a href=&quot;https://blog.jetbrains.com/teamcity/2019/04/configuration-as-code-part-3-creating-build-configurations-dynamically/&quot;&gt;Configuration as Code, Part 3: Creating Build Configurations Dynamically&lt;/a&gt; to good use and it has opened some interesting questions, so that will be the next post.&lt;/p&gt;
</description>
        <pubDate>Tue, 31 Mar 2020 14:15:21 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2020/03/31/adventures-in-kotlin-1</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2020/03/31/adventures-in-kotlin-1</guid>
      </item>
    
      <item>
        <title>ForgetMeNot: Organized xUnit reports in Jenkins</title>
        <description>&lt;p&gt;One of the hackiest formats under wide adoption is the JUnit report format.&lt;/p&gt;

&lt;p&gt;It is not really from JUnit, it’s from Ant. It is not really documented anywhere - some people try to figure it out by reading the source (after looking for it first in the JUnit sources - lots of fun following the different StackOverflow threads on this).&lt;/p&gt;

&lt;p&gt;Given that there is no official schema or spec I am not surprised in the totally inconsistent behaviour of any tool claiming to read/write or understand the JUnit report format.&lt;/p&gt;

&lt;p&gt;There is one particular hero &lt;a href=&quot;https://twitter.com/WindyRoadTech&quot;&gt;@WindyRoadTech&lt;/a&gt;, who created &lt;a href=&quot;https://github.com/windyroad/JUnit-Schema&quot;&gt;an XSD schema&lt;/a&gt;. What I am about to do will fail the schema validation (at the time of writing).&lt;/p&gt;

&lt;p&gt;The problem with JUnit reports created by tools other than Ant is that the original implementation makes some assumptions.&lt;/p&gt;

&lt;p&gt;These are that you are basically running Java and that your code is organized in Java packages, i.e. it has a format of Package.Something.Whatever.Class.&lt;/p&gt;

&lt;p&gt;What Ant did was split the full class name of a testcase and add pieces of it as attributes to the &lt;em&gt;testsuite&lt;/em&gt; and &lt;em&gt;testcase&lt;/em&gt; elements of the report.&lt;/p&gt;

&lt;p&gt;Time goes by, and all kinds of tools start using this JUnit format - I blame Jenkins and the JUnit report plugin for introducing people to pretty colors they could show other people.&lt;/p&gt;

&lt;p&gt;More time went by, generations in Internet years. The JUnit plugin was too limited, so the xUnit plugin was born. This one could understand lots of report formats.&lt;/p&gt;

&lt;p&gt;But the way the report is organized did not change. xUnit shows tests grouped in packages.
It figures out what to use as a package name by using the &lt;em&gt;classname&lt;/em&gt; attribute of the &lt;em&gt;testsuite&lt;/em&gt; elements&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;testsuite&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;InterestingTests&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tests=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;failures=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;disabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;errors=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;time=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;50.582&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;timestamp=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2020-03-12T17:40:33&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;classname=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Integration&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You would expect that all test cases within that element would be listed under that package. But no. Apparently the reporter parses the classname for &lt;strong&gt;each&lt;/strong&gt; testcase and builds “packages” out of that.&lt;/p&gt;

&lt;p&gt;So if you have a bunch of let’s say GTest tests and emit an XML report, all of your tests are going in the &lt;em&gt;Root&lt;/em&gt; package, since, you know, no &lt;em&gt;Java&lt;/em&gt; namespaces and one has to choose a default name (which GTest hard-codes).&lt;/p&gt;

&lt;p&gt;What is a build enginneer to do, but post-process that XML report so that his team gets nicely categorized tests. No need for fancy code, brute force it in Ruby:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Rewrites (in place) an XML report produced by gtest to add a classname to testsuites and&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# adapt the classnames to test cases.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# so that they sort nicely when presented by the xUnit plugin in Jenkins&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;classify_test_report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Nokogiri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;XML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;suites&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;//testsuite&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;testcases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;//testcase&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;testcases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;classname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_class&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;classname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;suites&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;classname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_class&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;write_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_report&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That &lt;em&gt;write_file&lt;/em&gt; comes from &lt;a href=&quot;https://github.com/damphyr/gaudi&quot;&gt;gaudi&lt;/a&gt;, but, you know, it writes the file to disk.&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Mar 2020 13:15:21 +0100</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2020/03/12/forgetmenot-xunit-reports</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2020/03/12/forgetmenot-xunit-reports</guid>
      </item>
    
      <item>
        <title>ForgetMeNot: Pass values onwards in Azure Devops</title>
        <description>&lt;p&gt;Azure Devops has this really cool feature, where you can use specially formated stdout strings to pass different commands.&lt;/p&gt;

&lt;p&gt;They are called &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/scripts/logging-commands?view=azure-devops&amp;amp;tabs=bash&quot;&gt;logging commands&lt;/a&gt; and by far the most useful of those is setvariable which allows us to set a variable in one task, that is then available as an environment variable in subsequent tasks:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;##vso[task.setvariable variable=testvar;]testvalue&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A useful example for this:&lt;/p&gt;

&lt;p&gt;Let us say we use &lt;a href=&quot;https://gitversion.net/docs/&quot;&gt;GitVersion&lt;/a&gt; to alleviate the headache of versioning and we put together a pipeline to publish a Nuget package.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/dotnet-core-cli?view=azure-devops&quot;&gt;dotnet task&lt;/a&gt; in Azure Devops (as well as the &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/package/nuget?view=azure-devops#versioning-schemes&quot;&gt;nuget task&lt;/a&gt;) offers the byEnvVAr versioning scheme, which allows you to pass the desired version number in an environment variable.&lt;/p&gt;

&lt;p&gt;Use you favourite scripting language to calculate the version number and a logging command, for example with bash&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo &quot;##vso[task.setvariable variable=THE_CORRECT_VERSION;]`GitVersion /output json /showvariable FullSemVer`&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then pack the Nuget package without worrying about the version:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DotNetCoreCLI@2&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pack&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;packagesToPack&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$(project)&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--configuration&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$(buildConfiguration)&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;versioningScheme&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;byEnvVar&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;versionEnvVar&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;THE_CORRECT_VERSION&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 27 Jan 2020 13:15:21 +0100</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2020/01/27/forget-me-not-setvariable</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2020/01/27/forget-me-not-setvariable</guid>
      </item>
    
      <item>
        <title>Published author...sort of</title>
        <description>&lt;p&gt;In the past year a group of Zühlke coleagues led by &lt;a href=&quot;https://twitter.com/sypounentes&quot;&gt;Christian Abegg&lt;/a&gt;  and &lt;a href=&quot;https://twitter.com/peitor&quot;&gt;Peter Gfader&lt;/a&gt; put together a collection of articles about things we consider important with the aim of publishing them as a book.&lt;/p&gt;

&lt;p&gt;That book is finally out!&lt;/p&gt;

&lt;p&gt;The official blurb is&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In «Machines – Code – People» readers learn about best practices, cultural philosophies, great ideas and practically proven concepts. In 50 short articles Zühlke engineers share what they are passionate about. You will find many useful tips from various areas of today’s tech industry. The range of topics covered includes the latest technical developments as well as collaboration topics and individual values and techniques.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can buy the dead tree version on &lt;a href=&quot;https://www.amazon.de/Machines-Code-People-engineers-passionate/dp/3748141181/ref=sr_1_1?__mk_de_DE=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;amp;keywords=machines+code+people&amp;amp;qid=1561359217&amp;amp;s=gateway&amp;amp;sr=8-1&quot;&gt;Amazon&lt;/a&gt;, you can browse it for free &lt;a href=&quot;https://zuehlke.github.io/machines-code-people/&quot;&gt;online&lt;/a&gt; or download one of the &lt;a href=&quot;https://zuehlke.github.io/machines-code-people/articles/preface.html&quot;&gt;e-book versions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I consider this a 70% step to crossing “be a published author” off the bucket list.&lt;/p&gt;

&lt;p&gt;I am especially proud, not just because of my article in the book (it is an edited version of the &lt;a href=&quot;/software/2014/07/17/vars-build-rules&quot;&gt;build rules&lt;/a&gt; post in this blog) but because I came up with a title the rest of the company found cool.&lt;/p&gt;

&lt;p&gt;Taken verbatim from our internal discussion when deciding on the title:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It alludes (admittedly over-simplified, but what do you expect from a title) to the course Zuehlke has taken over the 50 years of its history: From building machines and electronics, to adding software and processes (code), innovation and business consulting which is ultimately people.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It also works as the three things we do best (if you put the people in the context of working with the machines and code ;) ).&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Jun 2019 14:15:21 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2019/06/26/published-author</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2019/06/26/published-author</guid>
      </item>
    
      <item>
        <title>Adventures in Azure DevOps: I git too fast</title>
        <description>&lt;p&gt;I like keeping the number of commits in my pull requests in the low single digits, preferably 1. For context see the post on my &lt;a href=&quot;/software/2019/06/18/disaster-resistant-git&quot;&gt;disaster resistant git workflow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I used to do all the work, squashing the commits at the end of the work before merging my pull requests but recently I have switched to using &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit --amend&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The reason for this is that while I have noticed that I rarely need to re-arrange my commits in logical groups when squashing (call it a benefit of experience - it certainly was not like this years ago), I make a lot of typing and syntax errors.&lt;/p&gt;

&lt;p&gt;As a result my typical change originally looks like&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;c31e548 Some informed and wise comment on the change
dfdfd15 typo
d19f4f1 typo
7122e4a typo fix
a62803a syntax fix
53b99b8 dammit
c657575 why didn't this work?
d8e72cf doh, PEBKAC
5017515 what an idiot
59c53d1 stupid semicolon
db6aa1c I hate ...
47d3dc7 AAAARGH
4640d92 done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Previously I would be kind and squash, but you could follow everything in the pull request notifications. &lt;code class=&quot;highlighter-rouge&quot;&gt;--amend&lt;/code&gt;allows me to appear infalible :D.&lt;/p&gt;

&lt;p&gt;As an added optimization (remember, I usually do builds and CI and stuff like that - my code does not need the CI, it IS the CI) I recently added an alias to my collection:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config alias.cowboy
&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;--amend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As a measure of sparing me a few keystrokes it is great (remember, I typo &lt;strong&gt;a lot&lt;/strong&gt;). As a practice it is questionable, but see in which context it is used in the aforementioned git workflow post.&lt;/p&gt;

&lt;p&gt;Funnily, in Azure Devops I get to trip myself up with this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/git-too-fast.png&quot; alt=&quot;Checkout error&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Today I started with builds failing on checkout, which was wierd.&lt;/p&gt;

&lt;p&gt;Looking closer it gets momentarily even wierder:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fatal: reference is not a tree
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;what-happened&quot;&gt;What happened&lt;/h2&gt;

&lt;p&gt;Basically my cowboy ways pulled the rug from under git’s feet.&lt;/p&gt;

&lt;p&gt;What you see is a live demostration of the dangers of rewriting history in git.&lt;/p&gt;

&lt;p&gt;The build is setup with a stage of 5 jobs but for the moment we only have a pool of 2 agents. So if I catch my typo fast enough and play the cowboy card the running build will try to get a SHA that does not exist anymore.&lt;/p&gt;

&lt;p&gt;No harm done other than a negative skew on my successfull build percentage.&lt;/p&gt;

&lt;p&gt;Everything is fine, we’re all professionals here.&lt;/p&gt;
</description>
        <pubDate>Tue, 18 Jun 2019 16:15:21 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2019/06/18/azure-devops-git-too-fast</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2019/06/18/azure-devops-git-too-fast</guid>
      </item>
    
      <item>
        <title>Disaster-resistant git</title>
        <description>&lt;p&gt;Over the years I have developed a very disaster-resistant git workflow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Change to open-ended branches (master, develop, releases etc.) is always via pull requests.&lt;/li&gt;
  &lt;li&gt;Force push is blocked on all open branches.&lt;/li&gt;
  &lt;li&gt;All changes happen in a branch, no matter how small.&lt;/li&gt;
  &lt;li&gt;Branch is always rebased onto its PR target, never merged.&lt;/li&gt;
  &lt;li&gt;Merge strategy is usually rebase and –no-ff.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That last one is more a cosmetic preference: In projects with big teams and complex structures/systems it is easier to track the sequence of introduction of the changes via the merge nodes.
For the rest of this post when you see ‘branch’ it means a branch that will eventually be merged into another as opposed to an “open-ended” branch like &lt;em&gt;master&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-problem-is-merging&quot;&gt;The problem is merging&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;There is a beast at the end of most branches and it is called Merge. It strikes fear in the hearts of all programmers and only a special few dare face it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Its most powerful weapon, the razor sharp Merge Conflicts will shred your intellect to pieces in a single stroke, leaving you wandering aimlesssly in a sea of Code.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The beast grows more powerful with Time. Enough Time passes and it will be invincible.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It feeds on Code, give it enough and it will be invincible.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;dealing-with-merge-conflicts&quot;&gt;Dealing with merge conflicts&lt;/h2&gt;

&lt;p&gt;The fear of merges and merge conflicts usually develops when someone attempts to merge a branch that contains too many changes and has been growing over a long time (from days to weeks, it depends on your team’s velocity - I once had to merge one that was almost a year old, in svn no less - true story, not fun).&lt;/p&gt;

&lt;p&gt;When encountering a merge conflict, the human algorithm is as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Have I changed the file?
    &lt;ul&gt;
      &lt;li&gt;Yes: I know how to resolve the conflict because I know what I wanted to do.&lt;/li&gt;
      &lt;li&gt;No: Take the other version.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After finishing the merge, always check the resulting diff, since sometimes the automatic merge algorithm will produce changes that are logically faulty (i.e. you can get buggy code or non-sensical content that merges fine).&lt;/p&gt;

&lt;p&gt;In a long-running branch with a lot of changes I simply do not know enough to resolve the conflict, either because multiple people are involved or because I have forgotten over time. Now I have to reconstruct the context while merging or quit.&lt;/p&gt;

&lt;p&gt;Also, in a long chain of commits I really have no idea how to resolve a conflict in a commit in the middle of the chain - I have often had to resolve a conflict in a long commit chain that was reverted in a later commit.&lt;/p&gt;

&lt;p&gt;Never mind checking the diff when it is 50 files and a couple of thousand LOCs.&lt;/p&gt;

&lt;p&gt;This is reason number one against feature branches - too much, left for too long.&lt;/p&gt;

&lt;p&gt;So there are guidelines:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Branches need to be short-lived&lt;/li&gt;
  &lt;li&gt;Keep the diff small&lt;/li&gt;
  &lt;li&gt;Keep the number of commits small to very small&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As always, one-line guidelines require ellaboration.&lt;/p&gt;

&lt;h2 id=&quot;branch-lifetime&quot;&gt;Branch lifetime&lt;/h2&gt;

&lt;p&gt;Short-lived, when we define it in time, is unfortunately a very fuzzy term. You will find advice like “no more than a day” and other equally arbitrary terms.&lt;/p&gt;

&lt;p&gt;This guideline is the one I see teams ignoring most often. And as long as the rest are followed, with little or no consequences if we want to be honest.&lt;/p&gt;

&lt;p&gt;As long as you remember what the change is - the context and the goal as well - the branch is not old.&lt;/p&gt;

&lt;p&gt;Time alone is not a good criterion. Measuring distance from your target branch in LOCs (the size of the diff) or number of commits is a better indicator of staleness and your chances of encountering the Merge Beast.&lt;/p&gt;

&lt;h2 id=&quot;diff-size&quot;&gt;Diff size&lt;/h2&gt;

&lt;p&gt;IM(NSH)O this is the really critical factor. In order to satisfy the conflict resolution algorithm I need to know about the change. The bigger it is, the more difficult the task.&lt;/p&gt;

&lt;p&gt;Another factor is senseless diff bloat like whitespace changes or stylistic changes. Treat them like a self-contained change. Do not mix them with logic changes. If you need to change the style, the identation size, tabs to spaces etc. then &lt;strong&gt;do it in a separate branch&lt;/strong&gt; and PR.&lt;/p&gt;

&lt;p&gt;Better yet, auto-format on commit (a man can have whishes!).&lt;/p&gt;

&lt;p&gt;In practice, keep the list of changed files to a minimum and the LOC size per file small. In other words, keep your PR diff view clean.&lt;/p&gt;

&lt;h2 id=&quot;number-of-commits&quot;&gt;Number of commits&lt;/h2&gt;

&lt;p&gt;For a long time I was of the ‘small commits, discrete steps towards the solution’ school. Each commit should do one thing and my commits are structured and commented in such a way as to present the reviewer with my path towards the solution.&lt;/p&gt;

&lt;p&gt;This is a brilliant approach if you are creating a workshop or you are teaching.&lt;/p&gt;

&lt;p&gt;In the real world we are interested in the solution. We’re a team of software developers, we have trust in our abilities to grasp small to medium globs of code. And in practice we use the pull request forms to do the work. So at work the unit of change is the pull request, not the commit.&lt;/p&gt;

&lt;p&gt;The unspoken assumption is that I have broken my user stories down to manageable pieces and do not improvise a redesign while writing the code.
Keep the number of commits low (single digit number), ideally bring it down to 1.&lt;/p&gt;

&lt;p&gt;How many commits away you are from master is a good indicator of how stale your branch is. This is easily solved with a routine of regular rebasing. Regular as in &lt;em&gt;at least once a day&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;How many commits you have in your branch is a good indicator of the amount of trouble you will be when merging. And since rebasing is the same as merging in this aspect, how difficult your daily routine will be.&lt;/p&gt;

&lt;p&gt;Setting &lt;a href=&quot;https://git-scm.com/docs/git-rerere&quot;&gt;rerere&lt;/a&gt; in the git configuration simplifies repeated rebases but it is a setting that has to be used with caution.&lt;/p&gt;

&lt;h2 id=&quot;side-notes&quot;&gt;Side notes&lt;/h2&gt;

&lt;p&gt;There are some points that might be obvious to some:&lt;/p&gt;

&lt;p&gt;Doing all changes in branches &lt;em&gt;localizes&lt;/em&gt; your conflict resolution algorithm to the branch. It provides a necessary restriction of context that removes &lt;strong&gt;a lot&lt;/strong&gt; of overhead. It is &lt;em&gt;your&lt;/em&gt; change you need to care about.&lt;/p&gt;

&lt;p&gt;This means that branch constructs like the one used by git flow where &lt;em&gt;develop&lt;/em&gt; is merged into &lt;em&gt;master&lt;/em&gt; cannot be easily supported like this.&lt;/p&gt;

&lt;p&gt;A PR workflow following the guidelines faithfully is like a discrete time simulation of trunk-based development with the steps being the merge nodes. The smaller the blocks (i.e. number of commits), the closer we are to trunk-based. Remove the –no-ff from the merge strategy and the distinction dissappears in the end result.&lt;/p&gt;

&lt;p&gt;Larger changes (of which the most common type we call ‘features’) require conscious design.
In my experience, teams fall prey to the Merge Beast because they lack ways to incrementally introduce changes or have been given user stories that are too vague or too big. This is not a git related subject, don’t blame the tool.&lt;/p&gt;
</description>
        <pubDate>Tue, 18 Jun 2019 14:15:21 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2019/06/18/disaster-resistant-git</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2019/06/18/disaster-resistant-git</guid>
      </item>
    
      <item>
        <title>Adventures in Azure DevOps: iOS secrets</title>
        <description>&lt;p&gt;This new-fangled (&lt;em&gt;sic&lt;/em&gt;) mobile app development thing, I tell you. I have been hearing stories, horror stories.&lt;/p&gt;

&lt;p&gt;For example, the “certificates for iOS applications” story. Pure horror. Grey hair overnight, stuff of nightmares.&lt;/p&gt;

&lt;p&gt;And then they tell you you have to build these things in the cloud, on disposable VMs.&lt;/p&gt;

&lt;p&gt;I have a rule when setting up projects for teams that aspire to the DevOps tag:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Just the repository&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I should be able, with just the contents of the repository, to reconstruct the project, inclusive of development environment, production setup and released artifacts.&lt;/p&gt;

&lt;p&gt;I will accept one exception to this rule and this is &lt;strong&gt;secrets&lt;/strong&gt;. Under no circumstances should any type of secret, be that password, private key or certificate, end up in the repository.&lt;/p&gt;

&lt;p&gt;At least that is the theory. To swing back to the title subject, handling of certificates in iOS app compilation has broken this rule in &lt;em&gt;every single project&lt;/em&gt; I have seen to date. Admittedly, that number is in the low double digits.&lt;/p&gt;

&lt;p&gt;Typically there will be a chosen deployment profile to be added to the repo for CI purposes and we will trust on the privacy of the repo, or the eventual expiration of the certificates.&lt;/p&gt;

&lt;p&gt;So, finding out that Azure DevOps explicitly caters to exactly this case within the build pipelines is a very nice surprise.&lt;/p&gt;

&lt;p&gt;Since the 2018 version there is a &lt;a href=&quot;https://docs.microsoft.com/en-gb/azure/devops/pipelines/tasks/utility/install-apple-provisioning-profile?view=azure-devops&quot;&gt;dedicated task (InstallAppleProvisioningProfile)&lt;/a&gt; for Apple provisioning profiles.&lt;/p&gt;

&lt;p&gt;This is based on the &lt;a href=&quot;https://docs.microsoft.com/en-gb/azure/devops/pipelines/library/secure-files?view=azure-devops&quot;&gt;secure files&lt;/a&gt; facility, which allows us to store secrets separately from the repos and use them in pipelines.&lt;/p&gt;

&lt;h2 id=&quot;no-exceptions-to-the-rule&quot;&gt;No exceptions to the rule&lt;/h2&gt;

&lt;p&gt;Back to &lt;code class=&quot;highlighter-rouge&quot;&gt;Just the repository&lt;/code&gt;, just because I do not really like exceptions, especially exceptions that have a tendency to run amok.&lt;/p&gt;

&lt;p&gt;Secrets are such an exception. You can get a lot of them: SSL certificates, signing certificates, SSH keys, Apple provisioning profiles, Android Keystore etc. A modern development environment catering to the cloud is useless without them.&lt;/p&gt;

&lt;p&gt;A practical solution to this is something like &lt;a href=&quot;https://keepass.info/&quot;&gt;KeePass&lt;/a&gt;, which is a password manager with no internet service to back it, but with a useful scripting interface.&lt;/p&gt;

&lt;p&gt;The concept goes like this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;All secrets are kept in a KeePass database file, which is commited in the repo.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Whether you script secret retrieval from the KeePass DB to add it to Azure Devops (or whichever secret management service/tool you use), or just document their existence and prefered management solution I leave to you, dear reader.&lt;/p&gt;

&lt;p&gt;That leaves us with one secret (the password/key to the KeePass database) to transmit over alternate channels.&lt;/p&gt;

&lt;h2 id=&quot;staying-flexible&quot;&gt;Staying flexible&lt;/h2&gt;

&lt;p&gt;The KeePass DB  approach also allows us to handle using the secrets locally with a bit of clever scripting.&lt;/p&gt;

&lt;p&gt;If I want to follow &lt;a href=&quot;/software/2014/07/17/vars-build-rules&quot;&gt;my own rules&lt;/a&gt;, there needs to be a way to replicate the build locally, and just setting up XCode with my own key is not close enough a replica for my criteria (i.e. I still want to be able to produce a production build locally - just in case the cloud fails. Call me paranoid).&lt;/p&gt;

&lt;p&gt;Using secure files introduces a deviation between local build and CI that cannot be replicated by the simple fact that secure files can only be downloaded with use of the Azure Devops pipeline task. There is no script alternative to allow you to get to the file outside a pipeline.&lt;/p&gt;

&lt;p&gt;The bit of clever scripting would at least simulate the secure files function by retrieving the secret out of KeePass instead.&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Jun 2019 14:15:21 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2019/06/14/azure-devops-ios-secrets</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2019/06/14/azure-devops-ios-secrets</guid>
      </item>
    
      <item>
        <title>Multiplatform build adventures: Xamarin</title>
        <description>&lt;p&gt;Now that I can have everything &lt;a href=&quot;/software/2019/06/12/dotnet-core-clean-builds&quot;&gt;out-of-band&lt;/a&gt; I like the dotnet core tooling a bit more.&lt;/p&gt;

&lt;p&gt;But it looks like we’re not there for everything yet - funny in a way, since now, even though in this project everything is Microsoft, I still have to integrate differrent toolchains.&lt;/p&gt;

&lt;p&gt;So, the newest problem on the block: Xamarin Android projects cannot be restored with &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet restore&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/dotnet/project-system/issues/2498&quot;&gt;relevant bug entry&lt;/a&gt; is at the time of writing still open and &lt;em&gt;not&lt;/em&gt; adressed in VS2019.&lt;/p&gt;

&lt;p&gt;So, we fall back to msbuild with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;msbuild /t:restore AndroidApp.csproj
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Thu, 13 Jun 2019 14:15:21 +0200</pubDate>
        <link>http://www.ampelofilosofies.gr/software/2019/06/13/xamarin-dotnet</link>
        <guid isPermaLink="true">http://www.ampelofilosofies.gr/software/2019/06/13/xamarin-dotnet</guid>
      </item>
    
  </channel>
</rss>